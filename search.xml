<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>“ThingsBoard rest-client 依赖 maven无法下载解决”</title>
      <link href="/2024/05/14/ThingsBoard%20rest-client%20%E4%BE%9D%E8%B5%96%20maven%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%86%B3/"/>
      <url>/2024/05/14/ThingsBoard%20rest-client%20%E4%BE%9D%E8%B5%96%20maven%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="ThingsBoard-rest-client-依赖-maven无法下载解决"><a href="#ThingsBoard-rest-client-依赖-maven无法下载解决" class="headerlink" title="ThingsBoard rest-client 依赖 maven无法下载解决"></a>ThingsBoard rest-client 依赖 maven无法下载解决</h1><p>thingsboard官方文档中提到，java使用rest-client需要使用如下依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thingsboard<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>操蛋的是，无论是阿里云，华为云还是什么搜索引擎能搜到的，找得到的maven仓库地址，最后都显示无法找到这个包</p><p>官方提供的<code>repositories</code>标签不知为何无法指定，且一打上去就报错:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>thingsboard<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://repo.thingsboard.io/artifactory/libs-release-public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后，根据官方给的仓库url，得到下面这个setting.xml中的<mirror>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>thingsboard<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>thingsboard<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://repo.thingsboard.io/artifactory/libs-release-public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>保存后重启idea，完美引入该依赖</p>]]></content>
      
      
      <categories>
          
          <category> 小问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java,maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL影响性能的几个操作</title>
      <link href="/2023/10/24/MySQL%E5%BD%B1%E5%93%8D%E6%80%A7%E8%83%BD%E7%9A%84%E5%87%A0%E4%B8%AA%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/10/24/MySQL%E5%BD%B1%E5%93%8D%E6%80%A7%E8%83%BD%E7%9A%84%E5%87%A0%E4%B8%AA%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="条件字段使用了函数"><a href="#条件字段使用了函数" class="headerlink" title="条件字段使用了函数"></a>条件字段使用了函数</h2><p>MYSQL规定，使用了条件字段就不能使用索引了，因为这样会打乱索引的顺序性。</p><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>例如查询条件字段使用的是字符串，但实际上表中存储的字段用的是整型，这种情况下，MySQL实际上也使用函数对条件字段进行操作，同样会造成索引不能使用的情况。</p><h2 id="优化器偷懒"><a href="#优化器偷懒" class="headerlink" title="优化器偷懒"></a>优化器偷懒</h2><p>能够对等值表达式的右边进行计算就不要对左边进行操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#不走索引：<br><span class="hljs-keyword">where</span> id<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-operator">=</span><span class="hljs-number">1000</span><br>#走索引：<br><span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><p>MySQL并不会主动对查询语句进行这样的优化。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL删除逻辑</title>
      <link href="/2023/10/24/MySQL%E5%88%A0%E9%99%A4%E9%80%BB%E8%BE%91/"/>
      <url>/2023/10/24/MySQL%E5%88%A0%E9%99%A4%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL删除逻辑"><a href="#MySQL删除逻辑" class="headerlink" title="MySQL删除逻辑"></a>MySQL删除逻辑</h2><h3 id="Innodb-file-per-table参数"><a href="#Innodb-file-per-table参数" class="headerlink" title="Innodb_file_per_table参数"></a>Innodb_file_per_table参数</h3><p>表数据既可以存在共享表空间里，也可以是单独的文件。这个行为是由参数 innodb_file_per_table 控制的：</p><ol><li>这个参数设置为 OFF 表示的是，表的数据放在系统共享表空间，也就是跟数据字典放在一起；</li><li>这个参数设置为 ON 表示的是，每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。</li></ol><p>从 MySQL 5.6.6 版本开始，它的默认值就是 ON 了。</p><p>建议不论使用 MySQL 的哪个版本，都将这个值设置为 ON。因为，一个表单独存储为一个文件更容易管理，而且在你不需要这个表的时候，通过 drop table 命令，系统就会直接删除这个文件。而如果是放在共享表空间中，即使表删掉了，空间也是不会回收的。</p><h2 id="删除记录逻辑"><a href="#删除记录逻辑" class="headerlink" title="删除记录逻辑"></a>删除记录逻辑</h2><p>删除单个数据页上的一条数据，并不是直接将其删除，而是将这条记录标记为可复用。如果是删除整个数据页，则直接将整个数据页标记为可复用。由于标记了可复用的位置并不是一定会被新增的记录给使用的，所以经历过大量增删改查的表，可能都是存在空洞的。</p><h2 id="重建表"><a href="#重建表" class="headerlink" title="重建表"></a>重建表</h2><p>要使空间收缩，需要对表进行重建，这里先知道这个概念，以后再来看（不表+1）</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL为什么会突然“抖”一下</title>
      <link href="/2023/10/24/MySQL%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E7%AA%81%E7%84%B6%E2%80%9C%E6%8A%96%E2%80%9D%E4%B8%80%E4%B8%8B/"/>
      <url>/2023/10/24/MySQL%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E7%AA%81%E7%84%B6%E2%80%9C%E6%8A%96%E2%80%9D%E4%B8%80%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>有时候MySQL会突然运行缓慢，且随机发生，持续时间短，难以复现，像是抖了一下。</p><h2 id="为什么SQL语句突然会变慢"><a href="#为什么SQL语句突然会变慢" class="headerlink" title="为什么SQL语句突然会变慢"></a>为什么SQL语句突然会变慢</h2><p>先说脏页概念：<strong>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”</strong>。</p><p>平时执行很快的更新操作，其实就是在写内存和日志，而 MySQL 偶尔“抖”一下的那个瞬间，可能就是在刷脏页（flush）</p><p>SQL语句突然执行变慢的两种情况：</p><ol><li>InnoDB的redo log写满了，必须要将日志里的脏页写入磁盘。这种情况要尽量避免，它会阻塞所有的更新。</li><li>内存不够用了，必须先将脏页写入磁盘，这种情况其实是常态。<strong>InnoDB 用缓冲池（buffer pool）管理内存，缓冲池中的内存页有三种状态：</strong><ul><li>第一种是，还没有使用的；</li><li>第二种是，使用了并且是干净页；</li><li>第三种是，使用了并且是脏页。</li></ul></li></ol><p>InnoDB 的策略是尽量使用内存，因此对于一个长时间运行的库来说，未被使用的页面很少。</p><p>而当要读入的数据页没有在内存的时候，就必须到缓冲池中申请一个数据页。这时候只能把最久不使用的数据页从内存中淘汰掉：如果要淘汰的是一个干净页，就直接释放出来复用；但如果是脏页呢，就必须将脏页先刷到磁盘，变成干净页后才能复用。</p><p>所以，刷脏页虽然是常态，但是出现以下这两种情况，都是会明显影响性能的：</p><ol><li>一个查询要淘汰的脏页个数太多，会导致查询的响应时间明显变长；</li><li>日志写满，更新全部堵住，写性能跌为 0，这种情况对敏感业务来说，是不能接受的。</li></ol><p>所以，InnoDB 需要有控制脏页比例的机制，来尽量避免上面的这两种情况。</p><h2 id="InnoDB-刷脏页的控制策略"><a href="#InnoDB-刷脏页的控制策略" class="headerlink" title="InnoDB 刷脏页的控制策略"></a>InnoDB 刷脏页的控制策略</h2><p>需要正确的告诉InnoDB的主机io能力，正确的设置<code>innodb_io_capacity</code>参数，InnoDB才能用匹配的速度去刷脏页。还需要关注脏页比例，不要让它经常接近75%。</p><p>MySQL在刷脏页时，如果它旁边的数据页也是脏页，那么会把这个“邻居”一起刷掉，并且会继续蔓延到其他数据页。在InnoDB中，innodb_flush_neighbors参数控制这个行为，值为1则开启这个行为，为0则只刷自己。</p><p>使用机械硬盘时，这个把邻居刷掉的机制很有作用，可以减少随机IO，但是如果使用固态硬盘，建议关闭这个功能。</p><p>MySQL 8.0 中，innodb_flush_neighbors 参数的默认值已经是 0</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/2023/10/20/MySQL%E4%BA%8B%E5%8A%A1/"/>
      <url>/2023/10/20/MySQL%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="事务的隔离等级"><a href="#事务的隔离等级" class="headerlink" title="事务的隔离等级"></a>事务的隔离等级</h2><p>SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。<br>事务间的可见性由隔离级别来决定，不同的隔离等级之间的现象也不同。</p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><h2 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h2><p>InnoDB的默认隔离等级为可重复读，这里以它的实现为例。<br>在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。<br>但是回滚日志不会直接删除，它会一直保留到该事务结束。这是为了实现 MVCC 的需求。所以在开发中我们要避免使用长事务，长事务导致回滚日志过大，不但占用了磁盘空间，还占用了锁资源，影响其他事务的执行。</p><h2 id="事务的启动方式"><a href="#事务的启动方式" class="headerlink" title="事务的启动方式"></a>事务的启动方式</h2><p>很多时候业务开发并不是有意的使用长事务，而是由于事务的启动方式不当导致的。<br>事务的启动方式有以下两种：</p><ol><li>显式启动事务语句，如 begin、start transaction 等。配套的提交语句为 commit，回滚语句为 rollback。</li><li>设置set autocommit&#x3D;0,这个命令会关闭这个线程的自动提交，导致只执行select语句也会启动事务，并且不会自动提交，这个事务会持续到主动执行commit或者rollback语句，或者断开连接。</li></ol><p>许多客户端连接框架会默认在连接成功后使用set autocommit&#x3D;0这个命令，导致查询语句都在事务中，如果是长连接，会导致长事务的产生。为了避免这种情况，应该主动设置set autocommit&#x3D;1,并通过显式语句的方式启动事务。</p><h2 id="事务快照"><a href="#事务快照" class="headerlink" title="事务快照"></a>事务快照</h2><p>在可重复读的隔离等级下，InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。</p><p>事务在启动时，会创建自己的一致性读视图，用于给这个事务里的所有查询看到一致的数据行,并且给每个事务创建一个transaction id，它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</p><p>而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。</p><p>也就是说，数据表中的一行记录，其实可能有多个版本 (row)，每个版本有自己的 row trx_id。</p><p>一言概之，事务在执行查询操作时，能够看到的数据版本，就是在事务启动前，已经提交的数据行版本。事务在执行更新操作时，会去读取要修改的数据行的最新版本，完成更新后生成新的数据行版本。当然，在执行更新操作时，也会考虑的锁的获取和释放。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL锁</title>
      <link href="/2023/10/20/MySQL%E9%94%81/"/>
      <url>/2023/10/20/MySQL%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>   Flush Table With Read Lock(FTWRL), 会锁住所有表，所有线程都不能写，只能读。用于全库逻辑备份。</p><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>   表级锁有两种：一种是表锁，一种是元数据锁（meta data lock, MDL）。</p><ul><li>表锁是事务开启时就申请的，使用语法为 lock table table_name read&#x2F;write, unlock tables。 能够控制使用的是读锁还是写锁。</li><li>MDL锁是隐式提交的，不需要用户干预，MySQL会根据需要自动加锁，释放锁。且只有当事务提交后才会释放锁。<ul><li>由于MDL锁的存在，如果存在一个修改表结构的事务，在它之前有一个长事务使用了MDL锁，那么这个修改表结构的事务必须等待这个长事务提交后才能执行，且这个修改表结构的事务也会阻塞后面的事务。因此存在修改表结构的事务时，应该尽量保证事务的执行时间短，或者在修改表结构时，先把长事务都kill掉。</li></ul></li></ul><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p>   行锁是在引擎层实现的，而不是在server层实现的。因此不同的存储引擎支持的锁类型是不一样的,这也是InnoDB替代MyISAM的一个原因。</p><ul><li>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是<em>两阶段锁协议</em>。这就需要我们再执行事务时安排不同表的执行顺序，将更新频率大的表放到事务的最后，以减少锁的竞争和死锁的发生。</li></ul><h2 id="死锁和检测"><a href="#死锁和检测" class="headerlink" title="死锁和检测"></a>死锁和检测</h2><p>   当多个线程之间出现资源的循环等待时，就会发生死锁。<br>   对于死锁的处理，有两种方式：</p><ul><li>一种是超时机制，可以通过参数innodb_lock_wait_timeout来设置超时时间，当超过这个时间时，InnoDB会自动回滚一条事务，让其他事务继续执行。</li><li>一种是死锁检测，InnoDB会启动一个后台线程，专门用来检测死锁，发现死锁后，会选择一个事务进行回滚，让其他事务继续执行。<br>   InnoDB默认开启了死锁检测，但是死锁检测是有代价的，对于每个新来的被阻塞的线程，都需要扫描一遍整个事务等待队列，判断是否有死锁的发生，这个扫描过程是比较消耗性能的。因此，可以使用中间件来控制并发数，减少死锁的发生。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2023/10/18/MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2023/10/18/MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库索引常见模型"><a href="#数据库索引常见模型" class="headerlink" title="数据库索引常见模型"></a>数据库索引常见模型</h2><ol><li><p>哈希表：使用键值对存储，产生哈希冲突时，将冲突的记录放置到链表中。  </p><ul><li>优点：检索快，适合等值查询如NoSQL。插入快。  </li><li>缺点：无法进行区间查询，速度缓慢，只能全表遍历</li></ul></li><li><p>有序数组：适合静态存储  </p><ul><li>优点：区间查询和等值查询快。  </li><li>缺点：更新需要挪动后面的所有记录。</li></ul></li><li><p>二叉搜索树：使用平衡二叉树存储数据  </p><ul><li>优点：查询的时间复杂度低为O(log(N))  </li><li>缺点：实际应用中，随着树高的增大，查询到对应的叶子结点需要多次寻址，机械硬盘读取一个数据块需要10ms左右的寻址时间，数据量大的时候导致查询缓慢。</li></ul></li><li><p>N叉树：InnoDB使用的索引数据结构，N差不多是1200，树高不大，访问磁盘次数少，查询速度快。</p></li></ol><h2 id="InnoDB索引模型"><a href="#InnoDB索引模型" class="headerlink" title="InnoDB索引模型"></a>InnoDB索引模型</h2><p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p><p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p><p>聚簇索引找到对应的数据后直接返回，二级索引通过索引值找到对应的id后，需要再通过id去主键索引再寻找一次行数据，这个过程称为回表。</p><h2 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h2><p>主键索引最好使用自增的整型id，这样不会每次添加索引都是添加操作，能够更好的实现对空间和搜索时间的利用。</p><ul><li><p>不使用自增id的情况：由于新增数据时，InnoDB需要维护索引，会对id进行排序，例如新增了id&#x3D;500的数据，此时已经存在了400和700两条索引数据，这样需要对后面的索引进行逻辑上的移动，需要花费时间。如果当前数据页已经满了的情况，可能会导致产生页分裂现象，本来应该存在一个数据页的索引被分裂在不同的数据页，降低了搜索效率和空间利用率。</p></li><li><p>不使用整型id作为主键的情况：已知二级索引的叶子节点为主键，这种情况会导致叶子结点的空间占用提高。</p></li></ul><p>当只有一个索引，且这个索引必须是唯一索引，即KV场景，这个情况不需要考虑普通索引叶子结点大小的问题，可以直接将业务字段作为主键id。</p><p>如果索引出现页分裂或者希望优化存在的索引，可以使用重建索引的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#重建非主键索引</span><br>alter table T drop index k;<br>alter table T add index(k);<br><span class="hljs-comment">#重建主键索引</span><br>alter table T drop primary key;<br>alter table T add primary key(<span class="hljs-built_in">id</span>);<br></code></pre></td></tr></table></figure><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>存在一个市民表，里面的字段（身份证号、姓名）构建了一个联合索引，此时一个高频的查询语句，查询身份证获取对应的姓名时，由于这个索引已经包含了姓名，不需要再回表查询主键索引，这个特性称为覆盖索引。</p><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><p>同样的存在一个市民表，里面的字段（身份证号、姓名）构建了一个联合索引。此时如果有个查询语句，它的条件是身份证号&#x3D;“xxx”，它仍然会走这个索引，等价与对身份证号创建的单独索引。这就需要我们再创建联合索引时，需要考虑字段的顺序。</p><h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p>存在一个学生表，创建了一个（姓名，年龄）的联合索引，此时有个查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">SELET <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student WEHRE name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;张%&#x27;</span> <span class="hljs-keyword">AND</span> age <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-keyword">AND</span> isfeaml <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在查询走索引时，它会先通过联合索引，获取姓名和年龄都符合查询条件的记录，然后再得到叶子结点的id再进行回表操作获取完整的记录行。其中剔除不符合索引中记录的条件从而减少回表次数的操作，称为索引下推。</p><h2 id="唯一索引和普通索引的选择"><a href="#唯一索引和普通索引的选择" class="headerlink" title="唯一索引和普通索引的选择"></a>唯一索引和普通索引的选择</h2><p>以存在身份证字段的用户表为例，不建议将身份证号作为主键id使用，而是为身份证号创建索引。在保证不会产生重复数据的前提下，要么创建唯一索引，要么创建一个普通索引都是正确的。</p><h3 id="查询效率"><a href="#查询效率" class="headerlink" title="查询效率"></a>查询效率</h3><p>唯一索引和普通索引的查询效率区别不大</p><ul><li>唯一索引在找到符合条件的数据后直接返回结果</li><li>普通索引在找到第一条符合的记录后，会继续寻找下一条记录，直到找到不符合的记录后结束。由于InnoDB是按数据页返回数据的，可能会出现连续记录不在同一数据页的情况，但发生的概率很低，仍然可以认为这个操作成本对于现代cpu来说可忽略不计。</li></ul><h3 id="更新效率"><a href="#更新效率" class="headerlink" title="更新效率"></a>更新效率</h3><ul><li>唯一索引：唯一索引更新时需要检测所有的数据页，确保不存在重复索引字段。这个过程存在多次将数据页写入内存的操作，故效率低下。</li><li>普通索引：普通索引更新时，若要更新的数据或要插入的位置刚好在内容中，直接更新内存中的数据页即可。若不在内存中，则使用change_buffer机制，缓存要更新的内容。</li></ul><h3 id="change-buffer使用场景"><a href="#change-buffer使用场景" class="headerlink" title="change_buffer使用场景"></a>change_buffer使用场景</h3><p>change_buffer会先将更新的内容缓存到内存，当缓存空间被填满或数据库关闭前会执行<code>merge</code>操作，只有<code>merge</code>操作执行后数据才真正的写入磁盘中。</p><p>对于频繁写入的场景，change_buffer能够有限降低对磁盘的io访问次数，提高系统性能。但是对于写入后马上就要进行查询操作的场景，由于change_buffer并不会立即将更新写入磁盘，故不适合在这种场景下使用。</p><h3 id="redo-log-和-change-buffer"><a href="#redo-log-和-change-buffer" class="headerlink" title="redo_log 和 change_buffer"></a>redo_log 和 change_buffer</h3><p>redo_log和change_buffer不是同一个东西，redo_log可能会存在下面的记录：更新了page1中的第几条记录（数据页在内存中）；往change_buffer中写入的准备更新第几行的数据(数据页不在内存中)。</p><p><strong>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</strong></p><h2 id="给字符串添加索引"><a href="#给字符串添加索引" class="headerlink" title="给字符串添加索引"></a>给字符串添加索引</h2><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>前缀索引可以减少索引的空间占用，但可能会增加额外的记录扫描次数。因此，<strong>使用前缀索引时，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong>这个指标可以用区分度来表示。</p><p>使用前缀索引时无法使用覆盖索引来优化查询语句，因为MySQL不知道索引上是否包含了字段的全部信息，仍然需要回表操作。</p><h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><p>以身份证为例，当前缀索引的区分度不够好时，可以使用如下的方式为字符串加索引：</p><ol><li><p>倒序存储，存储身份证号时将其倒过来存，每次查询时这样写：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> field_list <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> id_card <span class="hljs-operator">=</span> reverse(<span class="hljs-string">&#x27;input_id_card_string&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>使用hash字段，在表上新建一个字段，用于存储身份证的校验码，并为这个字段创建索引。每次新增记录时，使用crc32()函数将结果添加到这个字段。由于不同身份证号仍然可能产生hash冲突，得到一样的hash值，每次查询时再判断一次身份证号得到的hash结果相同，且身份证号相同。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> field_list <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> id_card_crc<span class="hljs-operator">=</span>crc32(<span class="hljs-string">&#x27;input_id_card_string&#x27;</span>) <span class="hljs-keyword">and</span> id_card<span class="hljs-operator">=</span><span class="hljs-string">&#x27;input_id_card_string&#x27;</span><br></code></pre></td></tr></table></figure><p> <em>注意，只能在等值条件的右侧使用函数，左侧代表数据表的列，对其使用函数计算会使索引失效</em></p></li></ol><p>它们的区别，主要体现在以下三个方面：</p><ol><li>从占用的额外空间来看，倒序存储方式在主键索引上，不会消耗额外的存储空间，而 hash 字段方法需要增加一个字段。当然，倒序存储方式使用 4 个字节的前缀长度应该是不够的，如果再长一点，这个消耗跟额外这个 hash 字段也差不多抵消了。</li><li>在 CPU 消耗方面，倒序方式每次写和读的时候，都需要额外调用一次 reverse 函数，而 hash 字段的方式需要额外调用一次 crc32() 函数。如果只从这两个函数的计算复杂度来看的话，reverse 函数额外消耗的 CPU 资源会更小些。</li><li>从查询效率上看，使用 hash 字段方式的查询性能相对更稳定一些。因为 crc32 算出来的值虽然有冲突的概率，但是概率非常小，可以认为每次查询的平均扫描行数接近 1。而倒序存储方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb原生CRUD操作（Mongo shell）</title>
      <link href="/2023/08/08/Mongodb%E5%8E%9F%E7%94%9FCRUD%E6%93%8D%E4%BD%9C%EF%BC%88Mongo%20shell%EF%BC%89/"/>
      <url>/2023/08/08/Mongodb%E5%8E%9F%E7%94%9FCRUD%E6%93%8D%E4%BD%9C%EF%BC%88Mongo%20shell%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb原生CRUD操作（Mongo-shell）"><a href="#Mongodb原生CRUD操作（Mongo-shell）" class="headerlink" title="Mongodb原生CRUD操作（Mongo shell）"></a>Mongodb原生CRUD操作（Mongo shell）</h1><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><ul><li>插入单条数据：<a href="https://www.mongodb.com/docs/v3.6/reference/method/db.collection.insertOne/#db.collection.insertOne"><code>db.collection.insertOne()</code></a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.insertOne(<br>   &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125; &#125;<br>)<br></code></pre></td></tr></table></figure><ul><li>插入多条数据：<a href="https://www.mongodb.com/docs/v3.6/reference/method/db.collection.insertMany/#db.collection.insertMany"><code>db.collection.insertMany()</code></a></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.insertMany(<span class="hljs-punctuation">[</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> size<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> h<span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> w<span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span> uom<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mat&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">85</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;gray&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> size<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> h<span class="hljs-punctuation">:</span> <span class="hljs-number">27.9</span><span class="hljs-punctuation">,</span> w<span class="hljs-punctuation">:</span> <span class="hljs-number">35.5</span><span class="hljs-punctuation">,</span> uom<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mousepad&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;gel&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;blue&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> size<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> h<span class="hljs-punctuation">:</span> <span class="hljs-number">19</span><span class="hljs-punctuation">,</span> w<span class="hljs-punctuation">:</span> <span class="hljs-number">22.85</span><span class="hljs-punctuation">,</span> uom<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span>)<br></code></pre></td></tr></table></figure><ul><li>插入单条或多条数据：<a href="https://www.mongodb.com/docs/v3.6/reference/method/db.collection.insert/#db.collection.insert"><code>db.collection.insert()</code></a></li></ul><p>上述语句中，<code>inventory</code>是集合名，类似于mysql中的表名。执行插入操作时，若集合不存在，会自动创建该集合。</p><p>文档默认以<code>_id</code>为主键，若添加文档时没有指定则会自动创建。</p><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><h3 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">db.inventory.find( &#123;&#125; )<br></code></pre></td></tr></table></figure><p>sql类比</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> inventory<br></code></pre></td></tr></table></figure><h3 id="字段匹配"><a href="#字段匹配" class="headerlink" title="字段匹配"></a>字段匹配</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> &lt;field1&gt;<span class="hljs-punctuation">:</span> &lt;value1&gt;<span class="hljs-punctuation">,</span> ... <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>列子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D&quot;</span> <span class="hljs-punctuation">&#125;</span> )<br></code></pre></td></tr></table></figure><p>sql类比</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> inventory <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;D&quot;<br></code></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="$in"></a>$in</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> &lt;field1&gt;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> &lt;operator1&gt;<span class="hljs-punctuation">:</span> &lt;value1&gt; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> ... <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> $in<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;D&quot;</span> <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span> )<br></code></pre></td></tr></table></figure><p>sql类比：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> inventory <span class="hljs-keyword">WHERE</span> status <span class="hljs-keyword">in</span> (&quot;A&quot;, &quot;D&quot;)<br></code></pre></td></tr></table></figure><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><p>and只需要多个条件并列出现就行</p><p>例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> $lt<span class="hljs-punctuation">:</span> <span class="hljs-number">30</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span> )<br></code></pre></td></tr></table></figure><p>sql类比：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> inventory <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> &quot;A&quot; <span class="hljs-keyword">AND</span> qty <span class="hljs-operator">&lt;</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h3 id="or"><a href="#or" class="headerlink" title="$or"></a>$or</h3><p>使用<code>[]</code>包裹多个条件，使用<code>&#123;&#125;</code>包裹单个条件</p><p>例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    $or<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            status<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                $in<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;D&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;notebook&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>sql类比：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> inventory <span class="hljs-keyword">WHERE</span> status <span class="hljs-keyword">in</span> (&quot;A&quot;,&quot;D&quot;) <span class="hljs-keyword">OR</span> item <span class="hljs-operator">=</span> &quot;notebook&quot;<br></code></pre></td></tr></table></figure><h3 id="查询嵌套的文档"><a href="#查询嵌套的文档" class="headerlink" title="查询嵌套的文档"></a>查询嵌套的文档</h3><p>有一文档，在Mongo中的保存格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d05909567e4ed0a20b0139&quot;</span>)<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;red&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;h&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;w&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用<code>db.collection.find()</code>查询</p><p><strong>方式一：文档完全匹配</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    size<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        h<span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>        w<span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>        uom<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>这种方式查询嵌套的文档，查询语句中文档的字段数量和顺序必须和库中的文档一致，否则查询结果为空</p><p><strong>方式二：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;size.uom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;size.h&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">28</span><br><span class="hljs-punctuation">&#125;</span>)<br><br>db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;size.h&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $lt<span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>使用<code>&quot;operator.value&quot;</code>的方式，可以直接完成嵌套查询</p><h3 id="查询数组"><a href="#查询数组" class="headerlink" title="查询数组"></a>查询数组</h3><p>先往库中插入数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.insertMany(<span class="hljs-punctuation">[</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">21</span> <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;notebook&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">50</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">21</span> <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paper&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;plain&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">21</span> <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;planner&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">75</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-number">22.85</span><span class="hljs-punctuation">,</span> <span class="hljs-number">30</span> <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;postcard&quot;</span><span class="hljs-punctuation">,</span> qty<span class="hljs-punctuation">:</span> <span class="hljs-number">45</span><span class="hljs-punctuation">,</span> tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;blue&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15.25</span> <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span>);<br></code></pre></td></tr></table></figure><p>需要顺序和value完全匹配的查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>不需要匹配顺序，查找包含这些value的查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    tags<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $all<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;blank&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>不需要匹配顺序，包含单个value的查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    tags<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;red&quot;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>一样可以对数组进行<code>$gt</code>查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $gt<span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>多条件匹配，返回dic_cm中，存在大于15，或小于20，或既大于15又小于20的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $gt<span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span><br>        $lt<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>使用<code>$elemMatch</code>关键字，返回dic_cm中至少包含一个既大于15又小于20的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    dim_cm<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $elemMatch<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            $gt<span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span><br>$lt<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p><code>$elemMatch</code>用于多条件的匹配查询，如果数组只需要一个匹配需求，则不需要使用。以下两个查询等值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>tags<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>$elemMatch<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>$eq<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;red&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br><br>db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>tags<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;red&quot;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>根据下标查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dim_cm.1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $gt<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>根据数组size查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $size<span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="查询嵌套文档的数组"><a href="#查询嵌套文档的数组" class="headerlink" title="查询嵌套文档的数组"></a>查询嵌套文档的数组</h3><p>需要按文档顺序匹配，以下两个查询结果不同：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;instock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        warehouse<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>        qty<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br>db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;instock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        qty<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>        warehouse<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>对嵌套在文档数组中的字段指定查询条件：</p><p>返回instock数组中，至少存在一个qty小于等于20的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    &#x27;instock.qty&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $lte<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>对嵌套在文档数组中，下标为1的文档指定查询条件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    &#x27;instock<span class="hljs-number">.0</span>.qty&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $lte<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><p>同样的，嵌套文档的多条件查询应该用<code>$elementMatch</code>，不需要考虑字段的顺序，且条件应该在同一个文档中满足</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;instock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        $elemMatch<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            warehouse<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>qty<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br><br>结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d0b74d567e4ed0a20b0149&quot;</span>)<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;instock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warehouse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warehouse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>他和下面的查询不等价，下面的查询不会将条件指定在同一个文档中，而是分散在多个文档，所以会返回如下的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;instock.warehouse&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;instock.qty&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">5</span><br><span class="hljs-punctuation">&#125;</span><br>)<br>结果：<br><span class="hljs-comment">// 1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d0b74d567e4ed0a20b0149&quot;</span>)<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;instock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warehouse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warehouse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">// 2</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d0b74d567e4ed0a20b014c&quot;</span>)<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;planner&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;instock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warehouse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">40</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warehouse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="指定查询的返回字段"><a href="#指定查询的返回字段" class="headerlink" title="指定查询的返回字段"></a>指定查询的返回字段</h3><p>默认返回全部字段，<code>_id</code>默认返回。</p><p>1表示要返回的字段，0表示忽略的字段。全为1表示只返回这些字段，全为0表示忽略这些字段，返回其他字段。</p><p>返回指定字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<span class="hljs-punctuation">&#123;</span>status<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span>item<span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>status<span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span>)<br><span class="hljs-comment">//结果：</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d0625f567e4ed0a20b013f&quot;</span>)<span class="hljs-punctuation">,</span><span class="hljs-comment">//_id会默认返回</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>返回指定的字段并忽略<code>_id</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> status<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> _id<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span> <span class="hljs-punctuation">&#125;</span> )<br><span class="hljs-comment">//结果：</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>除了指定字段，返回其他所有字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> instock<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span> <span class="hljs-punctuation">&#125;</span> )<br><span class="hljs-comment">//结果：</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d0625f567e4ed0a20b013f&quot;</span>)<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;h&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;w&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>嵌套的文档，一样适用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find(<br>   <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> status<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;size.uom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span> <span class="hljs-punctuation">&#125;</span><br>)<br><span class="hljs-comment">//结果：</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d0625f567e4ed0a20b013f&quot;</span>)<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;uom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>db.inventory.find(<br>   <span class="hljs-punctuation">&#123;</span> status<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;size.uom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span> <span class="hljs-punctuation">&#125;</span><br>)<br><span class="hljs-comment">//结果：</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;64d0625f567e4ed0a20b013f&quot;</span>)<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;item&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;journal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;qty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;h&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;w&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>$slice</code>:用于选择返回数组的范围<a href="https://www.mongodb.com/docs/v3.6/reference/operator/projection/slice/#proj._S_slice">$slice (projection) — MongoDB Manual</a></p><h3 id="查询空字段或缺少的字段"><a href="#查询空字段或缺少的字段" class="headerlink" title="查询空字段或缺少的字段"></a>查询空字段或缺少的字段</h3><p>有如下两条数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.insertMany(<span class="hljs-punctuation">[</span><br>   <span class="hljs-punctuation">&#123;</span> _id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> item<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span> _id<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span>)<br></code></pre></td></tr></table></figure><p>查询item为null或item不存在的文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span> <span class="hljs-punctuation">&#125;</span> )<br></code></pre></td></tr></table></figure><p>查询item为null的文档：<a href="https://www.mongodb.com/docs/v3.6/reference/operator/query/type/#op._S_type">$type</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> item <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> $type<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span> )<br></code></pre></td></tr></table></figure><p>查询item不存在的文档（不包含null）<a href="https://www.mongodb.com/docs/v3.6/reference/operator/query/exists/#op._S_exists">$exists</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.find( <span class="hljs-punctuation">&#123;</span> item <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> $exists<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span> )<br></code></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p><a href="https://www.mongodb.com/docs/v3.6/reference/update-methods/">Update Methods — MongoDB Manual</a></p><p>更新匹配到的第一条记录：<a href="https://www.mongodb.com/docs/v3.6/reference/method/db.collection.updateOne/#db.collection.updateOne">db.collection.updateOne()</a></p><p>更新所有匹配的记录：<a href="https://www.mongodb.com/docs/v3.6/reference/method/db.collection.updateMany/#db.collection.updateMany">db.collection.updateMany()</a></p><p>替换匹配的第一条记录：<a href="https://www.mongodb.com/docs/v3.6/reference/method/db.collection.replaceOne/#db.collection.replaceOne"><code>db.collection.replaceOne()</code></a>.（除了_id都替换为新内容，如果需要更换_Id，请参照原文）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">db.inventory.updateOne(<br>   <span class="hljs-punctuation">&#123;</span> item<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paper&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//过滤记录</span><br>   <span class="hljs-punctuation">&#123;</span><br>     $set<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;size.uom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cm&quot;</span><span class="hljs-punctuation">,</span> status<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;P&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//迭代器</span><br>     $currentDate<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> lastModified<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><span class="hljs-comment">//时间迭代器</span><br>   <span class="hljs-punctuation">&#125;</span><br>)<br></code></pre></td></tr></table></figure><p>The update operation:</p><ul><li>uses the <a href="https://www.mongodb.com/docs/v3.6/reference/operator/update/set/#up._S_set"><code>$set</code></a> operator to update the value of the <code>size.uom</code> field to <code>&quot;cm&quot;</code> and the value of the <code>status</code> field to <code>&quot;P&quot;</code>,</li><li>uses the <a href="https://www.mongodb.com/docs/v3.6/reference/operator/update/currentDate/#up._S_currentDate"><code>$currentDate</code></a> operator to update the value of the <code>lastModified</code> field to the current date. If <code>lastModified</code> field does not exist, <a href="https://www.mongodb.com/docs/v3.6/reference/operator/update/currentDate/#up._S_currentDate"><code>$currentDate</code></a> will create the field. See <a href="https://www.mongodb.com/docs/v3.6/reference/operator/update/currentDate/#up._S_currentDate"><code>$currentDate</code></a> for details.</li></ul><p>更新操作具有原子性、_id不变、索引不变等特性，请参照原文：<a href="https://www.mongodb.com/docs/v3.6/tutorial/update-documents/">Update Documents</a></p><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p><a href="https://www.mongodb.com/docs/v3.6/tutorial/remove-documents/">Delete Documents — MongoDB Manual</a></p><p>匹配后直接删除就是了，没啥好讲的</p><h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><p><a href="https://www.mongodb.com/docs/v3.6/core/bulk-write-operations/">Bulk Write Operations — MongoDB Manual</a> 使用bulk一次性执行多条CRUD操作，可以选择有序或无需插入。bulk操作中，只要出现一次异常，则剩余的操作都不会执行。</p><p><a href="https://www.mongodb.com/docs/v3.6/core/retryable-writes/">Retryable Writes — MongoDB Manual</a>配置可重试的写</p><p><a href="https://www.mongodb.com/docs/v3.6/reference/sql-comparison/">SQL to MongoDB Mapping Chart — MongoDB Manual</a>SQL和MongoShell语句的对应关系</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea vim自用配置文件</title>
      <link href="/2023/04/03/ideaVim%E8%87%AA%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/03/ideaVim%E8%87%AA%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="idea-vim自用配置文件"><a href="#idea-vim自用配置文件" class="headerlink" title="idea vim自用配置文件"></a>idea vim自用配置文件</h1><p>参考了别人的配置，使用空格作为leader键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;推出insert模式</span><br><span class="hljs-string">inoremap jj &lt;Esc&gt;</span><br><span class="hljs-string">inoremap jk &lt;Esc&gt;</span><br><span class="hljs-string">inoremap kk &lt;Esc&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>页面切换<br>nnoremap tl gt<br>nnoremap th gT<br><span class="hljs-string">&quot;设置leader key</span><br><span class="hljs-string">&quot;</span><span class="hljs-built_in">let</span> mapleader = <span class="hljs-string">&#x27;\&lt;space&gt;&#x27;</span><br><span class="hljs-string">&quot;let mapleader = &#x27;,&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">let mapleader=&quot;</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">set timeoutlen=500</span><br><span class="hljs-string">&quot;</span> 防止按leader键乱移动<br>nnoremap &lt;SPACE&gt; &lt;nop&gt;<br><span class="hljs-string">&quot; 相对数字</span><br><span class="hljs-string">set number</span><br><span class="hljs-string">set relativenumber</span><br><span class="hljs-string">&quot;</span> 屏幕滚动时在光标上下方保留5行预览代码<br><span class="hljs-built_in">set</span> so=5<br><span class="hljs-string">&quot; 取消高亮</span><br><span class="hljs-string">&quot;</span> 设置寻找高亮<br><span class="hljs-built_in">set</span> hlsearch<br><span class="hljs-built_in">set</span> incsearch<br><span class="hljs-string">&quot; 设置字不超过窗口k</span><br><span class="hljs-string">set wrap</span><br><span class="hljs-string">&quot;</span> 突出水平显示<br><span class="hljs-built_in">set</span> cursorline<br><span class="hljs-string">&quot; 设置tab键和自动缩进</span><br><span class="hljs-string">&quot;</span><span class="hljs-built_in">set</span> tabstop=4<br><span class="hljs-string">&quot;set shiftwidth=4</span><br><span class="hljs-string">&quot;</span><span class="hljs-built_in">set</span> softtabstop=4<br><span class="hljs-string">&quot; 下一行和上一行的格式相同</span><br><span class="hljs-string">set autoindent</span><br><span class="hljs-string">set cindent</span><br><span class="hljs-string">&quot;</span> 设置窗口分屏方向<br><span class="hljs-built_in">set</span> splitright<br><span class="hljs-built_in">set</span> splitbelow<br><span class="hljs-string">&quot; 不区分大小写</span><br><span class="hljs-string">set ignorecase</span><br><span class="hljs-string">&quot;</span> 取消高亮<br>nnoremap &lt;leader&gt;sc :nohlsearch&lt;Cr&gt;<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;UI&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> change colorscheme<br>nnoremap &lt;leader&gt;<span class="hljs-built_in">fc</span> :action QuickChangeScheme&lt;CR&gt;<br><span class="hljs-string">&quot; 改变视图</span><br><span class="hljs-string">nnoremap &lt;leader&gt;cv :action ChangeView&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>Move<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> 取消vim s键原生映射<br>nnoremap s &lt;Nop&gt;<br>vnoremap s &lt;Nop&gt;<br><span class="hljs-string">&quot; 快速关闭buffers</span><br><span class="hljs-string">nnoremap X :q&lt;cr&gt;</span><br><span class="hljs-string">&quot;</span> 使用tab键快速切换buffers<br>nnoremap &lt;TAB&gt; gt<br>nnoremap &lt;S-TAB&gt; gT<br>vnoremap &lt;TAB&gt; gt<br>vnoremap &lt;S-TAB&gt; gT<br><span class="hljs-string">&quot; 左右移动视野</span><br><span class="hljs-string">&quot;</span>nnoremap zh 50zh<br><span class="hljs-string">&quot;nnoremap zl 50zl</span><br><span class="hljs-string">&quot;</span> 像vscode一样行移动<br><span class="hljs-string">&quot;vnoremap J :action MoveLineDown&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>vnoremap K :action MoveLineUp&lt;CR&gt;<br><span class="hljs-string">&quot; 多行缩进在visual mode</span><br><span class="hljs-string">vnoremap &gt; &gt;gv</span><br><span class="hljs-string">vnoremap &lt; &lt;gv</span><br><span class="hljs-string">&quot;</span> 复制粘贴剪贴板<br>nnoremap &lt;leader&gt;y <span class="hljs-string">&quot;+y</span><br><span class="hljs-string">nnoremap &lt;leader&gt;p &quot;</span>+p<br>nnoremap &lt;leader&gt;P <span class="hljs-string">&quot;+P</span><br><span class="hljs-string">vnoremap &lt;leader&gt;y &quot;</span>+y<br>vnoremap &lt;leader&gt;p <span class="hljs-string">&quot;+p</span><br><span class="hljs-string">vnoremap &lt;leader&gt;P &quot;</span>+p<br><span class="hljs-string">&quot; 快速复制到行尾</span><br><span class="hljs-string">vnoremap Y y$</span><br><span class="hljs-string">nnoremap Y y$</span><br><span class="hljs-string">&quot;</span> 插入模式快速移动<br>inoremap &lt;C-a&gt; &lt;Home&gt;<br>inoremap &lt;C-e&gt; &lt;End&gt;<br><span class="hljs-string">&quot; 其他模式快速移动</span><br><span class="hljs-string">nnoremap H ^</span><br><span class="hljs-string">nnoremap L $</span><br><span class="hljs-string">vnoremap H ^</span><br><span class="hljs-string">vnoremap L $</span><br><span class="hljs-string">&quot;</span> 快速进行缩进<br>nnoremap &gt; &gt;&gt;<br>nnoremap &lt; &lt;&lt;<br><span class="hljs-string">&quot; 后退功能</span><br><span class="hljs-string">&quot;</span>nnoremap &lt;leader&gt;gb :action Back&lt;CR&gt;<br><span class="hljs-string">&quot;nnoremap &lt;leader&gt;gb :action JumpToLastChange&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>Debug<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> 打上断点或取消断点<br>nnoremap &lt;leader&gt;dt :action ToggleLineBreakpoint&lt;CR&gt;<br><span class="hljs-string">&quot; 取消所有的断点</span><br><span class="hljs-string">nnoremap &lt;leader&gt;dT :action Debugger.RemoveAllBreakpointsInFile&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> debug上次运行的类<br>nnoremap &lt;leader&gt;<span class="hljs-built_in">dd</span> :action Debug&lt;CR&gt;<br><span class="hljs-string">&quot; debug当前(now)类</span><br><span class="hljs-string">nnoremap &lt;leader&gt;dc :action DebugClass&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> debug神器<br><span class="hljs-string">&quot; StepInto (F7)</span><br><span class="hljs-string">nnoremap &lt;leader&gt;di :action ForceStepInto&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> ForceStepInto(CMD + SHIFT + F7)<br>nnoremap &lt;leader&gt;dI :action ForceStepInto<br><span class="hljs-string">&quot; StepOver (F8)</span><br><span class="hljs-string">nnoremap &lt;leader&gt;do :action StepOver&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> Resume (跳到下个断点运行)<br>nnoremap &lt;leader&gt;dr :action Resume&lt;CR&gt;<br><span class="hljs-string">&quot; StepOut (SHIFT+F8)</span><br><span class="hljs-string">nnoremap &lt;leader&gt;du :action StepOut&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> debug强制运行到光标处<br>nnoremap &lt;leader&gt;dC :action ForceRunToCursor&lt;CR&gt;<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;RUN&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot; 设置运行配置 (未知)</span><br><span class="hljs-string">&quot;</span> nnoremap &lt;leader&gt;rc :action RunConfiguration&lt;CR&gt;<br><span class="hljs-string">&quot; 运行上次运行类</span><br><span class="hljs-string">nnoremap &lt;leader&gt;rr :action Run&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 运行当前(now)类<br>nnoremap &lt;leader&gt;rc :action RunClass&lt;CR&gt;<br><span class="hljs-string">&quot; 停止运行</span><br><span class="hljs-string">nnoremap &lt;leader&gt;rp :action Stop&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>重构篇<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> 抽取方法重构(不熟悉)<br><span class="hljs-string">&quot; nnoremap &lt;leader&gt;om :action ExtractMethod&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 抽取接口重构(不熟悉)<br><span class="hljs-string">&quot; nnoremap &lt;leader&gt;oi :action ExtractInterface&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>窗口篇<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> 激活run的运行窗口<br>nnoremap &lt;leader&gt;wr  :action ActivateRunToolWindow&lt;CR&gt;<br><span class="hljs-string">&quot; 隐藏窗口(windows hide)</span><br><span class="hljs-string">nnoremap &lt;leader&gt;wh :action HideActiveWindow&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 激活debug的运行窗口<br>nnoremap &lt;leader&gt;wd :action ActivateDebugToolWindow&lt;CR&gt;<br><span class="hljs-string">&quot; 窗口最大化windows max(就是保留代码编辑区[文件树什么都关掉,但是下面窗口还在])</span><br><span class="hljs-string">nnoremap &lt;leader&gt;z :action MaximizeToolWindow&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> vim窗口操作<br>nnoremap sj &lt;C-W&gt;j<br>nnoremap sk &lt;C-W&gt;k<br>nnoremap sh &lt;C-W&gt;h<br>nnoremap sl &lt;C-W&gt;l<br>nnoremap sc &lt;C-W&gt;c<br>nnoremap sv :vsplit&lt;CR&gt;<br>nnoremap sg :<span class="hljs-built_in">split</span>&lt;CR&gt;<br><span class="hljs-string">&quot;关闭到只剩当前tab栏</span><br><span class="hljs-string">nnoremap &lt;leader&gt;cc :action CloseAllEditorsButActive&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>Create<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot; 新建类</span><br><span class="hljs-string">nnoremap &lt;leader&gt;nc :action NewClass&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 新建项目<br>nnoremap &lt;leader&gt;np :action NewProject&lt;CR&gt;<br><span class="hljs-string">&quot; 新建文件 (嘻嘻,啥都可以直接用快捷键建立,一个字爽)</span><br><span class="hljs-string">nnoremap &lt;leader&gt;ne :action NewElement&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 删除当前文件 (快速删除)<br>nnoremap &lt;leader&gt;nd :action SafeDelete&lt;CR&gt;<br><span class="hljs-string">&quot; 复制文件元素</span><br><span class="hljs-string">nnoremap &lt;leader&gt;ny :action CopyElement&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 代码环绕(快速添加<span class="hljs-keyword">if</span> 或者<span class="hljs-keyword">while</span>)<br>nnoremap &lt;leader&gt;sw :action SurroundWith&lt;CR&gt;<br>vnoremap &lt;leader&gt;sw :action SurroundWith&lt;CR&gt;<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;文件和跳转&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> 重命名文件<br>nnoremap &lt;leader&gt;rn :action RenameFile&lt;CR&gt;<br><span class="hljs-string">&quot;最近改动文件间相互跳转</span><br><span class="hljs-string">nnoremap &lt;leader&gt;rf mm`m:action RecentChangedFiles&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 查找文件<br>nnoremap &lt;leader&gt;ff mm`m:action GotoFile&lt;CR&gt;<br><span class="hljs-string">&quot; 最近查看文件间相互跳转</span><br><span class="hljs-string">nnoremap &lt;leader&gt;fr mm`m:action RecentFiles&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 查找用法<br>nnoremap &lt;leader&gt;fu :action FindUsages&lt;CR&gt;<br><span class="hljs-string">&quot;跳转到声明</span><br><span class="hljs-string">nnoremap gd mm`m:action GotoDeclaration&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 打开General菜单<br>nnoremap go :action Generate&lt;CR&gt;<br><span class="hljs-string">&quot;跳转到实现类</span><br><span class="hljs-string">nnoremap gi mm`m:action GotoImplementation&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 查找类<br>nnoremap gc mm`m:action GotoClass&lt;CR&gt;<br><span class="hljs-string">&quot; 跳转SuperMethod</span><br><span class="hljs-string">nnoremap gs mm`m:action GotoSuperMethod&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 目前还不熟悉 (后面搞懂回来补充)<br>nnoremap gf mm`m:action FileStructurePopup&lt;CR&gt;<br><span class="hljs-string">&quot; 搜索 action</span><br><span class="hljs-string">nnoremap &lt;leader&gt;ga :action GotoAction&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>相当于鼠标右键<br>nnoremap &lt;leader&gt;sp :action ShowPopupMenu&lt;CR&gt;<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>LSP<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&#x27;&#x27;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot; 格式化代码</span><br><span class="hljs-string">nnoremap &lt;leader&gt;lf :action ReformatCode&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 跳转下一个错误<br>nnoremap &lt;leader&gt;lj :action GotoNextError&lt;CR&gt;<br><span class="hljs-string">&quot; 跳转上一个错误</span><br><span class="hljs-string">nnoremap &lt;leader&gt;lk :action GotoPreviousError&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 命名元素<br>nnoremap &lt;leader&gt;re :action RenameElement&lt;CR&gt;<br><span class="hljs-string">&quot; 快速显示文档</span><br><span class="hljs-string">nnoremap K  :action QuickJavaDoc&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> idea智能提示<br>nnoremap ga :action ShowIntentionActions&lt;CR&gt;<br><span class="hljs-string">&quot; 显示错误描述</span><br><span class="hljs-string">nnoremap gl :action ShowErrorDescription&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span> 弹出参数信息(打类的时候有奇效)<br>nnoremap gp :action ParameterInfo&lt;CR&gt;<br><span class="hljs-string">&quot; 弹出类型信息 (显示这个是什么类型)</span><br><span class="hljs-string">nnoremap &lt;leader&gt;st :action ExpressionTypeInfo&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>Git<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> 显示git菜单<br>nnoremap &lt;leader&gt;gm :action Git.Menu&lt;CR&gt;<br><span class="hljs-string">&quot;Idea action 配置</span><br><span class="hljs-string">&quot;</span>nnoremap &lt;Leader&gt;gi :action GotoImplementation&lt;CR&gt;<br><span class="hljs-string">&quot;实现方法</span><br><span class="hljs-string">nnoremap &lt;Leader&gt;im :action ImplementMethods&lt;CR&gt;</span><br><span class="hljs-string">nnoremap &lt;Leader&gt;rv :action IntroduceVariable&lt;CR&gt;</span><br><span class="hljs-string">nnoremap &lt;Leader&gt;cr :action CopyReference&lt;CR&gt;</span><br><span class="hljs-string">nnoremap &lt;Leader&gt;em :action ExtractMethod&lt;CR&gt;</span><br><span class="hljs-string">&quot;</span>nnoremap &lt;Leader&gt;sw :action SurroundWith&lt;CR&gt;<br>nmap &lt;leader&gt;wq :wq&lt;CR&gt;<br>nmap &lt;leader&gt;q :q&lt;CR&gt;<br><br></code></pre></td></tr></table></figure><iframe style="border-radius:12px" src="https://open.spotify.com/embed/track/2Il4l22OHAP17Xvts61GHq?utm_source=generator&theme=0" width="100%" height="152" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-窗口函数</title>
      <link href="/2023/03/21/MySQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
      <url>/2023/03/21/MySQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-窗口函数"><a href="#MySQL-窗口函数" class="headerlink" title="MySQL-窗口函数"></a>MySQL-窗口函数</h1><p>使用聚合函数处理数据得到的结果会对行数产生影响，在一些查询需求中无法满足要求；而窗口函数的的结果是分配给每一条记录的，不会对行数产生影响，故这里学习一波窗口函数的使用。</p><p>窗口函数作用于一个数据集合。窗口函数的一个概念就是当前行，当前行属于某个窗口就是从整个数据集选取一部分数据进行聚合&#x2F;排名等操作。</p><p>适合使用窗口函数的问题场景：分组后的组内排名，求分组后的组内前几名</p><h2 id="窗口函数的使用位置"><a href="#窗口函数的使用位置" class="headerlink" title="窗口函数的使用位置"></a>窗口函数的使用位置</h2><p>窗口函数原则上只能使用在select子句中，这和SQL语句的执行顺序有关，MySQL的官网这样解释：</p><p>Window functions are permitted only in the select list and <code>ORDER BY</code> clause. Query result rows are determined from the <code>FROM</code> clause, after <code>WHERE</code>, <code>GROUP BY</code>, and <code>HAVING</code> processing, and windowing execution occurs before <code>ORDER BY</code>, <code>LIMIT</code>, and <code>SELECT DISTINCT</code>.</p><p>窗口函数的执行发生在<code>WHERE</code>，<code>GROUP BY</code>，<code>HAVING</code>之后，在<code>ORDER BY</code>，<code>LIMIT</code>，<code>SELECT DISTINCT</code>之前</p><h2 id="窗口函数的语法格式"><a href="#窗口函数的语法格式" class="headerlink" title="窗口函数的语法格式"></a>窗口函数的语法格式</h2><p>基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span>窗口函数<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">over</span> (<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">&lt;</span>用于分组的列名<span class="hljs-operator">&gt;</span><br>                <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">&lt;</span>用于排序的列名<span class="hljs-operator">&gt;</span>) #若()中的内容为空，则表示不进行分组和排序，直接将结果赋给整个查询结果<br></code></pre></td></tr></table></figure><h2 id="窗口函数中的元素"><a href="#窗口函数中的元素" class="headerlink" title="窗口函数中的元素"></a><strong>窗口函数中的元素</strong></h2><p><strong>1) 函数名 window_function_name：</strong></p><p>静态窗口函数不能用frame子句；滑动窗口函数指加入order by或frame子句后，函数区域变为到当前行的数据集。</p><p><strong>静态窗口函数：</strong></p><p>排名函数 rank（）、dense_rank()、row_number()；</p><p><strong>滑动窗口函数：</strong></p><p>聚合函数 sum、 avg、percent_rank()；</p><p>取值函数 first_value()、last_value()、nth_value()、lag()、lead()、ntile() </p><table><thead><tr><th>函数名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cume_dist()</td><td>否</td><td>累计分布值。即分组值小于等于当前的行数与分组总行数的比值，取值范围为(0,1]</td></tr><tr><td>dense_rank()</td><td>否</td><td>不间断的组内排序。使用这个函数时，可以出现1,1,2,2这种形式的分组</td></tr><tr><td>firse_value()</td><td>是；first_value(expr)</td><td>返回当前分组内截至当前行的第一个值</td></tr><tr><td>lag()</td><td>是；lag(expr,[N,[default]])</td><td>从当前行开始往下移动N行,如果N缺失默认为1。若没有没有。则默认返回detault.。defaul默认值为NULL</td></tr><tr><td>last_value()</td><td>是；last_value(expr)</td><td>返回分组内截止当前行的最后一 个值。</td></tr><tr><td>lead()</td><td>是；lead(expr,[N,[default]])</td><td>从当前行开始往上移动N行。函数功能与lag()相反,其余与lag()相同。</td></tr><tr><td>nth_value</td><td>是；nth_value(expr,N)</td><td>返回分组内截止当前行的第N行。first_ value \ last_value \nth_value函数功能相似，只是返回分组内截止当前行的不同行号的数据。</td></tr><tr><td>ntile()</td><td>是；ntile(N)</td><td>返回当前行在分组内的分桶号。在计算时要先将改分组内的所有数据划分成N个桶,之后返回每个记录所在的分桶号。返回范围从1到N</td></tr><tr><td>percent_rank()</td><td>否</td><td>累计百分比。 该函数的计算结果为:小于该条记录值的所有记录的行数该分组的总行数-1.所以改记录的返回值为[0，1]</td></tr><tr><td>rank()</td><td>否</td><td>问断的组内排序。 其排序结果可能出现如下结果: 1,1,3,4,4,6</td></tr><tr><td>row_number()</td><td>否</td><td>当前行在其分组内的序号。 不管其排序结果中是否出现重复值，其排序结果都为: 1，2，3，4，5</td></tr></tbody></table><p><strong>2) 分区 partition_defintion</strong></p><p>窗口按照指定字段进行分区，分区语句为”partition by 指定字段”，只有窗口函数功能在分区内执行，并在跨越分区边界时重新初始化。如果没有指定 partition by 语句，且没有后面的frame元素限制，就把所有数据当做一整个区。</p><p><strong>3) 排序 order_definition</strong></p><p>按照指定字段进行排序，排序语句为”order by 指定字段”，窗口函数将按照排序后的排列数据。和partition by 子句配合使用，就是对分区后的数据进行排序；如果单独使用且没有后面的frame元素的限制，就是对整个区的所有数据进行排序。</p><p><strong>4) 框架 frame_definition</strong></p><p>框架frame是当前分区的一个子集，在分区里面再进一步细分窗口，子句用来定义子集的规则，通常用来作为滑动窗口使用，<strong>某些窗口函数属于静态窗口，frame子句就没有作用。</strong></p><p>frame_unit有两种，分别是ROWS和RANGE，ROWS是基于行号，RANGE是基于值的范围。</p><p>使用BETWEEN frame_start AND frame_end语法来表示行范围，frame_start和frame_end可以支持如下关键字，来确定不同的动态行记录：</p><p>CURRENT ROW 边界是当前行，一般和其他范围关键字一起使用</p><p>UNBOUNDED PRECEDING 边界是分区中的第一行</p><p>UNBOUNDED FOLLOWING 边界是分区中的最后一行</p><p>expr PRECEDING 当前行之前的expr(数字或表达式)行</p><p>expr FOLLOWING 当前行之后的expr(数字或表达式)行</p><h2 id="静态窗口函数"><a href="#静态窗口函数" class="headerlink" title="静态窗口函数"></a>静态窗口函数</h2><p>窗口函数可以使用专用窗口函数和聚合函数</p><ul><li>专用窗口函数包括<code>RANK()</code> <code> DENSE_RANK()</code> <code>ROW_NUMBER()</code> 等，括号内留空。</li><li>聚合函数，如sum. avg, count, max, min等</li></ul><p>现有表<code>sales</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">select * from sales;</span><br>+----------------+-------------+--------+<br>| sales_employee | fiscal_year | sale   |<br>+----------------+-------------+--------+<br>| Alice          |        2016 | 150.00 |<br>| Alice          |        2017 | 100.00 |<br>| Alice          |        2018 | 200.00 |<br>| Alice          |        2019 | 200.00 |<br>| Alice          |        2020 | 200.00 |<br>| Bob            |        2016 | 100.00 |<br>| Bob            |        2017 | 150.00 |<br>| Bob            |        2018 | 200.00 |<br>| John           |        2016 | 200.00 |<br>| John           |        2017 | 150.00 |<br>| John           |        2018 | 250.00 |<br>+----------------+-------------+--------+<br></code></pre></td></tr></table></figure><h3 id="1-RANK-和DENSE-RANK"><a href="#1-RANK-和DENSE-RANK" class="headerlink" title="1.RANK()和DENSE_RANK()"></a>1.RANK()和DENSE_RANK()</h3><ul><li><p>RANK()：对数据排序，并列的名次会占用下一个名次的位置；</p></li><li><p>DENSE_RANK()：对数据排序，并列的名次不会占用下一个名次的位置；</p></li></ul><p>使用一个例子来查看它们的区别：</p><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>sales_employee,<br>fiscal_year,<br>sale,<br><span class="hljs-built_in">RANK</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale <span class="hljs-keyword">DESC</span>) ranking,<br><span class="hljs-built_in">DENSE_RANK</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale <span class="hljs-keyword">DESC</span>) dense_ranking<br><span class="hljs-keyword">FROM</span> sales;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">+----------------+-------------+--------+---------+---------------+<br>| sales_employee | fiscal_year | sale   | ranking | dense_ranking |<br>+----------------+-------------+--------+---------+---------------+<br>| Alice          |        2018 | 200.00 |       1 |             1 |<br>| Alice          |        2019 | 200.00 |       1 |             1 |<br>| Alice          |        2020 | 200.00 |       1 |             1 |<br>| Alice          |        2016 | 150.00 |       4 |             2 |<br>| Alice          |        2017 | 100.00 |       5 |             3 |<br>| Bob            |        2018 | 200.00 |       1 |             1 |<br>| Bob            |        2017 | 150.00 |       2 |             2 |<br>| Bob            |        2016 | 100.00 |       3 |             3 |<br>| John           |        2018 | 250.00 |       1 |             1 |<br>| John           |        2016 | 200.00 |       2 |             2 |<br>| John           |        2017 | 150.00 |       3 |             3 |<br>+----------------+-------------+--------+---------+---------------+<br></code></pre></td></tr></table></figure><p>显而易见的发现，<code>Alice分组</code>的<code>ranking</code>列中，名次2和名次3被占用了，而<code>dense_ranking</code>列中未被占用，仍然存在名次2</p><h3 id="2-ROW-NUMBER"><a href="#2-ROW-NUMBER" class="headerlink" title="2.ROW_NUMBER()"></a>2.ROW_NUMBER()</h3><p>ROW_NUMBER()的作用就是为分组加上数字排序（表述可能不大清楚，它就是index下标</p><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>sales_employee,<br>fiscal_year,<br>sale,<br>  <span class="hljs-built_in">ROW_NUMBER</span>() <span class="hljs-keyword">OVER</span>() indexin<br><span class="hljs-keyword">FROM</span> sales;<br></code></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">+----------------+-------------+--------+---------+<br>| sales_employee | fiscal_year | sale   | indexin |<br>+----------------+-------------+--------+---------+<br>| Alice          |        2016 | 150.00 |       1 |<br>| Alice          |        2017 | 100.00 |       2 |<br>| Alice          |        2018 | 200.00 |       3 |<br>| Alice          |        2019 | 200.00 |       4 |<br>| Alice          |        2020 | 200.00 |       5 |<br>| Bob            |        2016 | 100.00 |       6 |<br>| Bob            |        2017 | 150.00 |       7 |<br>| Bob            |        2018 | 200.00 |       8 |<br>| John           |        2016 | 200.00 |       9 |<br>| John           |        2017 | 150.00 |      10 |<br>| John           |        2018 | 250.00 |      11 |<br>+----------------+-------------+--------+---------+<br></code></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="不分组不排序使用"><a href="#不分组不排序使用" class="headerlink" title="不分组不排序使用"></a>不分组不排序使用</h3><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>sales_employee,<br>fiscal_year,<br>sale,<br>  <span class="hljs-built_in">SUM</span>(sale) <span class="hljs-keyword">OVER</span>() sumResult,<br><span class="hljs-built_in">AVG</span>(sale) <span class="hljs-keyword">OVER</span>() avgResult,<br><span class="hljs-built_in">COUNT</span>(sale) <span class="hljs-keyword">OVER</span>() countResult,<br><span class="hljs-built_in">MAX</span>(sale) <span class="hljs-keyword">OVER</span>() maxResult,<br><span class="hljs-built_in">MIN</span>(sale) <span class="hljs-keyword">OVER</span>() minResult<br><span class="hljs-keyword">FROM</span> sales;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| sales_employee | fiscal_year | sale   | sumResult | avgResult  | countResult | maxResult | minResult |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| Alice          |        2016 | 150.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| Alice          |        2017 | 100.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| Alice          |        2018 | 200.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| Alice          |        2019 | 200.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| Alice          |        2020 | 200.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| Bob            |        2016 | 100.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| Bob            |        2017 | 150.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| Bob            |        2018 | 200.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| John           |        2016 | 200.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| John           |        2017 | 150.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>| John           |        2018 | 250.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br></code></pre></td></tr></table></figure><p>可以看大结果被分配给每一条记录</p><h3 id="分组使用"><a href="#分组使用" class="headerlink" title="分组使用"></a>分组使用</h3><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>sales_employee,<br>fiscal_year,<br>sale,<br>  <span class="hljs-built_in">SUM</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee) sumResult,<br><span class="hljs-built_in">AVG</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee) avgResult, <br><span class="hljs-built_in">COUNT</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee) countResult,<br><span class="hljs-built_in">MAX</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee) maxResult,<br><span class="hljs-built_in">MIN</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee) minResult<br><span class="hljs-keyword">FROM</span> sales;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| sales_employee | fiscal_year | sale   | sumResult | avgResult  | countResult | maxResult | minResult |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| Alice          |        2016 | 150.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Alice          |        2017 | 100.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Alice          |        2018 | 200.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Alice          |        2019 | 200.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Alice          |        2020 | 200.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Bob            |        2016 | 100.00 |    450.00 | 150.000000 |           3 |    200.00 |    100.00 |<br>| Bob            |        2017 | 150.00 |    450.00 | 150.000000 |           3 |    200.00 |    100.00 |<br>| Bob            |        2018 | 200.00 |    450.00 | 150.000000 |           3 |    200.00 |    100.00 |<br>| John           |        2016 | 200.00 |    600.00 | 200.000000 |           3 |    250.00 |    150.00 |<br>| John           |        2017 | 150.00 |    600.00 | 200.000000 |           3 |    250.00 |    150.00 |<br>| John           |        2018 | 250.00 |    600.00 | 200.000000 |           3 |    250.00 |    150.00 |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br></code></pre></td></tr></table></figure><p>可以看到结果按sales_employee分组了</p><h3 id="排序使用"><a href="#排序使用" class="headerlink" title="排序使用"></a>排序使用</h3><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>sales_employee,<br>fiscal_year,<br>sale,<br>  <span class="hljs-built_in">SUM</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) sumResult,<br><span class="hljs-built_in">AVG</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) avgResult, <br><span class="hljs-built_in">COUNT</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) countResult,<br><span class="hljs-built_in">MAX</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) maxResult,<br><span class="hljs-built_in">MIN</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) minResult<br><span class="hljs-keyword">FROM</span> sales;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| sales_employee | fiscal_year | sale   | sumResult | avgResult  | countResult | maxResult | minResult |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| Alice          |        2017 | 100.00 |    200.00 | 100.000000 |           2 |    100.00 |    100.00 |<br>| Bob            |        2016 | 100.00 |    200.00 | 100.000000 |           2 |    100.00 |    100.00 |<br>| Alice          |        2016 | 150.00 |    650.00 | 130.000000 |           5 |    150.00 |    100.00 |<br>| Bob            |        2017 | 150.00 |    650.00 | 130.000000 |           5 |    150.00 |    100.00 |<br>| John           |        2017 | 150.00 |    650.00 | 130.000000 |           5 |    150.00 |    100.00 |<br>| Alice          |        2018 | 200.00 |   1650.00 | 165.000000 |          10 |    200.00 |    100.00 |<br>| Alice          |        2019 | 200.00 |   1650.00 | 165.000000 |          10 |    200.00 |    100.00 |<br>| Alice          |        2020 | 200.00 |   1650.00 | 165.000000 |          10 |    200.00 |    100.00 |<br>| Bob            |        2018 | 200.00 |   1650.00 | 165.000000 |          10 |    200.00 |    100.00 |<br>| John           |        2016 | 200.00 |   1650.00 | 165.000000 |          10 |    200.00 |    100.00 |<br>| John           |        2018 | 250.00 |   1900.00 | 172.727273 |          11 |    250.00 |    100.00 |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br></code></pre></td></tr></table></figure><p>可以看到结果并不是逐条改变的，而是以多条<code>sale值相同的记录</code>为导向改变的。</p><h3 id="分组结合排序"><a href="#分组结合排序" class="headerlink" title="分组结合排序"></a>分组结合排序</h3><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>sales_employee,<br>fiscal_year,<br>sale,<br>  <span class="hljs-built_in">SUM</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) sumResult,<br><span class="hljs-built_in">AVG</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) avgResult, <br><span class="hljs-built_in">COUNT</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) countResult,<br><span class="hljs-built_in">MAX</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) maxResult,<br><span class="hljs-built_in">MIN</span>(sale) <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale) minResult<br><span class="hljs-keyword">FROM</span> sales;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| sales_employee | fiscal_year | sale   | sumResult | avgResult  | countResult | maxResult | minResult |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br>| Alice          |        2017 | 100.00 |    100.00 | 100.000000 |           1 |    100.00 |    100.00 |<br>| Alice          |        2016 | 150.00 |    250.00 | 125.000000 |           2 |    150.00 |    100.00 |<br>| Alice          |        2018 | 200.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Alice          |        2019 | 200.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Alice          |        2020 | 200.00 |    850.00 | 170.000000 |           5 |    200.00 |    100.00 |<br>| Bob            |        2016 | 100.00 |    100.00 | 100.000000 |           1 |    100.00 |    100.00 |<br>| Bob            |        2017 | 150.00 |    250.00 | 125.000000 |           2 |    150.00 |    100.00 |<br>| Bob            |        2018 | 200.00 |    450.00 | 150.000000 |           3 |    200.00 |    100.00 |<br>| John           |        2017 | 150.00 |    150.00 | 150.000000 |           1 |    150.00 |    150.00 |<br>| John           |        2016 | 200.00 |    350.00 | 175.000000 |           2 |    200.00 |    150.00 |<br>| John           |        2018 | 250.00 |    600.00 | 200.000000 |           3 |    250.00 |    150.00 |<br>+----------------+-------------+--------+-----------+------------+-------------+-----------+-----------+<br></code></pre></td></tr></table></figure><p>可以看到结果被分组了，但仍然是以多条<code>sale值相同的记录</code>为导向改变的。</p><h2 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h2><p>上述的例子，可以看到OVER()内跟着多个重复的语句，可以使用下面的写法简化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>sales_employee,<br>fiscal_year,<br>sale,<br>  <span class="hljs-built_in">SUM</span>(sale) <span class="hljs-keyword">OVER</span> w  sumResult,<br><span class="hljs-built_in">AVG</span>(sale) <span class="hljs-keyword">OVER</span> w  avgResult, <br><span class="hljs-built_in">COUNT</span>(sale) <span class="hljs-keyword">OVER</span> w countResult,<br><span class="hljs-built_in">MAX</span>(sale) <span class="hljs-keyword">OVER</span> w  maxResult,<br><span class="hljs-built_in">MIN</span>(sale) <span class="hljs-keyword">OVER</span> w  minResult<br><span class="hljs-keyword">FROM</span> sales<br><span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span>(<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sale);<br></code></pre></td></tr></table></figure><h2 id="LAG-和Lead"><a href="#LAG-和Lead" class="headerlink" title="LAG()和Lead()"></a>LAG()和Lead()</h2><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>sales_employee,<br>fiscal_year,<br>sale,<br><span class="hljs-built_in">LAG</span>(sale,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">OVER</span> w down,<br><span class="hljs-built_in">LEAD</span>(sale,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">OVER</span> w up<br><span class="hljs-keyword">FROM</span> <br>sales<br><span class="hljs-keyword">WINDOW</span> w <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> sales_employee);<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">+----------------+-------------+--------+--------+--------+<br>| sales_employee | fiscal_year | sale   | down   | up     |<br>+----------------+-------------+--------+--------+--------+<br>| Alice          |        2016 | 150.00 |   0.00 | 100.00 |<br>| Alice          |        2017 | 100.00 | 150.00 | 200.00 |<br>| Alice          |        2018 | 200.00 | 100.00 | 200.00 |<br>| Alice          |        2019 | 200.00 | 200.00 | 200.00 |<br>| Alice          |        2020 | 200.00 | 200.00 |   0.00 |<br>| Bob            |        2016 | 100.00 |   0.00 | 150.00 |<br>| Bob            |        2017 | 150.00 | 100.00 | 200.00 |<br>| Bob            |        2018 | 200.00 | 150.00 |   0.00 |<br>| John           |        2016 | 200.00 |   0.00 | 150.00 |<br>| John           |        2017 | 150.00 | 200.00 | 250.00 |<br>| John           |        2018 | 250.00 | 150.00 |   0.00 |<br>+----------------+-------------+--------+--------+--------+<br></code></pre></td></tr></table></figure><p>可以看到lag使sale列向下偏移了1行，lead使sale列向上偏移了1行</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Actions自动更新Hexo博客</title>
      <link href="/2023/03/16/%E4%BD%BF%E7%94%A8Github%20Actions%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/03/16/%E4%BD%BF%E7%94%A8Github%20Actions%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Github-Actions自动更新Hexo博客"><a href="#使用Github-Actions自动更新Hexo博客" class="headerlink" title="使用Github Actions自动更新Hexo博客"></a>使用Github Actions自动更新Hexo博客</h1><h2 id="为啥要这么做？"><a href="#为啥要这么做？" class="headerlink" title="为啥要这么做？"></a>为啥要这么做？</h2><p>众所周知，<code>github</code>提供了一个叫做<code>gitpage</code>的玩意，能够部署一个静态网站，我正是使用这个功能结合<code>hexo</code>搭建属于自己的静态博客。使用<code>hexo</code>生成文件后能够直接将博文推送到对应的<code>gitpage仓库</code>，可以说已经很方便了。</p><p>不幸的是，我使用的电脑是win10系统，在2月份经历过一次重装系统并重新配置环境变量。。。虽然并没有出现文件丢失的情况，但也让我产生了一个想法：<code>hexo</code>能不能完全依托于云端呢？虽然我已经将<code>hexo</code>博客的源文件保存到<code>github</code>了，并坚持每次发布博客后push一波源文件，但我仍然不希望那哪一天当文件损坏后再进行一遍对<code>hexo</code>的配置工作。在我高强度的网上冲浪后，我发现<code>Github Actions</code>就能够完美满足这个需求。</p><p>(<code>gitpage仓库</code>即一个静态页面的目录，并且仓库名为<code>你的用户名.github.io</code>)</p><p>参考了<a href="https://www.tangruiping.com/post/github-actions-hexo.html">《Github Actions自动部署Hexo博客》</a></p><p>和阮老师的<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p>下面介绍如何实现：</p><h2 id="必要的前置内容"><a href="#必要的前置内容" class="headerlink" title="必要的前置内容"></a>必要的前置内容</h2><p>1、首先，你需要一个配置完全正确，且能够成功推送到gitpage仓库的hexo博客源文件</p><p>2、在github上为<code>hexo源文件</code>创建了一个私有仓库（下文中的<code>私有仓库</code>均指该仓库）</p><p>3、<code>gitpag</code>e仓库能够正常接收推送</p><p>如果你还没有一个hexo的博客，请参考<a href="https://hexo.io/zh-cn/">Hexo</a></p><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh-key"></a>生成ssh-key</h2><p>确保你的git能正常工作，在shell中输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -f github-actions-key<br></code></pre></td></tr></table></figure><p>然后，你将会得到两个文件：<code>github-actions-key</code>和<code>github-actions-key.pub</code></p><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><p>1、进入你的私有仓库，点击<code>Settings</code>-&gt;<code>Security</code>-&gt;<code>Secrets and variables</code>-&gt;<code>New repository secret</code>，添加生成的私钥，即<code>github-actions-key</code>中的内容，并且将名字设置为<code>HEXO_DEPLOY_PRIVATE_KEY</code>(注意：这个名字很重要，与后面的配置文件相对应，建议直接使用这个名字)</p><p>2、点击你的头像-&gt;<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>new GPG keys</code>，添加生成的公钥，即<code>github-actions-key.pub</code>中的内容，名字可任意取。</p><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 _config.yml</h2><p>找到<code>hexo源文件</code>根目录下的<code>_config.yml</code>，确保deploy的repository项配置如以下格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">deploy:<br>  type: git<br>  repository: git@github.com:你的用户名/你的用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h2 id="创建Actions"><a href="#创建Actions" class="headerlink" title="创建Actions"></a>创建Actions</h2><p>有两种方式：</p><p>1、在<code>hexo源文件</code>的根目录下的<code>/.github/workflows</code>下创建<code>任意名字.yml</code>文件，之后推送到github</p><p>2、在私有仓库中，点击<code>Actions</code>-&gt;<code>set up a workflow yourself</code>中创建<code>.yml</code>文件</p><p>这里我使用的是第一种方式，取名为<code>deploy.yml</code></p><p><code>deploy.xml</code>的内容如下：</p><p>（请注意前文提到的<code>HEXO_DEPLOY_PRIVATE_KEY</code>，如果你前面设置的名字不是这个，请修改）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Github</span> <span class="hljs-string">Actions</span><br><br><span class="hljs-attr">on:</span><br> <span class="hljs-attr">push:</span><br>  <span class="hljs-attr">branches:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><br><span class="hljs-attr">jobs:</span><br> <span class="hljs-attr">build:</span><br>  <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>  <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">Repository</span> <span class="hljs-string">master</span> <span class="hljs-string">branch</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">10.</span><span class="hljs-string">x</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@master</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-number">16</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Dependencies</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install hexo-cli -g</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Private</span> <span class="hljs-string">Key</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="hljs-string">        mkdir -p ~/.ssh/</span><br><span class="hljs-string">        echo &quot;$HEXO_DEPLOY_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa </span><br><span class="hljs-string">        chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Git</span> <span class="hljs-string">Infomation</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        git --version</span><br><span class="hljs-string">        git config --global user.name &#x27;你的用户名&#x27; </span><br><span class="hljs-string">        git config --global user.email &#x27;你的邮箱&#x27;</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        hexo clean</span><br><span class="hljs-string">        hexo generate </span><br><span class="hljs-string">        hexo deploy</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>不出意外的话，当文件上传提交后，能够在私有仓库的<code>Actions</code>中，看到下图的左侧框框圈起来的内容。如果出错，请点击<code>workflows</code>中的报错去排查。</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-16-48-e740f052dd2305ccd5a3f74f5df92780-23-08-47-2e30d3bb87acaf543f41c5a39ce8c291-image-20230316230844565-cbc3db-b2d638.png" alt="image-20230316230844565"></p><p>当本地push或者在仓库页面对内容修改后，会触发<code>Actions</code>，自动构建内容更新到<code>gitpage</code>仓库中。</p><p>这样，就实现了脱离本地文件，在线修改博客~</p><p>当完成<code>Github Actions</code>的配置后，我能够在本地编辑博文，之后直接将私有仓库push到github，而不用再输入 <code>hexo c </code> <code>hexo g</code> <code>hexo  d</code>三个命令了。当然，最重要的是能够完全在线编辑，直接将内容放到github上就行。</p><h2 id="简单介绍一下我的博客当前是如何部署的"><a href="#简单介绍一下我的博客当前是如何部署的" class="headerlink" title="简单介绍一下我的博客当前是如何部署的"></a>简单介绍一下我的博客当前是如何部署的</h2><p>上面介绍了修改<code>hexo源文件</code>的<code>私有仓库</code>会自动更新内容到<code>gitpage</code>中，此外，我为了解决国内网络访问github比较困难的问题，又使用了腾讯云的<code>web应用托管服务</code>，它会监听我的<code>gitpage仓库</code>，当<code>gitpage仓库</code>更新后，会将其触发，大致的功能就是将<code>gitpage仓库</code>中的内容复制一份，与<code>gitpage</code>一样能够被直接访问，并且能够方便的配置域名。同时，我还使用了<code>七牛云</code>保存博客中的图片（强烈推荐<code>Tyrora</code>+<code>picgo</code>+<code>七牛云或其他图床</code>的md外链图片存储方式）。这样一来，一次对私有仓库的修改，会自动触发我部署在<code>gitpage</code>和<code>腾讯云</code>的博客内容的更新。我觉得这是当前最完美的博客部署方式了！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> hexo </tag>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot全局异常处理</title>
      <link href="/2023/03/11/Spring-Boot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2023/03/11/Spring-Boot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="89edca61e3d6131814e52c670837f748a93204432e5988d5e247195b32ffd987"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
            <tag> spring </tag>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot整合Knife4j</title>
      <link href="/2023/03/11/Spring-Boot%E6%95%B4%E5%90%88Knife4j/"/>
      <url>/2023/03/11/Spring-Boot%E6%95%B4%E5%90%88Knife4j/</url>
      
        <content type="html"><![CDATA[<h2 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1.相关依赖"></a>1.相关依赖</h2><p>使用与<code>Spring Boot</code>版本对应的依赖，这里使用的<code>Spring Boot</code>版本为<code>2.7.9</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2.配置类"></a>2.配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@EnableKnife4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knife4jConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .useDefaultResponseMessages(<span class="hljs-literal">false</span>)<br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;cn.zhn.test.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .description(<span class="hljs-string">&quot;接口测试文档&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;https://github.com&quot;</span>, <span class="hljs-string">&quot;unknow@knife.com&quot;</span>))<br>                .version(<span class="hljs-string">&quot;v1.1.0&quot;</span>)<br>                .title(<span class="hljs-string">&quot;API测试文档&quot;</span>)<br>                .build();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-application-yml配置文件"><a href="#3-application-yml配置文件" class="headerlink" title="3. application.yml配置文件"></a>3. application.yml配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#解决knife4j 启动报错</span><br><span class="hljs-string">spring：</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">pathmatch:</span><br>      <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ant_path_matcher</span><br></code></pre></td></tr></table></figure><h2 id="4-查看接口测试网页"><a href="#4-查看接口测试网页" class="headerlink" title="4.查看接口测试网页"></a>4.查看接口测试网页</h2><p><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p><h2 id="5-对应的注解"><a href="#5-对应的注解" class="headerlink" title="5.对应的注解"></a>5.对应的注解</h2><p>参考该文章：</p><p><a href="https://blog.csdn.net/qq_46126559/article/details/118487809">https://blog.csdn.net/qq_46126559/article/details/118487809</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> Knife4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot整合Redis</title>
      <link href="/2023/03/11/Spring-Boot%E6%95%B4%E5%90%88Redis/"/>
      <url>/2023/03/11/Spring-Boot%E6%95%B4%E5%90%88Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="1-pom依赖"><a href="#1-pom依赖" class="headerlink" title="1.pom依赖"></a>1.pom依赖</h2><p>使用与boot版本对应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-application-yml-配置"><a href="#2-application-yml-配置" class="headerlink" title="2. application.yml 配置"></a>2. application.yml 配置</h2><p>未设置密码，故此项为空</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br></code></pre></td></tr></table></figure><h2 id="3-Redis配置类"><a href="#3-Redis配置类" class="headerlink" title="3.Redis配置类"></a>3.Redis配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 编写自己的redisTemplate----固定模板</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisConnectionFactory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UnknownHostException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        <span class="hljs-comment">//为了开发方便，一般直接使用&lt;String,object&gt;</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-comment">//json序列化配置</span><br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">Jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        Jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-comment">//string序列化配置</span><br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br><br><br>        <span class="hljs-comment">/*配置具体的序列化方式*/</span><br>        <span class="hljs-comment">//key采用string的序列化方式</span><br>        template.setKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">//hash的key采用string的序列化方式</span><br>        template.setHashKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">//value序列化方式采用jackson</span><br>        template.setValueSerializer(Jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">//hash的value序列化方式采用jackson</span><br>        template.setHashValueSerializer(Jackson2JsonRedisSerializer);<br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Redis工具类"><a href="#4-Redis工具类" class="headerlink" title="4.Redis工具类"></a>4.Redis工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">//在真实开发中，经常使用</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br>    <span class="hljs-comment">// =============================common============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定缓存失效时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.expire(key, time, TimeUnit.SECONDS);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key 获取过期时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间(秒) 返回0代表为永久有效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断key是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 可以传一个值 或多个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String... key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span> &amp;&amp; key.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (key.length == <span class="hljs-number">1</span>) &#123;<br>                redisTemplate.delete(key[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// ============================String=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存获取</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> key == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForValue().set(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入并设置时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.opsForValue().set(key, value, time,<br>                        TimeUnit.SECONDS);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                set(key, value);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递增</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">increase</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递增因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要减少几(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">subtract</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递减因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);<br>    &#125;<br><span class="hljs-comment">// ================================Map=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashGet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey  不为空</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey  不为空</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">hashGetValue</span><span class="hljs-params">(String redisKey, String hashKey)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(redisKey, hashKey);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取hashKey对应的所有键值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title function_">hashGetAllKeyAndValue</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 对应多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hashSetValue</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet 并设置时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map  对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hashSetValue</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hashSetValue</span><span class="hljs-params">(String redisKey, String hashKey, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(redisKey, hashKey, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hashSetValue</span><span class="hljs-params">(String redisKey, String hashKey, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(redisKey, hashKey, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(redisKey, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除hash表中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey 项 可以使多个 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hashDeleteValue</span><span class="hljs-params">(String redisKey, Object... hashKey)</span> &#123;<br>        redisTemplate.opsForHash().delete(redisKey, hashKey);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断hash表中是否有该项的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hashExistKey</span><span class="hljs-params">(String redisKey, String hashKey)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(redisKey, hashKey);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hashIncreaseValue</span><span class="hljs-params">(String redisKey, String hashKey, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(redisKey, hashKey, by);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisKey  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要减少记(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hashSubstractValueByKey</span><span class="hljs-params">(String redisKey, String hashKey, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(redisKey, hashKey, -by);<br>    &#125;<br><span class="hljs-comment">// ============================set=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取Set中的所有值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">setGetAllValue</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据value从一个set中查询,是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setHasValue</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据放入set缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">setPutValue</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, values);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将set数据放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time   时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">setPutValue</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().add(key, values);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取set缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">setGetSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除值为value的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">setRemoveValue</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().remove(key, values);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// ===============================list=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start 开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end   结束 0 到 -1代表所有值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">listGet</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> start, <span class="hljs-type">long</span> end)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">listGetSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过索引 获取list中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0</span><br><span class="hljs-comment">     *              时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">listGetByIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">listSet</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">listSet</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">listSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">listSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引修改list中的某条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">listUpdateIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().set(key, index, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除N个值为value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 移除多少个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">listRemove</span> <span class="hljs-params">(String key,<span class="hljs-type">long</span> count, Object value)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> redisTemplate.opsForList().remove(key, count,value);<br>            <span class="hljs-keyword">return</span> remove;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Validation 创建自定义校验注解</title>
      <link href="/2023/03/11/Spring-Validation-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/03/11/Spring-Validation-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在Web开发过程中，避免不了要使用DO VO DTO来区分数据，或是用于传参或是用于封装为返回值给前端，使用对象转换工具可以是通过反射功能创建的工具类，但反射会影响性能，MapStruct则是通过自动编译出包含setter的具体实现类，达到和手工进行set一样的效果。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>这里使用到的是spring boot项目，需要两个必要的依赖；同时，为了实现对象的字符串转对象功能，引入了fastjson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象转换--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于使用lombok可能会遇到无法set的情况,添加如下依赖：（暂时没遇到）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="对象转换功能实现"><a href="#对象转换功能实现" class="headerlink" title="对象转换功能实现"></a>对象转换功能实现</h2><h3 id="需要转换的各个类："><a href="#需要转换的各个类：" class="headerlink" title="需要转换的各个类："></a>需要转换的各个类：</h3><p>Chives类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chives</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">// 密码</span><br>    <span class="hljs-keyword">private</span> Integer sex;  <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">private</span> LocalDate birthday; <span class="hljs-comment">// 生日</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime; <span class="hljs-comment">// 创建时间</span><br>    <span class="hljs-keyword">private</span> String config; <span class="hljs-comment">// 其他扩展信息，以JSON格式存储</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ChivesVo类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesVo</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer gender;<br>    <span class="hljs-keyword">private</span> LocalDate birthday;<br>    <span class="hljs-keyword">private</span> String createTime;<br>    <span class="hljs-keyword">private</span> List&lt;ChivesConfig&gt; config;<br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesConfig</span> &#123;<br>        <span class="hljs-keyword">private</span> String field1;<br>        <span class="hljs-keyword">private</span> Integer field2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ChivesQueryVo类：（为了验证mapstruct能否在一个文件中定义多个类型转换，测试为可以）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesQueryVo</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">// 密码</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用于验证多个对象转一个对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String street;<br>    <span class="hljs-keyword">private</span> Integer zipCode;<br>    <span class="hljs-keyword">private</span> Integer houseNo;<br>    <span class="hljs-keyword">private</span> String description;<br><br>&#125;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesWithAddressVo</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String street;<br>    <span class="hljs-keyword">private</span> Integer postCode;<br>    <span class="hljs-keyword">private</span> Integer houseNo;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MapStruct转换功能实现接口："><a href="#MapStruct转换功能实现接口：" class="headerlink" title="MapStruct转换功能实现接口："></a>MapStruct转换功能实现接口：</h3><p>使用<code>@Mapper(componentModel = &quot;spring&quot;)</code>注解，将转换器存入Spring IOC容器中</p><p>对于需要映射，忽略，指定类型的字段，需要加上<code>@Mapping</code>注解</p><p>默认的数据类型之间能够自动识别并转换，对于自定义的数据类型，需要添加一对入参和返回值对应的方法，用于数据类型之间的转换</p><p>对于多个对象转换为一个对象的需求有以下几点要求：</p><ul><li>当多个对象中， 有其中一个为 null， 则会直接返回 null</li><li>如一对一转换一样， 属性通过名字来自动匹配。 因此， 名称和类型相同的不需要进行特殊处理</li><li>当多个原对象中，<strong>有相同名字的属性时，需要通过 @Mapping 注解来具体的指定</strong>， 以免出现歧义（不指定会报错）。 如上面的 description</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;<br><span class="hljs-keyword">import</span> org.mapstruct.Mapper;<br><span class="hljs-keyword">import</span> org.mapstruct.Mapping;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper(componentModel = &quot;spring&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ChivesConverter</span> &#123;<br>    <span class="hljs-meta">@Mapping(source = &quot;sex&quot;,target = &quot;gender&quot;)</span><span class="hljs-comment">//由于两个类的字段名不同，需要手动指定</span><br>    <span class="hljs-meta">@Mapping(target = &quot;createTime&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><span class="hljs-comment">//用于指定转换的日期格式</span><br>    ChivesVo <span class="hljs-title function_">do2vo</span><span class="hljs-params">(Chives chives)</span>;<br><br>    <span class="hljs-meta">@Mapping(target = &quot;sex&quot; ,source = &quot;gender&quot;)</span><br>    <span class="hljs-meta">@Mapping(target = &quot;password&quot;,ignore = true)</span><span class="hljs-comment">//转换后不显示密码</span><br>    <span class="hljs-meta">@Mapping(target = &quot;createTime&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    Chives <span class="hljs-title function_">vo2do</span><span class="hljs-params">(ChivesVo chivesVo)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *能够在一个文件中定义多个类之间的转换</span><br><span class="hljs-comment">     */</span><br>    Chives <span class="hljs-title function_">queryVO2DO</span><span class="hljs-params">(ChivesQueryVo chivesQueryVo)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多个对象构成一个对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Mapping(target = &quot;postCode&quot;,source = &quot;address.zipCode&quot;)</span><br>    ChivesWithAddressVo <span class="hljs-title function_">chivesAndAddress</span><span class="hljs-params">(Chives chives,Address address)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * List转换，查看编译生成的实现类得知，调用的是上面的单个转换方法，故不再添加注解</span><br><span class="hljs-comment">     */</span><br>    List&lt;ChivesVo&gt; <span class="hljs-title function_">listDo2Vo</span><span class="hljs-params">(List&lt;Chives&gt; list)</span>;<br>    List&lt;Chives&gt; <span class="hljs-title function_">listVo2Do</span><span class="hljs-params">(List&lt;ChivesVo&gt; list)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对于默认的类型，mapstruct能够自动转换，对于自定义的类型，需要手动创建转换器（入参和返回值的类型能够匹配就行）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">default</span> List&lt;ChivesVo.ChivesConfig&gt; strConfigToListChivesConfig(String config) &#123;<br>       <span class="hljs-keyword">return</span> JSON.parseArray(config,ChivesVo.ChivesConfig.class);<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> String <span class="hljs-title function_">listChivesConfigToStrConfig</span><span class="hljs-params">(List&lt;ChivesVo.ChivesConfig&gt; list)</span> &#123;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(list);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动生成的源文件："><a href="#自动生成的源文件：" class="headerlink" title="自动生成的源文件："></a>自动生成的源文件：</h3><p>可以看到，<code>ChivesConverter</code>中每一个定义的方法都被自动生成，且都是set的方式，和手工set的方式一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Generated(</span><br><span class="hljs-meta">    value = &quot;org.mapstruct.ap.MappingProcessor&quot;,</span><br><span class="hljs-meta">    date = &quot;2023-03-09T16:08:19+0800&quot;,</span><br><span class="hljs-meta">    comments = &quot;version: 1.5.3.Final, compiler: javac, environment: Java 11.0.17 (Oracle Corporation)&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesConverterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChivesConverter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter_yyyy_MM_dd_HH_mm_ss_11333195168</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern( <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> );<br><br>    <span class="hljs-meta">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ChivesVo <span class="hljs-title function_">do2vo</span><span class="hljs-params">(Chives chives)</span> &#123;<br>        <span class="hljs-keyword">if</span> ( chives == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">ChivesVo</span> <span class="hljs-variable">chivesVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChivesVo</span>();<br><br>        chivesVo.setGender( chives.getSex() );<br>        <span class="hljs-keyword">if</span> ( chives.getCreateTime() != <span class="hljs-literal">null</span> ) &#123;<br>            chivesVo.setCreateTime( dateTimeFormatter_yyyy_MM_dd_HH_mm_ss_11333195168.format( chives.getCreateTime() ) );<br>        &#125;<br>        chivesVo.setId( chives.getId() );<br>        chivesVo.setUsername( chives.getUsername() );<br>        chivesVo.setPassword( chives.getPassword() );<br>        chivesVo.setBirthday( chives.getBirthday() );<br>        chivesVo.setConfig( strConfigToListChivesConfig( chives.getConfig() ) );<br><br>        <span class="hljs-keyword">return</span> chivesVo;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Chives <span class="hljs-title function_">vo2do</span><span class="hljs-params">(ChivesVo chivesVo)</span> &#123;<br>        <span class="hljs-keyword">if</span> ( chivesVo == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">chives</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chives</span>();<br><br>        chives.setSex( chivesVo.getGender() );<br>        <span class="hljs-keyword">if</span> ( chivesVo.getCreateTime() != <span class="hljs-literal">null</span> ) &#123;<br>            chives.setCreateTime( LocalDateTime.parse( chivesVo.getCreateTime(), dateTimeFormatter_yyyy_MM_dd_HH_mm_ss_11333195168 ) );<br>        &#125;<br>        chives.setId( chivesVo.getId() );<br>        chives.setUsername( chivesVo.getUsername() );<br>        chives.setBirthday( chivesVo.getBirthday() );<br>        chives.setConfig( listChivesConfigToStrConfig( chivesVo.getConfig() ) );<br><br>        <span class="hljs-keyword">return</span> chives;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;ChivesVo&gt; <span class="hljs-title function_">listDo2Vo</span><span class="hljs-params">(List&lt;Chives&gt; list)</span> &#123;<br>        <span class="hljs-keyword">if</span> ( list == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        List&lt;ChivesVo&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ChivesVo&gt;( list.size() );<br>        <span class="hljs-keyword">for</span> ( Chives chives : list ) &#123;<br>            list1.add( do2vo( chives ) );<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>   <span class="hljs-comment">// more.........................</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>可以看到结果符合预期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConvertTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ChivesConverter chivesConverter;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试字段名存在不同，且存在自定义数据类型的类之间的转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestChivesConvert1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">jiucai1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chives</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;jiucai1&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">1</span>, LocalDate.now(), LocalDateTime.now(), <span class="hljs-string">&quot;[&#123;\&quot;field1\&quot;:\&quot;Test Field1\&quot;,\&quot;field2\&quot;:500&#125;]&quot;</span>);<br>        System.out.println(jiucai1);<br>        <span class="hljs-type">ChivesVo</span> <span class="hljs-variable">chivesVo</span> <span class="hljs-operator">=</span> chivesConverter.do2vo(jiucai1);<br>        System.out.println(chivesVo);<br>        <span class="hljs-comment">//输出结果：</span><br>        <span class="hljs-comment">//Chives(id=1, username=jiucai1, password=123456, sex=1, birthday=2023-03-09, createTime=2023-03-09T16:42:32.841087700, config=[&#123;&quot;field1&quot;:&quot;Test Field1&quot;,&quot;field2&quot;:500&#125;])</span><br>        <span class="hljs-comment">//ChivesVo(id=1, username=jiucai1, password=123456, gender=1, birthday=2023-03-09, createTime=2023-03-09 16:42:32, config=[ChivesVo.ChivesConfig(field1=Test Field1, field2=500)])</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 仅为了验证可以在一个文件中定义多个类的转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">QueryVOConvertTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ChivesQueryVo</span> <span class="hljs-variable">zzz</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChivesQueryVo</span>(<span class="hljs-string">&quot;zzz&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span>);<br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">chives</span> <span class="hljs-operator">=</span> chivesConverter.queryVO2DO(zzz);<br>        System.out.println(chives);<br>        <span class="hljs-comment">//输出结果：</span><br>        <span class="hljs-comment">//Chives(id=null, username=zzz, password=1111, sex=null, birthday=null, createTime=null, config=null)</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试多个对象转换为一个对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test2to1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">jiucai1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chives</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;jiucai1&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">1</span>, LocalDate.now(), LocalDateTime.now(), <span class="hljs-string">&quot;[&#123;\&quot;field1\&quot;:\&quot;Test Field1\&quot;,\&quot;field2\&quot;:500&#125;]&quot;</span>);<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(<span class="hljs-string">&quot;changan&quot;</span>, <span class="hljs-number">114514</span>, <span class="hljs-number">114</span>, <span class="hljs-string">&quot;henhenhen&quot;</span>);<br>        <span class="hljs-type">ChivesWithAddressVo</span> <span class="hljs-variable">chivesVo</span> <span class="hljs-operator">=</span> chivesConverter.chivesAndAddress(jiucai1, address);<br>        System.out.println(chivesVo);<br>        <span class="hljs-comment">//输出结果：</span><br>        <span class="hljs-comment">//ChivesWithAddressVo(id=1, username=jiucai1, street=changan, postCode=114514, houseNo=114)</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://pdai.tech/md/develop/package/dev-package-x-mapstruct.html">https://pdai.tech/md/develop/package/dev-package-x-mapstruct.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> Spring Validation </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 中使用AOP</title>
      <link href="/2023/03/11/Spring-%E4%B8%AD%E4%BD%BF%E7%94%A8AOP/"/>
      <url>/2023/03/11/Spring-%E4%B8%AD%E4%BD%BF%E7%94%A8AOP/</url>
      
        <content type="html"><![CDATA[<p>AOP可以在修改原有的代码的前提下，增加代码的功能，做到无侵入的添加，是Spring的核心功能之一。</p><p>参考文章：<a href="https://pdai.tech/md/spring/spring-x-framework-aop.html%EF%BC%8C%E6%91%98%E5%BD%95%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%8C%E7%BB%93%E5%90%88%E8%87%AA%E5%B7%B1%E7%9A%84%E7%90%86%E8%A7%A3%E5%88%9B%E5%BB%BA%E4%BE%8B%E5%AD%90%E3%80%82">https://pdai.tech/md/spring/spring-x-framework-aop.html，摘录重要知识点，结合自己的理解创建例子。</a></p><h2 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h2><p><strong>连接点（Jointpoint）</strong>：表示需要在程序中插入横切关注点的扩展点，<strong>连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等</strong>，Spring只支持方法执行连接点，在AOP中表示为<strong>在哪里干</strong>；</p><p><strong>切入点（Pointcut）</strong>： 选择一组相关连接点的模式，即可以认为连接点的集合，Spring支持perl5正则表达式和AspectJ切入点模式，Spring默认使用AspectJ语法，在AOP中表示为<strong>在哪里干的集合</strong>；</p><p><strong>通知（Advice）</strong>：在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置通知（before advice）、后置通知(after advice)、环绕通知（around advice），在Spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入通知；在AOP中表示为<strong>干什么</strong>；</p><p><strong>方面&#x2F;切面（Aspect）</strong>：横切关注点的模块化，比如上边提到的日志组件。可以认为是通知、引入和切入点的组合；在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为<strong>在哪干和干什么集合</strong>；</p><p><strong>引入（inter-type declaration）</strong>：也称为内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口（必须对应一个实现）到所有被代理对象（目标对象）, 在AOP中表示为<strong>干什么（引入什么）</strong>；</p><p><strong>目标对象（Target Object）</strong>：需要被织入横切关注点的对象，即该对象是切入点选择的对象，需要被通知的对象，从而也可称为被通知对象；由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为<strong>对谁干</strong>；</p><p><strong>织入（Weaving）</strong>：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。在AOP中表示为<strong>怎么实现的</strong>；</p><p><strong>AOP代理（AOP Proxy）</strong>：AOP框架使用代理模式创建的对象，从而实现在连接点处插入通知（即应用切面），就是通过代理来对目标对象应用切面。在Spring中，AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。在AOP中表示为<strong>怎么实现的一种典型方式</strong>；</p><h2 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h2><p><strong>前置通知（Before advice）</strong>：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</p><p><strong>后置通知（After returning advice）</strong>：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。</p><p><strong>异常通知（After throwing advice）</strong>：在方法抛出异常退出时执行的通知。</p><p><strong>最终通知（After (finally) advice）</strong>：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</p><p><strong>环绕通知（Around Advice）</strong>：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</p><h2 id="AOP相关依赖"><a href="#AOP相关依赖" class="headerlink" title="AOP相关依赖"></a>AOP相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AOP相关--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="AspectJ注解方式配置AOP"><a href="#AspectJ注解方式配置AOP" class="headerlink" title="AspectJ注解方式配置AOP"></a>AspectJ注解方式配置AOP</h2><p>基于XML的声明式AspectJ存在一些不足，需要在Spring配置文件配置大量的代码信息，为了解决这个问题，Spring 使用了@AspectJ框架为AOP的实现提供了一套注解。</p><table><thead><tr><th align="left">注解名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">@Aspect</td><td align="left">用来定义一个切面。</td></tr><tr><td align="left">@pointcut</td><td align="left">用于定义切入点表达式。在使用时还需要定义一个包含名字和任意参数的方法签名来表示切入点名称，这个方法签名就是一个返回值为void，且方法体为空的普通方法。</td></tr><tr><td align="left">@Before</td><td align="left">用于定义前置通知，相当于BeforeAdvice。在使用时，通常需要指定一个value属性值，该属性值用于指定一个切入点表达式(可以是已有的切入点，也可以直接定义切入点表达式)。</td></tr><tr><td align="left">@AfterReturning</td><td align="left">用于定义后置通知，相当于AfterReturningAdvice。在使用时可以指定pointcut &#x2F; value和returning属性，其中pointcut &#x2F; value这两个属性的作用一样，都用于指定切入点表达式。</td></tr><tr><td align="left">@Around</td><td align="left">用于定义环绕通知，相当于MethodInterceptor。在使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。</td></tr><tr><td align="left">@After-Throwing</td><td align="left">用于定义异常通知来处理程序中未处理的异常，相当于ThrowAdvice。在使用时可指定pointcut &#x2F; value和throwing属性。其中pointcut&#x2F;value用于指定切入点表达式，而throwing属性值用于指定-一个形参名来表示Advice方法中可定义与此同名的形参，该形参可用于访问目标方法抛出的异常。</td></tr><tr><td align="left">@After</td><td align="left">用于定义最终final 通知，不管是否异常，该通知都会执行。使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。</td></tr><tr><td align="left">@DeclareParents</td><td align="left">用于定义引介通知，相当于IntroductionInterceptor (不要求掌握)。</td></tr></tbody></table><h2 id="切入点（pointcut）的申明规则"><a href="#切入点（pointcut）的申明规则" class="headerlink" title="切入点（pointcut）的申明规则"></a>切入点（pointcut）的申明规则</h2><p>Spring AOP 用户可能会经常使用 execution切入点指示符。执行表达式的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution（modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern（param-pattern） <span class="hljs-keyword">throws</span>-pattern?）<br></code></pre></td></tr></table></figure><ul><li>ret-type-pattern 返回类型模式, name-pattern名字模式和param-pattern参数模式是必选的， 其它部分都是可选的。返回类型模式决定了方法的返回类型必须依次匹配一个连接点。 你会使用的最频繁的返回类型模式是<code>*</code>，<strong>它代表了匹配任意的返回类型</strong>。</li><li>declaring-type-pattern, 一个全限定的类型名将只会匹配返回给定类型的方法。</li><li>name-pattern 名字模式匹配的是方法名。 你可以使用<code>*</code>通配符作为所有或者部分命名模式。</li><li>param-pattern 参数模式稍微有点复杂：()匹配了一个不接受任何参数的方法， 而(…)匹配了一个接受任意数量参数的方法（零或者更多）。 模式(<em>)匹配了一个接受一个任何类型的参数的方法。 模式(</em>,String)匹配了一个接受两个参数的方法，第一个可以是任意类型， 第二个则必须是String类型。</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-09-47-e4ac46fa0091ceea0513995023674c7d-15-44-31-5f54d5f61a3e31d92af6808386a740da-spring-framework-aop-7-54ac1e-6dd89d.png" alt="必要的规则字段"></p><h2 id="实例1：增强cn-zz-test-controller包下的所有类的所有方法，打印日志"><a href="#实例1：增强cn-zz-test-controller包下的所有类的所有方法，打印日志" class="headerlink" title="实例1：增强cn.zz.test.controller包下的所有类的所有方法，打印日志"></a>实例1：增强cn.zz.test.controller包下的所有类的所有方法，打印日志</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerAspect</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* cn.zz.test.controller.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCutMethod</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义环绕通知</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pjp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;pointCutMethod()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doAround</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> requestAttributes.getRequest().getRequestURI();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> pjp.getSignature().toShortString();<br>        log.info(name+<span class="hljs-string">&quot;开始,请求地址为：&quot;</span>+requestURI);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> pjp.proceed();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> endTime - beginTime;<br>        log.info(name+<span class="hljs-string">&quot;结束,耗时&quot;</span>+time+<span class="hljs-string">&quot;ms&quot;</span>);<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>controller被调用后的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">2023-03-08 11:35:37.979  INFO 1404 --- [nio-8080-exec-1] cn.zhn.test.aspect.ControllerAspect      : PersonController.getById(..)开始,请求地址为：/person/200<br>2023-03-08 11:35:38.215  INFO 1404 --- [nio-8080-exec-1] cn.zhn.test.aspect.ControllerAspect      : PersonController.getById(..)结束,耗时233ms<br></code></pre></td></tr></table></figure><h2 id="实例2：修改方法的传入参数，模拟加密功能"><a href="#实例2：修改方法的传入参数，模拟加密功能" class="headerlink" title="实例2：修改方法的传入参数，模拟加密功能"></a>实例2：修改方法的传入参数，模拟加密功能</h2><p>使用AOP能够在不修改原有代码的情况下对参数进行修改</p><ol><li>注解类：<code>@Target</code>和<code>@Retention</code>注解必不可少</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Encode &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>切面类:<code>@EnableAspectJAutoProxy</code> <code>@Aspect</code> <code>@Component</code> 三个注解必不可少</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPasswordEncodeAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(cn.zhn.test.validate.Encode)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCutMethod</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Around(&quot;pointCutMethod()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doAround</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//获取参数列表</span><br>        Object[] args = pjp.getArgs();<br>        <span class="hljs-comment">//已知需要增强的方法只有一个参数，且参数类型为User</span><br>        <span class="hljs-keyword">if</span>(args[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span>  User)&#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) args[<span class="hljs-number">0</span>];<br>            <span class="hljs-comment">//模拟加密过程</span><br>            user.setPassword(user.getPassword()+<span class="hljs-string">&quot;encode&quot;</span>);<br>            args[<span class="hljs-number">0</span>]=user;<br>        &#125;<br>        <span class="hljs-comment">//这一步至关重要，proceed()方法会完成整个完整的方法调用过程，记得传入修改好的参数</span><br>        <span class="hljs-keyword">return</span> pjp.proceed(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取到参数列表后，再对参数列表修改，若要修改后的参数生效，要在proce()方法中传入修改后的参数值。</p><p>具体效果：<code>user</code>在添加到数据库前，会修改其<code>password</code>的值。</p><h2 id="实例3：修改方法的返回值，模拟解密功能"><a href="#实例3：修改方法的返回值，模拟解密功能" class="headerlink" title="实例3：修改方法的返回值，模拟解密功能"></a>实例3：修改方法的返回值，模拟解密功能</h2><ol><li>注解类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Decode &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>切面类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPasswordDecodeAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(cn.zhn.test.validate.Decode)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCutMethod</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Around(&quot;pointCutMethod()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doAround</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//已知方法的返回值为User对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) pjp.proceed();<br>        user.setPassword(<span class="hljs-string">&quot;decode&quot;</span>);<br>        <span class="hljs-comment">//将结果返回给方法</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在相应的serverImpl类上加上注释</p><p>查询得到的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;200&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;资源请求成功&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ha&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nickname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;decode&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1934@nuknow.com&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到<code>password</code>项被替换为了<code>decode</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象转换工具-mapstruct</title>
      <link href="/2023/03/11/%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7-mapstruct/"/>
      <url>/2023/03/11/%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7-mapstruct/</url>
      
        <content type="html"><![CDATA[<p>在Web开发过程中，避免不了要使用DO VO DTO来区分数据，或是用于传参或是用于封装为返回值给前端，使用对象转换工具可以是通过反射功能创建的工具类，但反射会影响性能，MapStruct则是通过自动编译出包含setter的具体实现类，达到和手工进行set一样的效果。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>这里使用到的是spring boot项目，需要两个必要的依赖；同时，为了实现对象的字符串转对象功能，引入了fastjson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象转换--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于使用lombok可能会遇到无法set的情况,添加如下依赖：（暂时没遇到）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok-mapstruct-binding<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="对象转换功能实现"><a href="#对象转换功能实现" class="headerlink" title="对象转换功能实现"></a>对象转换功能实现</h2><h3 id="需要转换的各个类："><a href="#需要转换的各个类：" class="headerlink" title="需要转换的各个类："></a>需要转换的各个类：</h3><p>Chives类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chives</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">// 密码</span><br>    <span class="hljs-keyword">private</span> Integer sex;  <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">private</span> LocalDate birthday; <span class="hljs-comment">// 生日</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime; <span class="hljs-comment">// 创建时间</span><br>    <span class="hljs-keyword">private</span> String config; <span class="hljs-comment">// 其他扩展信息，以JSON格式存储</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ChivesVo类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesVo</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer gender;<br>    <span class="hljs-keyword">private</span> LocalDate birthday;<br>    <span class="hljs-keyword">private</span> String createTime;<br>    <span class="hljs-keyword">private</span> List&lt;ChivesConfig&gt; config;<br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesConfig</span> &#123;<br>        <span class="hljs-keyword">private</span> String field1;<br>        <span class="hljs-keyword">private</span> Integer field2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ChivesQueryVo类：（为了验证mapstruct能否在一个文件中定义多个类型转换，测试为可以）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesQueryVo</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">// 密码</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用于验证多个对象转一个对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String street;<br>    <span class="hljs-keyword">private</span> Integer zipCode;<br>    <span class="hljs-keyword">private</span> Integer houseNo;<br>    <span class="hljs-keyword">private</span> String description;<br><br>&#125;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesWithAddressVo</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String street;<br>    <span class="hljs-keyword">private</span> Integer postCode;<br>    <span class="hljs-keyword">private</span> Integer houseNo;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MapStruct转换功能实现接口："><a href="#MapStruct转换功能实现接口：" class="headerlink" title="MapStruct转换功能实现接口："></a>MapStruct转换功能实现接口：</h3><p>使用<code>@Mapper(componentModel = &quot;spring&quot;)</code>注解，将转换器存入Spring IOC容器中</p><p>对于需要映射，忽略，指定类型的字段，需要加上<code>@Mapping</code>注解</p><p>默认的数据类型之间能够自动识别并转换，对于自定义的数据类型，需要添加一对入参和返回值对应的方法，用于数据类型之间的转换</p><p>对于多个对象转换为一个对象的需求有以下几点要求：</p><ul><li>当多个对象中， 有其中一个为 null， 则会直接返回 null</li><li>如一对一转换一样， 属性通过名字来自动匹配。 因此， 名称和类型相同的不需要进行特殊处理</li><li>当多个原对象中，<strong>有相同名字的属性时，需要通过 @Mapping 注解来具体的指定</strong>， 以免出现歧义（不指定会报错）。 如上面的 description</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;<br><span class="hljs-keyword">import</span> org.mapstruct.Mapper;<br><span class="hljs-keyword">import</span> org.mapstruct.Mapping;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper(componentModel = &quot;spring&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ChivesConverter</span> &#123;<br>    <span class="hljs-meta">@Mapping(source = &quot;sex&quot;,target = &quot;gender&quot;)</span><span class="hljs-comment">//由于两个类的字段名不同，需要手动指定</span><br>    <span class="hljs-meta">@Mapping(target = &quot;createTime&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><span class="hljs-comment">//用于指定转换的日期格式</span><br>    ChivesVo <span class="hljs-title function_">do2vo</span><span class="hljs-params">(Chives chives)</span>;<br><br>    <span class="hljs-meta">@Mapping(target = &quot;sex&quot; ,source = &quot;gender&quot;)</span><br>    <span class="hljs-meta">@Mapping(target = &quot;password&quot;,ignore = true)</span><span class="hljs-comment">//转换后不显示密码</span><br>    <span class="hljs-meta">@Mapping(target = &quot;createTime&quot;,dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    Chives <span class="hljs-title function_">vo2do</span><span class="hljs-params">(ChivesVo chivesVo)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *能够在一个文件中定义多个类之间的转换</span><br><span class="hljs-comment">     */</span><br>    Chives <span class="hljs-title function_">queryVO2DO</span><span class="hljs-params">(ChivesQueryVo chivesQueryVo)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多个对象构成一个对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Mapping(target = &quot;postCode&quot;,source = &quot;address.zipCode&quot;)</span><br>    ChivesWithAddressVo <span class="hljs-title function_">chivesAndAddress</span><span class="hljs-params">(Chives chives,Address address)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * List转换，查看编译生成的实现类得知，调用的是上面的单个转换方法，故不再添加注解</span><br><span class="hljs-comment">     */</span><br>    List&lt;ChivesVo&gt; <span class="hljs-title function_">listDo2Vo</span><span class="hljs-params">(List&lt;Chives&gt; list)</span>;<br>    List&lt;Chives&gt; <span class="hljs-title function_">listVo2Do</span><span class="hljs-params">(List&lt;ChivesVo&gt; list)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对于默认的类型，mapstruct能够自动转换，对于自定义的类型，需要手动创建转换器（入参和返回值的类型能够匹配就行）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">default</span> List&lt;ChivesVo.ChivesConfig&gt; strConfigToListChivesConfig(String config) &#123;<br>       <span class="hljs-keyword">return</span> JSON.parseArray(config,ChivesVo.ChivesConfig.class);<br>    &#125;<br><br>    <span class="hljs-keyword">default</span> String <span class="hljs-title function_">listChivesConfigToStrConfig</span><span class="hljs-params">(List&lt;ChivesVo.ChivesConfig&gt; list)</span> &#123;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(list);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动生成的源文件："><a href="#自动生成的源文件：" class="headerlink" title="自动生成的源文件："></a>自动生成的源文件：</h3><p>可以看到，<code>ChivesConverter</code>中每一个定义的方法都被自动生成，且都是set的方式，和手工set的方式一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Generated(</span><br><span class="hljs-meta">    value = &quot;org.mapstruct.ap.MappingProcessor&quot;,</span><br><span class="hljs-meta">    date = &quot;2023-03-09T16:08:19+0800&quot;,</span><br><span class="hljs-meta">    comments = &quot;version: 1.5.3.Final, compiler: javac, environment: Java 11.0.17 (Oracle Corporation)&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChivesConverterImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ChivesConverter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter_yyyy_MM_dd_HH_mm_ss_11333195168</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern( <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> );<br><br>    <span class="hljs-meta">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ChivesVo <span class="hljs-title function_">do2vo</span><span class="hljs-params">(Chives chives)</span> &#123;<br>        <span class="hljs-keyword">if</span> ( chives == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">ChivesVo</span> <span class="hljs-variable">chivesVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChivesVo</span>();<br><br>        chivesVo.setGender( chives.getSex() );<br>        <span class="hljs-keyword">if</span> ( chives.getCreateTime() != <span class="hljs-literal">null</span> ) &#123;<br>            chivesVo.setCreateTime( dateTimeFormatter_yyyy_MM_dd_HH_mm_ss_11333195168.format( chives.getCreateTime() ) );<br>        &#125;<br>        chivesVo.setId( chives.getId() );<br>        chivesVo.setUsername( chives.getUsername() );<br>        chivesVo.setPassword( chives.getPassword() );<br>        chivesVo.setBirthday( chives.getBirthday() );<br>        chivesVo.setConfig( strConfigToListChivesConfig( chives.getConfig() ) );<br><br>        <span class="hljs-keyword">return</span> chivesVo;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Chives <span class="hljs-title function_">vo2do</span><span class="hljs-params">(ChivesVo chivesVo)</span> &#123;<br>        <span class="hljs-keyword">if</span> ( chivesVo == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">chives</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chives</span>();<br><br>        chives.setSex( chivesVo.getGender() );<br>        <span class="hljs-keyword">if</span> ( chivesVo.getCreateTime() != <span class="hljs-literal">null</span> ) &#123;<br>            chives.setCreateTime( LocalDateTime.parse( chivesVo.getCreateTime(), dateTimeFormatter_yyyy_MM_dd_HH_mm_ss_11333195168 ) );<br>        &#125;<br>        chives.setId( chivesVo.getId() );<br>        chives.setUsername( chivesVo.getUsername() );<br>        chives.setBirthday( chivesVo.getBirthday() );<br>        chives.setConfig( listChivesConfigToStrConfig( chivesVo.getConfig() ) );<br><br>        <span class="hljs-keyword">return</span> chives;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;ChivesVo&gt; <span class="hljs-title function_">listDo2Vo</span><span class="hljs-params">(List&lt;Chives&gt; list)</span> &#123;<br>        <span class="hljs-keyword">if</span> ( list == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        List&lt;ChivesVo&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ChivesVo&gt;( list.size() );<br>        <span class="hljs-keyword">for</span> ( Chives chives : list ) &#123;<br>            list1.add( do2vo( chives ) );<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list1;<br>    &#125;<br>   <span class="hljs-comment">// more.........................</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>可以看到结果符合预期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConvertTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ChivesConverter chivesConverter;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试字段名存在不同，且存在自定义数据类型的类之间的转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestChivesConvert1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">jiucai1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chives</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;jiucai1&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">1</span>, LocalDate.now(), LocalDateTime.now(), <span class="hljs-string">&quot;[&#123;\&quot;field1\&quot;:\&quot;Test Field1\&quot;,\&quot;field2\&quot;:500&#125;]&quot;</span>);<br>        System.out.println(jiucai1);<br>        <span class="hljs-type">ChivesVo</span> <span class="hljs-variable">chivesVo</span> <span class="hljs-operator">=</span> chivesConverter.do2vo(jiucai1);<br>        System.out.println(chivesVo);<br>        <span class="hljs-comment">//输出结果：</span><br>        <span class="hljs-comment">//Chives(id=1, username=jiucai1, password=123456, sex=1, birthday=2023-03-09, createTime=2023-03-09T16:42:32.841087700, config=[&#123;&quot;field1&quot;:&quot;Test Field1&quot;,&quot;field2&quot;:500&#125;])</span><br>        <span class="hljs-comment">//ChivesVo(id=1, username=jiucai1, password=123456, gender=1, birthday=2023-03-09, createTime=2023-03-09 16:42:32, config=[ChivesVo.ChivesConfig(field1=Test Field1, field2=500)])</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 仅为了验证可以在一个文件中定义多个类的转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">QueryVOConvertTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ChivesQueryVo</span> <span class="hljs-variable">zzz</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChivesQueryVo</span>(<span class="hljs-string">&quot;zzz&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span>);<br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">chives</span> <span class="hljs-operator">=</span> chivesConverter.queryVO2DO(zzz);<br>        System.out.println(chives);<br>        <span class="hljs-comment">//输出结果：</span><br>        <span class="hljs-comment">//Chives(id=null, username=zzz, password=1111, sex=null, birthday=null, createTime=null, config=null)</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试多个对象转换为一个对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test2to1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Chives</span> <span class="hljs-variable">jiucai1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chives</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;jiucai1&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">1</span>, LocalDate.now(), LocalDateTime.now(), <span class="hljs-string">&quot;[&#123;\&quot;field1\&quot;:\&quot;Test Field1\&quot;,\&quot;field2\&quot;:500&#125;]&quot;</span>);<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(<span class="hljs-string">&quot;changan&quot;</span>, <span class="hljs-number">114514</span>, <span class="hljs-number">114</span>, <span class="hljs-string">&quot;henhenhen&quot;</span>);<br>        <span class="hljs-type">ChivesWithAddressVo</span> <span class="hljs-variable">chivesVo</span> <span class="hljs-operator">=</span> chivesConverter.chivesAndAddress(jiucai1, address);<br>        System.out.println(chivesVo);<br>        <span class="hljs-comment">//输出结果：</span><br>        <span class="hljs-comment">//ChivesWithAddressVo(id=1, username=jiucai1, street=changan, postCode=114514, houseNo=114)</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://pdai.tech/md/develop/package/dev-package-x-mapstruct.html">https://pdai.tech/md/develop/package/dev-package-x-mapstruct.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mapstruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局</title>
      <link href="/2022/11/05/Flex%E5%B8%83%E5%B1%80/"/>
      <url>/2022/11/05/Flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>flex布局又称弹性布局，是一种十分简单且实用的布局方式。这里记录了常用的属性。</p><h1 id="flex布局的常见父项属性"><a href="#flex布局的常见父项属性" class="headerlink" title="flex布局的常见父项属性"></a>flex布局的常见父项属性</h1><ul><li>以下由6个属性是对父元素设置的</li><li>flex-direction :设置主轴的方向</li><li>justify-content :设置主轴上的子元素排列方式</li><li>flex-wrap :设置子元素是否换行</li><li>align-content :设置侧轴上的子元素的排列方式(多行)</li><li>align-items :设置侧轴上的子元素排列方式(单行)</li><li>flex-flow :复合属性,相当于同时设置了flex-direction和flex-wrap</li></ul><h2 id="一、flex-derection-设置主轴的方向"><a href="#一、flex-derection-设置主轴的方向" class="headerlink" title="一、flex-derection 设置主轴的方向"></a>一、flex-derection 设置主轴的方向</h2><h3 id="1-主轴与侧轴"><a href="#1-主轴与侧轴" class="headerlink" title="1.主轴与侧轴"></a>1.主轴与侧轴</h3><p>在flex布局中,是分为主轴和侧轴两个方向,同样的叫法有:行和列、x轴和y轴</p><ul><li>默认主轴方向就是x轴方向,水平向右</li><li>默认侧轴方向就是y轴方向,水平向下</li></ul><h3 id="2-属性值"><a href="#2-属性值" class="headerlink" title="2.属性值"></a>2.属性值</h3><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值从左到右</td></tr><tr><td>row-reverse</td><td>从左到右</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><h2 id="二、justify-content-设置主轴上的子元素排列方式"><a href="#二、justify-content-设置主轴上的子元素排列方式" class="headerlink" title="二、justify-content 设置主轴上的子元素排列方式"></a>二、justify-content 设置主轴上的子元素排列方式</h2><p>justify-content属性定义了项目在主轴上的对齐方式<br><code>注意:使用这个属性之前一定要确定好主轴是哪个</code></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td><code>默认值</code> 从头开始 如果主轴是x轴，则从左到右</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐（如果主轴是x轴则 水平居中）</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边 再平分剩余空间</td></tr></tbody></table><h2 id="三、flex-wrap设置子元素是否换行"><a href="#三、flex-wrap设置子元素是否换行" class="headerlink" title="三、flex-wrap设置子元素是否换行"></a>三、flex-wrap设置子元素是否换行</h2><p>默认情况下,项目都排在一条线(又称“轴线”)上。flex-wrap属性定义 , flex布局中默认是不换行的。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值，不换行</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><h2 id="四、align-items设置侧轴上的子元素排列方式-单行"><a href="#四、align-items设置侧轴上的子元素排列方式-单行" class="headerlink" title="四、align-items设置侧轴上的子元素排列方式(单行)"></a>四、align-items设置侧轴上的子元素排列方式(单行)</h2><p>该属性是控制子项在侧轴(默认是y轴).上的排列方式在子项为单项的时候使用</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下</td></tr><tr><td>felx-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中（垂直居中）</td></tr><tr><td>stretch</td><td>拉伸（默认值）使用时子盒子不能加高度</td></tr></tbody></table><h2 id="五、align-content"><a href="#五、align-content" class="headerlink" title="五、align-content"></a>五、align-content</h2><p>设置侧轴.上的子元素的排列方式(多行)<br>设置子项在侧轴.上的排列方式并且只能用于子项出现换行的情况(多行) , 在单行下是没有效果的。</p><h3 id="1-属性"><a href="#1-属性" class="headerlink" title="1. 属性"></a>1. 属性</h3><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值在侧轴的头部开始排列</td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>子项在侧轴先平分两头、再平分剩余空间</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度</td></tr></tbody></table><h3 id="2-align-content-和align-items区别"><a href="#2-align-content-和align-items区别" class="headerlink" title="2. align-content 和align-items区别"></a>2. align-content 和align-items区别</h3><ul><li>align-iterms 适用于单行情况下，只有上对齐、下对齐、居中和拉伸</li><li>align-content适应于换行(多行)的情况下(单行情况下无效) .可以设置上对齐、下对齐、 居中、拉伸以及平均分<br>配剩余空间等属性值。</li><li>总结就是 单行找align-items多行找align-content</li></ul><h2 id="六、flex-flow"><a href="#六、flex-flow" class="headerlink" title="六、flex-flow"></a>六、flex-flow</h2><p>flex-flow属性是flex-direction和flex: wrap属性的复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-flow</span>: row wrap;<br></code></pre></td></tr></table></figure><h1 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h1><h2 id="1-flex-属性"><a href="#1-flex-属性" class="headerlink" title="1. flex 属性"></a>1. flex 属性</h2><p>flex属性定义子项目分配剩余空间,用flex来表示占多少份数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br><span class="hljs-attribute">flex</span>: &lt;number&gt;; <span class="hljs-comment">/* default 0 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-align-self控制子项自己在侧轴-上的排列方式"><a href="#2-align-self控制子项自己在侧轴-上的排列方式" class="headerlink" title="2. align-self控制子项自己在侧轴.上的排列方式"></a>2. align-self控制子项自己在侧轴.上的排列方式</h2><ul><li>align-self属性允许单个项目有与其他项目不样的对齐方式,可覆盖align-items属性。</li><li>默认值为auto ,表示继承父元素的align- items属性,如果没有父元素,则等同于stretch.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) (<br><span class="hljs-comment">/*设置自己在侧轴上的排列方式*/</span><br><span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-order-属性定义项目的排列顺序"><a href="#3-order-属性定义项目的排列顺序" class="headerlink" title="3. order 属性定义项目的排列顺序"></a>3. order 属性定义项目的排列顺序</h2><ul><li>数值越小,排列越靠前，默认为0。</li><li>注意:和z-index不一-样。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Idea的Docker插件实现SpringBoot应用快速部署</title>
      <link href="/2022/10/29/%E4%BD%BF%E7%94%A8IDEA%E7%9A%84Docker%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0SpringBoot%E5%BA%94%E7%94%A8%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/10/29/%E4%BD%BF%E7%94%A8IDEA%E7%9A%84Docker%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0SpringBoot%E5%BA%94%E7%94%A8%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Step1-安装插件"><a href="#Step1-安装插件" class="headerlink" title="Step1: 安装插件"></a>Step1: 安装插件</h1><p>这一步似乎没什么好说的，IDEA 自带了</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-16-59-9303e8376769bd810a18d9cab7c27709-202210291015333-6d9505.png" alt="image-20221029101534713"></p><h1 id="Step2-添加安装了docker的服务器"><a href="#Step2-添加安装了docker的服务器" class="headerlink" title="Step2: 添加安装了docker的服务器"></a>Step2: 添加安装了docker的服务器</h1><p>设置-构建、运行、部署-Docker-点击加号添加服务器，这里使用的是ssh方式连接</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-03-439781de5ed775aaabb363222331f3ed-202210291018333-be1227.png" alt="image-20221029101807269"></p><p>当你配置正确就能在<code>服务</code>中看到docker主机了</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-07-b17abf3c59b3293707baa8cce72a0c2c-202210291022484-9d78a9.png" alt="image-20221029102205721"></p><h1 id="Step3-创建DockerFile"><a href="#Step3-创建DockerFile" class="headerlink" title="Step3: 创建DockerFile"></a>Step3: 创建DockerFile</h1><p>在要部署的项目的根目录下创建DockerFile</p><ul><li>因为我期望直接使用打包后产生的jar包，并且不修改目录，所以我进行了如下的配置<code>ADD /target/Admin-1.0-SNAPSHOT.jar app.jar</code> ，如果你希望修改要运行的jar包的目录，记得修改这个参数。</li><li>这里基础镜像使用的是java:8u11 ，需要提前使用<code>docker pull java:8u11</code>命令拉取，当然你可以换成其他镜像。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Base images 基础镜像</span><br><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>u111<br><br><span class="hljs-comment">#MAINTAINER 维护者信息</span><br><span class="hljs-keyword">MAINTAINER</span> haonan&lt;nansama@qq.com&gt;<br><br><span class="hljs-comment">#VOLUME：挂载目录</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /temp</span><br><br><span class="hljs-comment">#ADD  将Admin-1.0-SNAPSHOT.jar文件将拷贝到容器中，默认拷贝到根路径下</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> /target/Admin-1.0-SNAPSHOT.jar app.jar</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> bash -c <span class="hljs-string">&quot;touch /app.jar&quot;</span></span><br><br><span class="hljs-comment">#EXPOSE 容器暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8989</span><br><br><span class="hljs-comment">#ENTRYPOINT 应用启动命令 参数设定</span><br><span class="hljs-comment">#由于tomcat的session id的生成主要通过java.security.SecureRandom生成随机数来实现，导致启动过程很慢</span><br><span class="hljs-comment">#通过-Djava.security.egd=file:/dev/./urandom参数可以加快随机数产生过程</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><ul><li>注意文件的位置</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-11-c11953edd440795589821dc9086eea32-202210291032985-ec7e22.png" alt="image-20221029103138914"></p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-15-f0bb09a4d938d9f334e9b5541dc71ce7-202210291049353-248a15.png" alt="image-20221029104503250"></p><h1 id="Step4-Idea添加配置"><a href="#Step4-Idea添加配置" class="headerlink" title="Step4: Idea添加配置"></a>Step4: Idea添加配置</h1><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-19-6b060ed5bb086d062a51991b1afc7eb8-202210291049366-ab1d20.png" alt="image-20221029103424757"></p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-22-f9308d81c9336c3380cfe8dc8001a052-202210291049705-4f8a9d.png" alt="image-20221029103514122"></p><p>添加完配置后，填入参数，我这个服务开放8989端口，并且使用网络模式为host模式</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-26-33bfae7ab4be8cf57770af04cd621e65-202210291049714-33436b.png" alt="image-20221029103703806"></p><h1 id="Step5-打包并运行"><a href="#Step5-打包并运行" class="headerlink" title="Step5 打包并运行"></a>Step5 打包并运行</h1><p>idea配置完并保存，并且确定打包成功，就可以直接运行了</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-34-8212da4c8b393464a2ae897e96d4c696-202210291049411-46ca75.png" alt="image-20221029103855518"></p><p>去服务中可以看到运行情况和日志</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-30-4d9f4e32dabafdb9d77f0e969052aa9f-202210291048686-84b5e3.png" alt="image-20221029104158549"></p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-17-37-144bb701176f4ba04ca12b071eb9ff18-202210291048757-f9a91c.png" alt="image-20221029104232474"></p><h1 id="代码修改后重新部署"><a href="#代码修改后重新部署" class="headerlink" title="代码修改后重新部署"></a>代码修改后重新部署</h1><p>代码修改后，需要重新部署的话不需要再进行额外的配置，只需要maven执行clean 后再次package并运行docker配置就行。需要注意的是，因为是重新构建镜像，这样的操作只会删除容器并重新创建运行，并不会删除之前的镜像，需要手动删除</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“解决博客部署到gitpages后每次提交都更新customdomain的问题”</title>
      <link href="/2022/09/17/GitHub%20Pages%20%E4%B8%AD%E7%9A%84Custom%20domain%20%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/17/GitHub%20Pages%20%E4%B8%AD%E7%9A%84Custom%20domain%20%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>说的就是这个目前这个博客，每次提交都得上Pages里面改 Custom domain，很烦</p><p>解决方法很简单</p><p>在hexo博客目录下的 <code>source/</code> 目录中新建<code>CNAME</code>文件即可，内容为你为博客分配的域名</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-05-20-83a7dbb36b4e5ce28fc7675ca1210eac-202210172037318-e81e32.png" alt="注意文件路径"></p><p>测试后完美解决问题</p>]]></content>
      
      
      <categories>
          
          <category> 小问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-SpringValidation</title>
      <link href="/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-SpringValidation/"/>
      <url>/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-SpringValidation/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring自带的校验框架"><a href="#Spring自带的校验框架" class="headerlink" title="Spring自带的校验框架"></a>Spring自带的校验框架</h1><p><a href="https://bbs.huaweicloud.com/blogs/352491">（我懒）手把手教你利用Spring Boot实现各种参数校验-云社区-华为云 (huaweicloud.com)</a></p><p>避免了多层嵌套的if-else</p><h2 id="1、最基本的使用"><a href="#1、最基本的使用" class="headerlink" title="1、最基本的使用"></a>1、最基本的使用</h2><h3 id="自动匹配实体类条件控制注解"><a href="#自动匹配实体类条件控制注解" class="headerlink" title="自动匹配实体类条件控制注解"></a>自动匹配实体类条件控制注解</h3><p>User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NotNull(message = &quot;年龄不能为空&quot;)</span><br>    <span class="hljs-meta">@Range(min = 1, max =100)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@Email(message = &quot;不符合邮箱格式&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller</p><p>使用时入参加上@Validated注解，就会自动判断是否符合实体类上写的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <br>    <span class="hljs-meta">@PostMapping(&quot;/test1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add1</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get方法parm上的参数使用注解"><a href="#get方法parm上的参数使用注解" class="headerlink" title="get方法parm上的参数使用注解"></a>get方法parm上的参数使用注解</h3><p>Controller上加上@Validated注解，入参加上@PathVariable和具体的条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/test2/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">path</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-meta">@Max(100)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、分组注解-咕咕咕"><a href="#2、分组注解-咕咕咕" class="headerlink" title="2、分组注解(咕咕咕)"></a>2、分组注解(咕咕咕)</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-SpringBoot续</title>
      <link href="/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-SpringBoot%E7%BB%AD/"/>
      <url>/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-SpringBoot%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><ul><li><p>SpringBoot的pom文件中的：</p><ul><li><p>parent文件管理了版本号</p></li><li><p>start文件管理了对应模块的技术，它继承了parent，版本由parent控制</p></li></ul></li></ul><p><strong>使用maven依赖管理变更起步依赖项：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--web起步依赖环境中，排除Tomcat起步依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--添加Jetty起步依赖，版本由SpringBoot的starter控制--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="RESTful-风格"><a href="#RESTful-风格" class="headerlink" title="RESTful 风格"></a>RESTful 风格</h1><p>多个数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> IPage&lt;Book&gt; <span class="hljs-title function_">getPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> currentPage,<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> pageSize)</span>&#123;<br>       <span class="hljs-keyword">return</span> bookService.getPage(currentPage,pageSize, <span class="hljs-literal">null</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.zenithzone.top/pic/202210172035943.png" alt="image-20220710112106513"></p><h1 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h1><p>当properties &gt; yml &gt; yaml </p><p>但实际使用中只使用yml文件就行（主流）</p><h1 id="实际开发中的Service层"><a href="#实际开发中的Service层" class="headerlink" title="实际开发中的Service层"></a>实际开发中的Service层</h1><p>1、在实际开发中，不直接Mybatis-Plus提供的Service层（当然和Mapper一样可以自定义自己的方法），而是使用自定义的Service层，它的业务功能是用Mybatis-Plus提供的Mapper方法和自定义的Mapper方法结合起来实现的，如调用多个Dao层的方法。</p><p>2、业务层的方法必须写测试用例</p><h1 id="接收前端的Date对象"><a href="#接收前端的Date对象" class="headerlink" title="接收前端的Date对象"></a>接收前端的Date对象</h1><p>实体类对应的属性上加上接收的格式</p><p>数据库的字段类型也为date</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Date time;<br></code></pre></td></tr></table></figure><p>前端传值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;profile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ppppp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-11-04&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;userid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">34343</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jkjkjk&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Vo优化"><a href="#Vo优化" class="headerlink" title="Vo优化"></a>Vo优化</h1><p>当实体类属性复杂时，后端向前端传值，得到的原始实体类可能会包含太多无关信息，而前端只需要几个属性。这时候新建Vo实体类，只包括需要的属性，通过一系列操作将原始的实体类转换为Vo实体类。</p><h1 id="Bean拷贝工具"><a href="#Bean拷贝工具" class="headerlink" title="Bean拷贝工具"></a>Bean拷贝工具</h1><p>主要用于将vo优化</p><p>Spring自带的BeanUtil可以将一个实体类转换为另外一个实体类，通过属性的名字实现自动绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanUtils.copyProperties(source,target);<br></code></pre></td></tr></table></figure><p>为了实现快速的转换，使用封装好的工具类，实现了单个对象的类型转换和多个对象的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanCopyUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 传入泛型的Class对象，确定传入的类型和返回的类型,将传入的类型转换成vo</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span>: haonan</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">copyBean</span><span class="hljs-params">(Object source, Class&lt;T&gt; clazz)</span> &#123;<br>        T result;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射，创建空对象</span><br>            result = clazz.newInstance();<br>            <span class="hljs-comment">//Boot的方法，传递对应的属性值给目标对象</span><br>            BeanUtils.copyProperties(source, result);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,O&gt; List&lt;T&gt; <span class="hljs-title function_">copyBeanList</span><span class="hljs-params">(List&lt;O&gt; list,Class&lt;T&gt; clazz)</span>&#123;<br>        <span class="hljs-keyword">return</span> list.stream()<br>                .map(o -&gt; copyBean(o, clazz))<br>                .collect(Collectors.toList());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方便的统一返回类型实体类-和-返回代码和信息的枚举类"><a href="#方便的统一返回类型实体类-和-返回代码和信息的枚举类" class="headerlink" title="方便的统一返回类型实体类 和 返回代码和信息的枚举类"></a>方便的统一返回类型实体类 和 返回代码和信息的枚举类</h1><p>统一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseResult</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = AppHttpCodeEnum.SUCCESS.getCode();<br>        <span class="hljs-built_in">this</span>.msg = AppHttpCodeEnum.SUCCESS.getMsg();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseResult</span><span class="hljs-params">(Integer code, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseResult</span><span class="hljs-params">(Integer code, String msg, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResponseResult</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">errorResult</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span> &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>();<br>        <span class="hljs-keyword">return</span> result.error(code, msg);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">okResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">okResult</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span> &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseResult</span>();<br>        <span class="hljs-keyword">return</span> result.ok(code, <span class="hljs-literal">null</span>, msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">okResult</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> setAppHttpCodeEnum(AppHttpCodeEnum.SUCCESS, AppHttpCodeEnum.SUCCESS.getMsg());<br>        <span class="hljs-keyword">if</span>(data!=<span class="hljs-literal">null</span>) &#123;<br>            result.setData(data);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">errorResult</span><span class="hljs-params">(AppHttpCodeEnum enums)</span>&#123;<br>        <span class="hljs-keyword">return</span> setAppHttpCodeEnum(enums,enums.getMsg());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">errorResult</span><span class="hljs-params">(AppHttpCodeEnum enums, String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> setAppHttpCodeEnum(enums,msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">setAppHttpCodeEnum</span><span class="hljs-params">(AppHttpCodeEnum enums)</span>&#123;<br>        <span class="hljs-keyword">return</span> okResult(enums.getCode(),enums.getMsg());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ResponseResult <span class="hljs-title function_">setAppHttpCodeEnum</span><span class="hljs-params">(AppHttpCodeEnum enums, String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> okResult(enums.getCode(),msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResponseResult&lt;?&gt; error(Integer code, String msg) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data, String msg) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResponseResult&lt;?&gt; ok(T data) &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AppHttpCodeEnum</span> &#123;<br>    <span class="hljs-comment">// 成功</span><br>    SUCCESS(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;操作成功&quot;</span>),<br>    <span class="hljs-comment">// 登录</span><br>    NEED_LOGIN(<span class="hljs-number">401</span>,<span class="hljs-string">&quot;需要登录后操作&quot;</span>),<br>    NO_OPERATOR_AUTH(<span class="hljs-number">403</span>,<span class="hljs-string">&quot;无权限操作&quot;</span>),<br>    SYSTEM_ERROR(<span class="hljs-number">500</span>,<span class="hljs-string">&quot;出现错误&quot;</span>),<br>    USERNAME_EXIST(<span class="hljs-number">501</span>,<span class="hljs-string">&quot;用户名已存在&quot;</span>),<br>    PHONENUMBER_EXIST(<span class="hljs-number">502</span>,<span class="hljs-string">&quot;手机号已存在&quot;</span>), EMAIL_EXIST(<span class="hljs-number">503</span>, <span class="hljs-string">&quot;邮箱已存在&quot;</span>),<br>    REQUIRE_USERNAME(<span class="hljs-number">504</span>, <span class="hljs-string">&quot;必需填写用户名&quot;</span>),<br>    LOGIN_ERROR(<span class="hljs-number">505</span>,<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    <span class="hljs-type">int</span> code;<br>    String msg;<br><br>    AppHttpCodeEnum(<span class="hljs-type">int</span> code, String errorMessage)&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = errorMessage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字面值处理"><a href="#字面值处理" class="headerlink" title="字面值处理"></a>字面值处理</h1><p>规范传入值，避免了魔法值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemConstants</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  文章是草稿</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ARTICLE_STATUS_DRAFT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  文章是正常分布状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ARTICLE_STATUS_NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p>不同的服务器、端口访问另一服务器、端口的接口时，出于安全的设计，不让你访问，在前后端分离的项目中十分常见。</p><p>使用config文件解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>      <span class="hljs-comment">// 设置允许跨域的路径</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 设置允许跨域请求的域名</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">// 是否允许cookie</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">// 设置允许的请求方式</span><br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>)<br>                <span class="hljs-comment">// 设置允许的header属性</span><br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">// 跨域允许时间</span><br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="FastJson配置"><a href="#FastJson配置" class="headerlink" title="FastJson配置"></a>FastJson配置</h1><p>springboot默认使用Jackson，fastJson性能比较好</p><p>这里用的是fastjson1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-comment">//使用@Bean注入fastJsonHttpMessageConvert</span><br><span class="hljs-keyword">public</span> HttpMessageConverter <span class="hljs-title function_">fastJsonHttpMessageConverters</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//1.需要定义一个Convert转换消息的对象</span><br>    <span class="hljs-type">FastJsonHttpMessageConverter</span> <span class="hljs-variable">fastConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJsonHttpMessageConverter</span>();<br>    <span class="hljs-type">FastJsonConfig</span> <span class="hljs-variable">fastJsonConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJsonConfig</span>();<br>    fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);<br>    <span class="hljs-comment">//设置Date类型的格式，不设置的话前后端传值会有bug</span><br>    fastJsonConfig.setDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br>    SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);<br><br>    fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);<br>    fastConverter.setFastJsonConfig(fastJsonConfig);<br>    HttpMessageConverter&lt;?&gt; converter = fastConverter;<br>    <span class="hljs-keyword">return</span> converter;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>    converters.add(fastJsonHttpMessageConverters());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="统一的错误返回"><a href="#统一的错误返回" class="headerlink" title="统一的错误返回"></a>统一的错误返回</h1><p>自定义错误类，每次要主动抛出异常时，抛出这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">SystemException</span><span class="hljs-params">(AppHttpCodeEnum httpCodeEnum)</span> &#123;<br>       <span class="hljs-built_in">super</span>(httpCodeEnum.getMsg());<br>       <span class="hljs-built_in">this</span>.code= httpCodeEnum.getCode();<br>       <span class="hljs-built_in">this</span>.msg = httpCodeEnum.getMsg();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>异常处理器</p><p>@RestControllerAdvice，标识为返回json格式的异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@Description</span>: 处理主动抛出的SystemException</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span>: haonan</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@ExceptionHandler(SystemException.class)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">handlerSystemException</span><span class="hljs-params">(SystemException e)</span>&#123;<br>        log.error(<span class="hljs-string">&quot;出现了异常！&quot;</span>,e);<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(e.getCode(),e.getMsg());<br>    &#125;<br>   <span class="hljs-comment">//处理 系统的其他异常</span><br>   <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>   <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception e)</span> &#123;<br>       log.error(<span class="hljs-string">&quot;出现了异常！&quot;</span>,e);<br>       <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),e.getMessage());<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-Validation"><a href="#Spring-Validation" class="headerlink" title="Spring Validation"></a>Spring Validation</h1><p>见另一篇</p><h1 id="AOP实现日志增强"><a href="#AOP实现日志增强" class="headerlink" title="AOP实现日志增强"></a>AOP实现日志增强</h1><p>一般使用注解的Pointcut和Round的方式</p><p>注解类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SystemLog &#123;<br>    String <span class="hljs-title function_">businessName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(cn.zhn.blog.annoation.SystemLog)&quot;)</span><span class="hljs-comment">//标识使用的注解类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt1</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt1()&quot;)</span><span class="hljs-comment">//标识启用的方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">printLog</span><span class="hljs-params">(ProceedingJoinPoint pj)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        Object ret;<br>        <span class="hljs-keyword">try</span> &#123;<br>            handleBefore(pj);<br>            ret = pj.proceed();<br>            handleAfter(ret);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 结束后换行</span><br>            log.info(<span class="hljs-string">&quot;=======End=======&quot;</span> + System.lineSeparator());<br>        &#125;<br>       <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleBefore</span><span class="hljs-params">(ProceedingJoinPoint pj)</span> &#123;<br>        <span class="hljs-comment">//获取当前的request请求</span><br>        <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-keyword">assert</span> requestAttributes != <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestAttributes.getRequest();<br>        <span class="hljs-comment">//获取被增强方法上的注解对象</span><br>        <span class="hljs-type">SystemLog</span> <span class="hljs-variable">systemLog</span> <span class="hljs-operator">=</span> getSystemLog(pj);<br>        <span class="hljs-comment">//获取执行方法</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) pj.getSignature();<br><br>        log.info(<span class="hljs-string">&quot;=======Start=======&quot;</span>);<br>        <span class="hljs-comment">// 打印请求 URL</span><br>        log.info(<span class="hljs-string">&quot;URL            : &#123;&#125;&quot;</span>,request.getRequestURI());<br>        <span class="hljs-comment">// 打印描述信息</span><br>        log.info(<span class="hljs-string">&quot;BusinessName   : &#123;&#125;&quot;</span>, systemLog.businessName());<br>        <span class="hljs-comment">// 打印 Http method</span><br>        log.info(<span class="hljs-string">&quot;HTTP Method    : &#123;&#125;&quot;</span>, request.getMethod());<br>        <span class="hljs-comment">// 打印调用 controller 的全路径以及执行方法</span><br>        log.info(<span class="hljs-string">&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;</span>,signature.getDeclaringTypeName(),signature.getName());<br>        <span class="hljs-comment">// 打印请求的 IP</span><br>        log.info(<span class="hljs-string">&quot;IP             : &#123;&#125;&quot;</span>,request.getRemoteHost());<br>        <span class="hljs-comment">// 打印请求入参</span><br>        log.info(<span class="hljs-string">&quot;Request Args   : &#123;&#125;&quot;</span>, JSON.toJSONString(pj.getArgs()));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> SystemLog <span class="hljs-title function_">getSystemLog</span><span class="hljs-params">(ProceedingJoinPoint pj)</span> &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) pj.getSignature();<br><br>        <span class="hljs-keyword">return</span> signature.getMethod().getAnnotation(SystemLog.class);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleAfter</span><span class="hljs-params">(Object ret)</span> &#123;<br>        <span class="hljs-comment">// 打印出参</span><br>        log.info(<span class="hljs-string">&quot;Response       : &#123;&#125;&quot;</span>, JSON.toJSONString(((ResponseResult) ret).getData()) );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>配置类或启动类加上注解</p><p>允许定时任务注解@EnableScheduling</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(BlogApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定时任务实现：</p><p>实现定时方法加上注解注入IOC容器</p><p>在定时方法上加上注解 @Scheduled</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleViewCountScheduling</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisCache redisCache;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ArticleServiceImpl articleService;<br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0/10 * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateViewCount</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, Object&gt; cacheMap = redisCache.getCacheMap(<span class="hljs-string">&quot;article:viewCount&quot;</span>);<br>        ArrayList&lt;Article&gt; articles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        cacheMap.forEach((id,count)-&gt;&#123;<br>            <span class="hljs-type">Article</span> <span class="hljs-variable">article</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Article</span>(Long.parseLong(id), Long.valueOf(count.toString()));<br>           articles.add(article);<br>        &#125;);<br>        <span class="hljs-keyword">try</span> &#123;<br>            articleService.updateBatchById(articles);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemException</span>(AppHttpCodeEnum.SYSTEM_ERROR);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cron表达式不需要记忆，需要时从网站找 <a href="https://www.bejson.com/othertools/cron/">在线Cron表达式生成器</a></p><h1 id="boot启动时执行代码"><a href="#boot启动时执行代码" class="headerlink" title="boot启动时执行代码"></a>boot启动时执行代码</h1><p>​如果希望在SpringBoot应用启动时进行一些初始化操作可以选择使用CommandLineRunner来进行处理。</p><p>​我们只需要实现CommandLineRunner接口，并且把对应的bean注入容器。把相关初始化的代码重新到需要重新的方法中。</p><p>​这样就会在应用启动的时候执行对应的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;程序初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="排除自动启动的父依赖（如DataSourceAutoConfiguration-class"><a href="#排除自动启动的父依赖（如DataSourceAutoConfiguration-class" class="headerlink" title="排除自动启动的父依赖（如DataSourceAutoConfiguration.class)"></a>排除自动启动的父依赖（如DataSourceAutoConfiguration.class)</h1><p>遇到的问题：父工程的依赖中有jdbc依赖和druid依赖，子工程启动时报错，提示必须要配置</p><p>解决方法：在子工程的启动类上加上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, DruidDataSourceAutoConfigure.class&#125;)</span><br></code></pre></td></tr></table></figure><h1 id="spring的-InitializingBean接口"><a href="#spring的-InitializingBean接口" class="headerlink" title="spring的 InitializingBean接口"></a>spring的 InitializingBean接口</h1><p>用于启动时将属性注入到实体类，只是使用了自动装配的注解，并不会将属性自动注入到bean中，要配合该接口使用</p><p>下列代码用于启动时获取属性</p><p>配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">alioss：</span><br><span class="hljs-string">endpoint：</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">accessKeySecret:</span> <span class="hljs-string">xx</span><br>    <span class="hljs-attr">bucketName:</span> <span class="hljs-string">x</span><br></code></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;alioss&quot;)</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecretPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    String endpoint;<br>    String accessKeyId;<br>    String accessKeySecret;<br>    String bucketName;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String END_POINT;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_ID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_SECRET;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String BUCKET_NAME;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        END_POINT = endpoint;<br>        ACCESS_KEY_ID = accessKeyId;<br>        ACCESS_KEY_SECRET = accessKeySecret;<br>        BUCKET_NAME = bucketName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>使用这个注解的注意点：</p><ul><li><p>自动注入的属性名必须要和配置类的属性名一致</p></li><li><p>使用该注解的实体类必须要被spring管理（自动装配</p></li><li><p>属性必须要有set方法</p></li><li><p>prefix在整个springboot应用中只能出现一次（@ConfigurationProperties(prefix &#x3D; “alioss”)不能出现在多个类中）</p></li></ul><h1 id="IdWorker类，生成id很方便"><a href="#IdWorker类，生成id很方便" class="headerlink" title="IdWorker类，生成id很方便"></a>IdWorker类，生成id很方便</h1><h1 id="HuTool-工具包，太好用辣"><a href="#HuTool-工具包，太好用辣" class="headerlink" title="HuTool 工具包，太好用辣"></a>HuTool 工具包，太好用辣</h1><p><a href="https://hutool.cn/">Hutool — 🍬A set of tools that keep Java sweet.</a></p><h1 id="Spring中使用Redis进行序列化和反序列化遇到的问题"><a href="#Spring中使用Redis进行序列化和反序列化遇到的问题" class="headerlink" title="Spring中使用Redis进行序列化和反序列化遇到的问题"></a>Spring中使用Redis进行序列化和反序列化遇到的问题</h1><p>报错：大概是 Could not xxx JSON : xxxx</p><p>redis的配置类将序列化和反序列化的工具换成fastjson</p><p>参考学年设计项目的security模块和项目 springsecurity quickstart</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-SpringBoot</title>
      <link href="/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-SpringBoot/"/>
      <url>/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="自动装配和配置文件"><a href="#自动装配和配置文件" class="headerlink" title="自动装配和配置文件"></a>自动装配和配置文件</h1><ul><li>参考的文档:<a href="https://www.yuque.com/atguigu/springboot">SpringBoot2核心技术与响应式编程 · 语雀 (yuque.com)</a></li><li>参考的视频：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">雷丰阳2021版SpringBoot2零基础入门springboot全套完整版（spring boot2）_哔哩哔哩_bilibili</a></li></ul><h2 id="一、spring原始的自动装配"><a href="#一、spring原始的自动装配" class="headerlink" title="一、spring原始的自动装配"></a>一、spring原始的自动装配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><span class="hljs-comment">//只用ioc容器中的组件才能使用springBoot自动装配的功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;旺财&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;3&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br><br><span class="hljs-comment">//获取对象</span><br><span class="hljs-meta">@Autowirte</span><br>Dog dog;<br></code></pre></td></tr></table></figure><h2 id="二、使用注册类-Configration"><a href="#二、使用注册类-Configration" class="headerlink" title="二、使用注册类@Configration"></a>二、使用注册类@Configration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、<span class="hljs-doctag">@Configuration</span> 表示这个类是配置类</span><br><span class="hljs-comment"> *    配置类本身也是组件（ioc容器中的bean）</span><br><span class="hljs-comment"> * 2、<span class="hljs-doctag">@Bean</span> 将bean注册到ioc容器中，方法名就是对象名例如 Dog boom</span><br><span class="hljs-comment"> * 3、选择ioc的单例模式</span><br><span class="hljs-comment"> *    full(proxyBeanMethods = true)默认为true 表示开启单实例模式</span><br><span class="hljs-comment"> *    lite(proxyBeanMethods = false)关闭单实例模式，即每次都创建新的对象，跳过创建时的单实例检查</span><br><span class="hljs-comment"> * 4、条件装配</span><br><span class="hljs-comment"> *    <span class="hljs-doctag">@ConditionalOnBean</span> (name = &quot;boom&quot;)条件装配，当ioc容器里面有 name=boom 的组件时，才能执行</span><br><span class="hljs-comment"> *    可用于方法上的和类上</span><br><span class="hljs-comment"> *    同理，有其他的<span class="hljs-doctag">@Conditional</span>条件装配注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;boom&quot;)</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">boom</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tt&quot;</span>,<span class="hljs-number">3</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">zhangsan</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、使用-import-直接导入类"><a href="#三、使用-import-直接导入类" class="headerlink" title="三、使用@import 直接导入类"></a>三、使用@import 直接导入类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Dog.class, HashMap.class&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="四、使用-Conditional-条件装配"><a href="#四、使用-Conditional-条件装配" class="headerlink" title="四、使用@Conditional 条件装配"></a>四、使用@Conditional 条件装配</h2><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-13-51-3bc9b6f786f2d3c25f7aa741e220cb59-202210172032054-a63545.png" alt="xxx"></p><ul><li>@ConditionalOnBean (name &#x3D; “boom”)条件装配，当ioc容器里面有 name&#x3D;boom 的组件时，才能执行<ul><li>可用于方法上的和类上</li><li>同理，有其他的@Conditional条件装配注解</li></ul></li></ul><h2 id="五、使用-ImportResource-导入xml文件进行装配"><a href="#五、使用-ImportResource-导入xml文件进行装配" class="headerlink" title="五、使用@ImportResource 导入xml文件进行装配"></a>五、使用@ImportResource 导入xml文件进行装配</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">======================beans.xml=========================<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;haha&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hehe&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tomcat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="六、使用yaml文件实现自动装配"><a href="#六、使用yaml文件实现自动装配" class="headerlink" title="六、使用yaml文件实现自动装配"></a>六、使用yaml文件实现自动装配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//配置在yaml中的映射名</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span>  String name;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> happy;<br>    <span class="hljs-keyword">private</span>  List&lt;Object&gt; list1;<br>    <span class="hljs-keyword">private</span>  List&lt;Object&gt; list2;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; map;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>YAML文件：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">小王</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">15</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#表示数组，方式1</span><br>  <span class="hljs-attr">list1:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">fly</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">game</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br><span class="hljs-comment">#数组表示方式2</span><br>  <span class="hljs-attr">list2:</span> [<span class="hljs-string">dance</span>,<span class="hljs-string">drive</span>,<span class="hljs-string">cookie</span>]<br><span class="hljs-comment">#表示map</span><br>  <span class="hljs-attr">map:</span> &#123;<span class="hljs-attr">zhn:</span> <span class="hljs-string">nb</span>&#125;<br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">旺财</span><br></code></pre></td></tr></table></figure><ul><li><strong>yaml 文件也是配置文件</strong>，优先级小于properties文件（即当两种文件均对同一参数作出修改，properties文件生效）</li></ul><p><strong>yaml数据读取(续) :</strong></p><ul><li><p>属性用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}，yaml文件中也能用${}</p></li><li><p>在配置文件中可以使用属性名引用方式引用属性</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">baseDir:</span> <span class="hljs-string">/usr/local/fire</span><br><span class="hljs-attr">center:</span><br><span class="hljs-attr">dataDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/data</span><br><span class="hljs-attr">tmpDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/tmp</span><br><span class="hljs-attr">logDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/log</span><br><span class="hljs-attr">msgDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/msgDir</span><br></code></pre></td></tr></table></figure><ul><li>属性值中如果出现转移字符，需要使用双引号包裹</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lesson:</span> <span class="hljs-string">&quot;Spring\tboot\nlesson&quot;</span><br></code></pre></td></tr></table></figure><h1 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h1><h2 id="一、静态资源访问"><a href="#一、静态资源访问" class="headerlink" title="一、静态资源访问"></a>一、静态资源访问</h2><h3 id="默认静态资源访问路径"><a href="#默认静态资源访问路径" class="headerlink" title="默认静态资源访问路径"></a>默认静态资源访问路径</h3><ul><li><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p></li><li><p>访问 ： 当前项目根路径&#x2F; + 静态资源名 </p></li><li><p>原理： 静态映射&#x2F;**。</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p></li><li><p>访问地址：<code>http://localhost:8080/1.png</code></p></li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-14-15-4dab499d28696d86a61cba29ce8d0c49-202210172032482-04fade.png" alt="image"></p><h3 id="设置访问前缀"><a href="#设置访问前缀" class="headerlink" title="设置访问前缀"></a>设置访问前缀</h3><p>访问地址：<code> http://localhost:8080/resources/1.png</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/resources/**</span><br></code></pre></td></tr></table></figure><h3 id="改变默认的静态资源路径"><a href="#改变默认的静态资源路径" class="headerlink" title="改变默认的静态资源路径"></a>改变默认的静态资源路径</h3><p>将图片放在<code>resources/haha</code>目录下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/resources/**</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/haha/</span>]<br></code></pre></td></tr></table></figure><h3 id="web-jar"><a href="#web-jar" class="headerlink" title="web-jar"></a>web-jar</h3><p>导入依赖例如jquery可当做静态资源访问</p><p>自动映射 &#x2F;<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">webjars</a>&#x2F;**</p><p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery&#x2F;3.5.1&#x2F;jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p><h2 id="二、欢迎页面支持"><a href="#二、欢迎页面支持" class="headerlink" title="二、欢迎页面支持"></a>二、欢迎页面支持</h2><ul><li>将<code>index.html</code>文件放到默认静态资源目录下<ul><li>可以配置静态资源目录</li><li>但是不能配置资源前缀，否则无法导致<code>index.html</code>不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/resources/**</span> <span class="hljs-comment">#配置访问前缀会导致Index.html不能被默认访问</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/haha/</span>]<br></code></pre></td></tr></table></figure><h3 id="Favicon（网页图标）"><a href="#Favicon（网页图标）" class="headerlink" title="Favicon（网页图标）"></a>Favicon（网页图标）</h3><p>favicon.ico 放在静态资源目录下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#  mvc:</span><br><span class="hljs-comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span><br></code></pre></td></tr></table></figure><h2 id="三、↓常用的URL注解和参数注解↓"><a href="#三、↓常用的URL注解和参数注解↓" class="headerlink" title="三、↓常用的URL注解和参数注解↓"></a>三、↓常用的URL注解和参数注解↓</h2><p><a href="https://github.com/nange076/study-notes/blob/main/spring%E6%B3%A8%E8%A7%A3.md">spring注解</a>（偷懒真好 :grin: ）</p><h2 id="四、session、request、cookie、application、token"><a href="#四、session、request、cookie、application、token" class="headerlink" title="四、session、request、cookie、application、token"></a>四、session、request、cookie、application、token</h2><ul><li><code>request</code>：发送请求时生成，结束后消失。</li><li><code>session</code>：保存在服务器上，浏览器访问应用时生成，浏览器关闭、服务器关闭、长时间没使用（默认20分钟，如果在第19分钟使用了，则重新计时）消失。</li><li><code>cookie</code>：由服务器生成，可以永久保存在浏览器（本地）。</li><li><code>token</code> ：令牌，由服务器生成发送给浏览器并保存。由于session保存在服务器，所以服务器压力太大，于是出现了token，只用于验证用户。token包含信息和签名（秘钥），服务器通过秘钥来验证用户。因为是根据秘钥来验证用户的，所以获取了秘钥就能伪造用户。</li><li><code>application</code>：web应用启动就创建，web应用关闭就消失。</li></ul><h2 id="五、thymeleaf-模板引擎"><a href="#五、thymeleaf-模板引擎" class="headerlink" title="五、thymeleaf 模板引擎"></a>五、thymeleaf 模板引擎</h2><ul><li>SpringBoot 默认不支持使用jsp，这里用thymeleaf替代，<del>thymeleaf从入门到吃灰</del></li></ul><h3 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h3><ul><li>导入依赖，版本由springboot控制</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在html文件中引入声明</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><ul><li>使用<code>th:text</code>和其他标签属性（指令）</li><li><code>$&#123;&#125;</code>获取变量</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <br></code></pre></td></tr></table></figure><ul><li>当实体的属性多的时候，可以使用<code>*&#123;&#125;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>@&#123;&#125;</code>获取静态资源</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/html5shiv.js&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/html5shiv.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/respond.min.js&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/respond.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/submit&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用each语句"><a href="#使用each语句" class="headerlink" title="使用each语句"></a>使用each语句</h4><p>随便建一个请求，返回值为list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/dynamic_table.html&quot;)</span><br><span class="hljs-keyword">public</span>  String <span class="hljs-title function_">dynamic_table</span><span class="hljs-params">(Model model)</span>&#123;<br>    List&lt;User&gt; list= Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;122&quot;</span>,<span class="hljs-string">&quot;3123&quot;</span>),<br>                                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lll&quot;</span>,<span class="hljs-string">&quot;3123&quot;</span>),<br>                                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;qqq&quot;</span>,<span class="hljs-string">&quot;kksk&quot;</span>));<br>    model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,list);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;table/dynamic_table&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>html中使用thymeleaf格式的each，构建内容为动态的table</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display table table-bordered table-striped&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dynamic-table&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gradeX&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user,stats:$&#123;users&#125;&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;stats.count&#125;&quot;</span>&gt;</span>Trident<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;user.username&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;user.password&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-抽取公共页面"><a href="#3-抽取公共页面" class="headerlink" title="3.抽取公共页面"></a>3.抽取公共页面</h3><p>在实际开发中，可能会出现多个页面有公共的部分，这些部分的内容是完全一致的。当我们需要修改这些公共部分的内容时，不可能每个页面都去修改一次。为了方便这部分内容的开发和维护，我们将这些公共部分抽取出来，放到一个html页面中保存，让其他要使用的页面去调用这个公共页面的内容就行了。当我们需要修改时，只需要对这个公共页面修改。</p><ul><li>用<code>th：fragment</code> 标签属性，定义一块公共内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;commonheader&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style-responsive.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/style-responsive.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/html5shiv.js&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/html5shiv.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/respond.min.js&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/respond.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!--↓引用方式↓--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;common :: commonheader&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过id 来定义一块公共内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leftmenu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-side sticky-left-side&quot;</span>&gt;</span><br>    .......<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--↓引用方式↓--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;common :: #leftmenu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="三种不同的引用标签属性"><a href="#三种不同的引用标签属性" class="headerlink" title="三种不同的引用标签属性"></a>三种不同的引用标签属性</h4><p>一段这样的代码，已经<del>框起来了</del>，为了方便描述，称它为代码块和标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span><br>  <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>三种标签属性长这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  ...<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>（原标签）<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>（原标签）<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>（原标签）<br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  ...<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>      <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p><code>th:insert</code>：将代码块和标签都放入原标签内</p></li><li><p><code>th:replace</code>：将原标签替代为代码块和标签</p></li><li><p><code>th:include</code>：将代码块放入原标签，不包含标签</p></li></ul><h2 id="六、拦截器"><a href="#六、拦截器" class="headerlink" title="六、拦截器"></a>六、拦截器</h2><p>实现效果：除了登陆页面，其他页面不登录就不能访问</p><ul><li>在Controller中写一个post请求，登陆后访问主页，登陆成功后在session中添加一个User</li></ul><p>​     （目前没有使用数据库，仅做参考用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/submit&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">submit</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> User user,HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>1、编写一个拦截器实现HandlerInterceptor接口<br>2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）<br>3、指定拦截规则（如果是拦截所有，静态资源也会被拦截）</p><h3 id="1、编写拦截器"><a href="#1、编写拦截器" class="headerlink" title="1、编写拦截器"></a>1、编写拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *目标方法执行之前</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//登陆检查逻辑</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-comment">//判断session中是否存在user</span><br>        Object user=session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">if</span>(user !=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//没登陆就重定向到主页 response.sendRedirect(&quot;/&quot;);</span><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;请先登陆&quot;</span>);<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/&quot;</span>).forward(request,response);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *目标方法执行之后</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *页面渲染以后</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、编写配置类"><a href="#2、编写配置类" class="headerlink" title="2、编写配置类"></a>2、编写配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>                        <span class="hljs-comment">//“/**”表示拦截所有请求，包括静态资源，“/*”不拦截静态资源（聪明逼都用这个）</span><br>                        .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                        <span class="hljs-comment">//放行的请求</span><br>                        .excludePathPatterns(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/login.html&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/images/**&quot;</span>,<span class="hljs-string">&quot;/js/**&quot;</span>);<br>        WebMvcConfigurer.<span class="hljs-built_in">super</span>.addInterceptors(registry);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、文件上传"><a href="#七、文件上传" class="headerlink" title="七、文件上传"></a>七、文件上传</h2><p>准备一个用于文件上传的表单</p><ul><li><p>表单的标签属性<code>enctype=&quot;multipart/form-data&quot;</code>将表单设置为文件上传</p></li><li><p>input 的标签属性<code>type=&quot;file&quot;</code>表示上传文件</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/upload&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Name&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;headerImg&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;photos&quot;</span> <span class="hljs-attr">multiple</span> &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Check me out<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在controller中添加相应的方法</p><ul><li>可保存到服务器（<del>目前不会啊，淦</del>）、获得原始的InputStream，这里直接保存到本地的<code>D:\test</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;email&quot;)</span> String email,</span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    log.info(<span class="hljs-string">&quot;上传的信息：email=&#123;&#125;,username=&#123;&#125;,headerImg=&#123;&#125;,photos=&#123;&#125;&quot;</span>,<br>            email,username,headerImg,photos);<br>    <span class="hljs-keyword">if</span>(!headerImg.isEmpty())&#123;<br>       String originalFilename= headerImg.getOriginalFilename();<br>       headerImg.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\test\\&quot;</span>+originalFilename));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(photos.length&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(MultipartFile photo : photos)&#123;<br>            <span class="hljs-keyword">if</span>(!photo.isEmpty())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">originFilename</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>                photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\test\\&quot;</span>+originFilename));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/main&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认的文件上传大小为1MB，请求大小为10MB，修改这两个属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span><br></code></pre></td></tr></table></figure><h2 id="八、自定义错误页面"><a href="#八、自定义错误页面" class="headerlink" title="八、自定义错误页面"></a>八、自定义错误页面</h2><ul><li>默认的浏览器错误页面为WhitLable，机器的请求返回json，如下图</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-14-23-a008e75a5932b78216040c5ddf4d117f-202210172032877-b2c4ca.png" alt="image"></p><p>使用APIPost，添加浏览器的Cookie即可得到错误时返回的json，该方法用于<strong>获取错误信息的属性名</strong></p><ul><li>将<code>4xx.html</code>页面、<code>5xx.html</code>页面放到<code>resources/templates/error</code>目录下</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-14-27-7c38c1c918097537ff921bd5dc85f4cc-202210172032870-0bf9dd.png" alt="image"></p><ul><li>当出现404错误时，会跳转到<code>404.html</code>页面，若<code>404.html</code>页面不存在时，就去找<code>4xx.html</code>页面，如果也不存在就跳转到默认的<code>WhitLable</code>页面</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在Controller的一个页面跳转方法下添加一行int a&#x3D;10&#x2F;0</p><p>自定义内容，让它获取到时间和错误信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container &quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error-wrapper text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/500-error.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>OOOPS!!!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span>Something went wrong.<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back-btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span> Back To Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></td></tr></table></figure><p>登陆成功后跳转到basic_table页面，因为有&#x2F;0 错误，所以属于500错误，我们添加了5xx.html，所以跳转到5xx.html</p><h2 id="九、web原生组件注入（servlet、filter、listener）"><a href="#九、web原生组件注入（servlet、filter、listener）" class="headerlink" title="九、web原生组件注入（servlet、filter、listener）"></a>九、web原生组件注入（servlet、filter、listener）</h2><h3 id="方法一-，使用注解"><a href="#方法一-，使用注解" class="headerlink" title="方法一 ，使用注解"></a>方法一 ，使用注解</h3><p>主配置类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServletComponentScan(basePackages = &quot;com.zhn.thymeleaf&quot;)</span><br></code></pre></td></tr></table></figure><p>web组件添加注解</p><p>@WebServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;666666&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@WebFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;MyFiler初始化完成&quot;</span>);<br>        Filter.<span class="hljs-built_in">super</span>.init(filterConfig);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter工作&quot;</span>);<br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;MyFilter销毁&quot;</span>);<br>        Filter.<span class="hljs-built_in">super</span>.destroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@WebListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlerContextListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;监听到项目初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;监听到项目销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二，使用RegistrationBean"><a href="#方法二，使用RegistrationBean" class="headerlink" title="方法二，使用RegistrationBean"></a>方法二，使用RegistrationBean</h3><p>该方法可用不依赖SpringBoot的框架，直接使用原始的servlet,对老项目有良好的兼容性</p><ul><li>使用与方法一相同的web组件，把@Webxxx 和主配置文件注解删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">myServlet</span><span class="hljs-params">()</span>&#123;<br>        MyServlet servlet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(servlet,<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/my02&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">myFilter</span><span class="hljs-params">()</span>&#123;<br>        MyFilter filter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter</span>();<br><span class="hljs-comment">//        return new FilterRegistrationBean(filter,myServlet());</span><br>        FilterRegistrationBean filterRegistrationBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(filter);<br>        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title function_">myListener</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MyServlerContextListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlerContextListener</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletListenerRegistrationBean</span>(listener);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h1><h2 id="数据源的自动配置-HikariDataSource"><a href="#数据源的自动配置-HikariDataSource" class="headerlink" title="数据源的自动配置-HikariDataSource"></a>数据源的自动配置-<strong>HikariDataSource</strong></h2><p> 配置JDBC</p><ul><li>导入依赖</li><li>springboot会自动配置jdbc、事务、数据源</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>导入驱动</p></li><li><p>springboot不知道要使用哪种数据库、数据库版本，所以驱动要自己选择版本导入<br>官方设置了对应的版本号，并且向下兼容，所以version标签可以不写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>修改配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-string">mysql</span> <span class="hljs-number">8.0</span><span class="hljs-string">之前：</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-string">mysql</span> <span class="hljs-number">8.0</span><span class="hljs-string">之后：</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest</span> &#123;<br>    <span class="hljs-comment">//springboot自带的轻量级持久层工具</span><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span>  <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        Integer cnt=jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select  count(*) from user&quot;</span>,<br>                                                Integer.class);<br>        log.info(<span class="hljs-string">&quot;测试：user表有&#123;&#125;行数据&quot;</span>,cnt);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><p>阿里出品的sql连接池，拿来用就行</p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样的，要引入驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span>  <span class="hljs-string">配置</span> <span class="hljs-string">mapper.xml文件的位置</span><br>  <span class="hljs-string">springboot</span> <span class="hljs-string">自动配置了config</span> <span class="hljs-string">所以不需要设置</span> <span class="hljs-string">config-locations</span> <span class="hljs-string">其他一切配置都可以在主配置文件中设置</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span> <span class="hljs-string">设置驼峰命名</span> <span class="hljs-string">如数据库中key为</span> <span class="hljs-string">u_id</span> <span class="hljs-string">类名就为uId</span><br></code></pre></td></tr></table></figure><p>同样的，需要数据库配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>其他的使用方法与在SSM框架中一样</p><ul><li>似乎mybatis在test目录中无法实现service层的自动注入（待研究</li></ul><h3 id="Mybatis-注解开发"><a href="#Mybatis-注解开发" class="headerlink" title="Mybatis 注解开发"></a>Mybatis 注解开发</h3><p>一般不推荐使用</p><ul><li>写死了SQL语句</li><li>代码和SQL语句耦合在了一起</li><li>不方便维护</li></ul><p>适用于简短的SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CityMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from city where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> City <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>Mybatis 注解加mapper混合使用</p><p>简易的SQL语句用注解，复杂的用mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CityMapper</span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select * from city where id =#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> City <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><p>见另一篇笔记</p><h1 id="单元测试-Junit"><a href="#单元测试-Junit" class="headerlink" title="单元测试 Junit"></a>单元测试 Junit</h1><h2 id="简单的测试注解"><a href="#简单的测试注解" class="headerlink" title="简单的测试注解"></a>简单的测试注解</h2><ul><li><p>**@Test :**表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</p></li><li><p>**@ParameterizedTest :**表示方法是参数化测试，下方会有详细介绍</p></li><li><p>**@RepeatedTest :**表示方法可重复执行，下方会有详细介绍</p></li><li><p>**@DisplayName :**为测试类或者测试方法设置展示名称</p></li><li><p>**@BeforeEach :**表示在每个单元测试之前执行</p></li><li><p>**@AfterEach :**表示在每个单元测试之后执行 （要为静态方法</p></li><li><p>**@BeforeAll :**表示在所有单元测试之前执行（要为静态</p></li><li><p>**@AfterAll :**表示在所有单元测试之后执行</p></li><li><p>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</p></li><li><p>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</p></li><li><p>**@Timeout :**表示测试方法运行如果超过了指定时间将会返回错误</p></li><li><p>**@ExtendWith :**为测试类或测试方法提供扩展类引用</p></li></ul><ul><li><strong>@SpringBootTest：</strong>让测试类可以使用ioc容器</li><li><strong>@Disable:</strong> 暂时禁用</li></ul><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><ul><li>导入全部的静态方法<code> import static org.junit.jupiter.api.Assertions.*;</code></li></ul><p>基本的断言方法</p><table><thead><tr><th>方法</th><th align="left">说明</th></tr></thead><tbody><tr><td>assertEquals</td><td align="left">判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td align="left">判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td align="left">判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td align="left">判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td align="left">判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td align="left">判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td align="left">判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td align="left">判断给定的对象引用是否不为 null</td></tr><tr><td>assertArrayEquals</td><td align="left">方法来判断两个对象或原始类型的数组是否相等</td></tr><tr><td>assertThrows</td><td align="left">判断是否有接受到异常</td></tr><tr><td>assertTimeout</td><td align="left">判断运行是否超时</td></tr><tr><td>fail</td><td align="left">快速失败，相当于break</td></tr><tr><td>assertAll</td><td align="left">组合断言，可运行多个断言</td></tr></tbody></table><p><strong>断言失败了就不会运行下一条断言</strong></p><ul><li>组合断言</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@DisplayName(&quot;组合断言&quot;)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">all</span><span class="hljs-params">()</span>&#123;<br>        assertAll(<span class="hljs-string">&quot;组合断言&quot;</span>,<br>                () -&gt; assertFalse(<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;结果不为false&quot;</span>),<br>                ()-&gt; assertNotEquals(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&quot;结果相同&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>异常断言</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;异常&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">exception</span><span class="hljs-params">()</span>&#123;<br>        assertThrows(ArithmeticException.class,<br>                () -&gt; Integer.valueOf(<span class="hljs-number">10</span>/<span class="hljs-number">2</span>),<span class="hljs-string">&quot;竟然能够运行？？？&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>超时断言</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;超时断言&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">timeOut</span><span class="hljs-params">()</span>&#123;<br>        assertTimeout(Duration.ofMillis(<span class="hljs-number">800</span>),<br>                ()-&gt; Thread.sleep(<span class="hljs-number">1000</span>),<span class="hljs-string">&quot;超时了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>快速失败</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;快速失败&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">fail</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">9</span>,b=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span>(a!=b)&#123;<br>        fail();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前置条件-assumptions"><a href="#前置条件-assumptions" class="headerlink" title="前置条件 assumptions"></a>前置条件 assumptions</h2><p>JUnit5中的前置条件类似于断言，不同之处在于不满足的断言会使测试方法失败，而不满足的前置条件只会让测试方法的执行终止。说人话就是断言会在测试报告你跟你说失败了，前置条件不会跟你说失败了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@DisplayName(&quot;assumption&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">assumption</span><span class="hljs-params">()</span>&#123;<br>    Assumptions.assumeFalse(<span class="hljs-literal">false</span> ,<span class="hljs-string">&quot;你是对的&quot;</span>);<br>    Assumptions.assumeTrue(<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;你错了，你有问题&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h2><p><strong><del>先不管，以下内容为直接复制的</del></strong></p><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;A stack&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestingAStackDemo</span> &#123;<br><br>    Stack&lt;Object&gt; stack;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">isInstantiatedWithNew</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Nested</span><br>    <span class="hljs-meta">@DisplayName(&quot;when new&quot;)</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhenNew</span> &#123;<br><br>        <span class="hljs-meta">@BeforeEach</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNewStack</span><span class="hljs-params">()</span> &#123;<br>            stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;is empty&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            assertTrue(stack.isEmpty());<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPopped</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::pop);<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::peek);<br>        &#125;<br><br>        <span class="hljs-meta">@Nested</span><br>        <span class="hljs-meta">@DisplayName(&quot;after pushing an element&quot;)</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterPushing</span> &#123;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">anElement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;an element&quot;</span>;<br><br>            <span class="hljs-meta">@BeforeEach</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushAnElement</span><span class="hljs-params">()</span> &#123;<br>                stack.push(anElement);<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;it is no longer empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">isNotEmpty</span><span class="hljs-params">()</span> &#123;<br>                assertFalse(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPopped</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.pop());<br>                assertTrue(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.peek());<br>                assertFalse(stack.isEmpty());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><table><thead><tr><th>@ParameterizedTest</th><th>声明这是一个参数测试</th></tr></thead><tbody><tr><td><strong>@ValueSource</strong></td><td>为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</td></tr><tr><td><strong>@NullSource</strong></td><td>表示为参数化测试提供一个null的入参</td></tr><tr><td><strong>@EnumSource</strong></td><td>表示为参数化测试提供一个枚举入参</td></tr><tr><td><strong>@CsvFileSource</strong></td><td>表示读取指定CSV文件内容作为参数化测试入参</td></tr><tr><td><strong>@MethodSource</strong></td><td>表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流,且必须为静态方法)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@DisplayName(&quot;参数测试1&quot;)</span><br><span class="hljs-meta">@ValueSource(ints = &#123;1,2,4,5,5&#125;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterTest</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>    System.out.println(i);<br>&#125;<br><br><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@DisplayName(&quot;参数测试2&quot;)</span><br><span class="hljs-meta">@MethodSource(&quot;somethings&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">PT2</span><span class="hljs-params">(String i)</span>&#123;<br>    System.out.println(i);<br>&#125;<br><br><span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">somethings</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;jj&quot;</span>,<span class="hljs-string">&quot;sadf&quot;</span>,<span class="hljs-string">&quot;asdf&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-Spring注解</title>
      <link href="/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Spring%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Spring%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>来自知乎@java领域佼佼者<a href="https://zhuanlan.zhihu.com/p/135987318">8000字的Spring&#x2F;SpringBoot常用注解总结！安排！ - 知乎 (zhihu.com)</a></p><h1 id="1-SpringBootApplication"><a href="#1-SpringBootApplication" class="headerlink" title="1. @SpringBootApplication"></a><strong>1.</strong> <strong><code>@SpringBootApplication</code></strong></h1><p>这里先单独拎出<code>@SpringBootApplication</code> 注解说一下，虽然我们一般不会主动去使用它。</p><p><em>Guide 哥：这个注解是 Spring Boot 项目的基石，创建 SpringBoot 项目之后会默认在主类加上。</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringSecurityJwtGuideApplication</span> &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(java.lang.String[] args)</span> &#123;<br>        SpringApplication.run(SpringSecurityJwtGuideApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以把 <code>@SpringBootApplication</code>看作是 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.boot.autoconfigure;<br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123;</span><br><span class="hljs-meta">  @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">  @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br>   ......<br>&#125;<br><br><span class="hljs-keyword">package</span> org.springframework.boot;<br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>根据 SpringBoot 官网，这三个注解的作用分别是：</p><ul><li><code>@EnableAutoConfiguration</code>：启用 SpringBoot 的自动配置机制</li><li><code>@ComponentScan</code>： 扫描被<code>@Component</code> (<code>@Service</code>,<code>@Controller</code>)注解的 bean，注解默认会扫描该类所在的包下所有的类。</li><li><code>@Configuration</code>：允许在 Spring 上下文中注册额外的 bean 或导入其他配置类</li></ul><h1 id="2-Spring-Bean-相关"><a href="#2-Spring-Bean-相关" class="headerlink" title="2. Spring Bean 相关"></a><strong>2. Spring Bean 相关</strong></h1><h3 id="2-1-Autowired"><a href="#2-1-Autowired" class="headerlink" title="2.1. @Autowired"></a><strong>2.1.</strong> <strong><code>@Autowired</code></strong></h3><p>自动导入对象到类中，被注入进的类同样要被 Spring 容器管理比如：Service 类注入到 Controller 类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  ......<br>&#125;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> UserService userService;<br>   ......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Component-Repository-Service-Controller"><a href="#2-2-Component-Repository-Service-Controller" class="headerlink" title="2.2. Component,@Repository,@Service, @Controller"></a><strong>2.2.</strong> <strong><code>Component</code>,<code>@Repository</code>,<code>@Service</code>,</strong> <strong><code>@Controller</code></strong></h3><p>我们一般使用 <code>@Autowired</code> 注解让 Spring 容器帮我们自动装配 bean。要想把类标识成可用于 <code>@Autowired</code> 注解自动装配的 bean 的类,可以采用以下注解实现：</p><ul><li><code>@Component</code> ：通用的注解，可标注任意类为 <code>Spring</code> 组件。如果一个 Bean 不知道属于哪个层，可以使用<code>@Component</code> 注解标注。</li><li><code>@Repository</code> : 对应持久层即 Dao 层，主要用于数据库相关操作。</li><li><code>@Service</code> : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</li><li><code>@Controller</code> : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。</li></ul><h3 id="2-3-RestController"><a href="#2-3-RestController" class="headerlink" title="2.3. @RestController"></a><strong>2.3.</strong> <strong><code>@RestController</code></strong></h3><p><code>@RestController</code>注解是<code>@Controller和</code>@<code>ResponseBody</code>的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器。</p><p><em>现在都是前后端分离，说实话我已经很久没有用过<code>@Controller</code>。如果你的项目太老了的话，就当我没说。</em></p><p>单独使用 <code>@Controller</code> 不加 <code>@ResponseBody</code>的话一般使用在要返回一个视图的情况，这种情况属于比较传统的 Spring MVC 的应用，对应于前后端不分离的情况。<code>@Controller</code> +<code>@ResponseBody</code> 返回 JSON 或 XML 形式数据</p><h3 id="2-4-Scope"><a href="#2-4-Scope" class="headerlink" title="2.4. @Scope"></a><strong>2.4.</strong> <strong><code>@Scope</code></strong></h3><p>声明 Spring Bean 的作用域，使用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br><span class="hljs-keyword">public</span> Person <span class="hljs-title function_">personSingleton</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>四种常见的 Spring Bean 的作用域：</strong></p><ul><li>singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。</li><li>prototype : 每次请求都会创建一个新的 bean 实例。</li><li>request : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。</li><li>session : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</li></ul><h3 id="2-5-Configuration"><a href="#2-5-Configuration" class="headerlink" title="2.5. Configuration"></a><strong>2.5.</strong> <strong><code>Configuration</code></strong></h3><p>一般用来声明配置类，可以使用 <code>@Component</code>注解替代，不过使用<code>Configuration</code>注解声明配置类更加语义化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TransferService <span class="hljs-title function_">transferService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransferServiceImpl</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-处理常见的-HTTP-请求类型"><a href="#3-处理常见的-HTTP-请求类型" class="headerlink" title="3. 处理常见的 HTTP 请求类型"></a><strong>3. 处理常见的 HTTP 请求类型</strong></h1><p><strong>5 种常见的请求类型:</strong></p><ul><li><strong>GET</strong> ：请求从服务器获取特定资源。举个例子：<code>GET /users</code>（获取所有学生）</li><li><strong>POST</strong> ：在服务器上创建一个新的资源。举个例子：<code>POST /users</code>（创建学生）</li><li><strong>PUT</strong> ：更新服务器上的资源（客户端提供更新后的整个资源）。举个例子：<code>PUT /users/12</code>（更新编号为 12 的学生）</li><li><strong>DELETE</strong> ：从服务器删除特定的资源。举个例子：<code>DELETE /users/12</code>（删除编号为 12 的学生）</li><li><strong>PATCH</strong> ：更新服务器上的资源（客户端提供更改的属性，可以看做作是部分更新），使用的比较少，这里就不举例子了。</li></ul><h3 id="3-1-GET-请求"><a href="#3-1-GET-请求" class="headerlink" title="3.1. GET 请求"></a><strong>3.1. GET 请求</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;users&quot;)</span>` 等价于`<span class="hljs-meta">@RequestMapping(value=&quot;/users&quot;,method=RequestMethod.GET)</span><br><span class="hljs-meta">@GetMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-keyword">return</span> userRepository.findAll();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-POST-请求"><a href="#3-2-POST-请求" class="headerlink" title="3.2. POST 请求"></a><strong>3.2. POST 请求</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;users&quot;)</span>` 等价于`<span class="hljs-meta">@RequestMapping(value=&quot;/users&quot;,method=RequestMethod.POST)</span><br></code></pre></td></tr></table></figure><p>关于<code>@RequestBody</code>注解的使用，在下面的“前后端传值”这块会讲到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;User&gt; <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> UserCreateRequest userCreateRequest)</span> &#123;<br> <span class="hljs-keyword">return</span> userRespository.save(user);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-PUT-请求"><a href="#3-3-PUT-请求" class="headerlink" title="3.3. PUT 请求"></a><strong>3.3. PUT 请求</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/users/&#123;userId&#125;&quot;)</span>` 等价于`<span class="hljs-meta">@RequestMapping(value=&quot;/users/&#123;userId&#125;&quot;,method=RequestMethod.PUT)</span><br><span class="hljs-meta">@PutMapping(&quot;/users/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;User&gt; <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value = &quot;userId&quot;)</span> Long userId,</span><br><span class="hljs-params">  <span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> UserUpdateRequest userUpdateRequest)</span> &#123;<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-DELETE-请求"><a href="#3-4-DELETE-请求" class="headerlink" title="3.4. DELETE 请求"></a><strong>3.4.</strong> <strong>DELETE 请求</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/users/&#123;userId&#125;&quot;)</span>`等价于`<span class="hljs-meta">@RequestMapping(value=&quot;/users/&#123;userId&#125;&quot;,method=RequestMethod.DELETE)</span><br><span class="hljs-meta">@DeleteMapping(&quot;/users/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value = &quot;userId&quot;)</span> Long userId)</span>&#123;<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-PATCH-请求"><a href="#3-5-PATCH-请求" class="headerlink" title="3.5. PATCH 请求"></a><strong>3.5.</strong> <strong>PATCH 请求</strong></h3><p>一般实际项目中，我们都是 PUT 不够用了之后才用 PATCH 请求去更新数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PatchMapping(&quot;/profile&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title function_">updateStudent</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> StudentUpdateRequest studentUpdateRequest)</span> &#123;<br>      studentRepository.updateDetail(studentUpdateRequest);<br>      <span class="hljs-keyword">return</span> ResponseEntity.ok().build();<br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="4-前后端传值"><a href="#4-前后端传值" class="headerlink" title="4. 前后端传值"></a><strong>4. 前后端传值</strong></h1><p><strong>掌握前后端传值的正确姿势，是你开始 CRUD 的第一步！</strong></p><h3 id="4-1-PathVariable-和-RequestParam"><a href="#4-1-PathVariable-和-RequestParam" class="headerlink" title="4.1. @PathVariable 和 @RequestParam"></a><strong>4.1.</strong> <strong><code>@PathVariable</code></strong> <strong>和</strong> <strong><code>@RequestParam</code></strong></h3><p><code>@PathVariable</code>用于获取路径参数，<code>@RequestParam</code>用于获取查询参数。</p><p>举个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/klasses/&#123;klassId&#125;/teachers&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Teacher&gt; <span class="hljs-title function_">getKlassRelatedTeachers</span><span class="hljs-params">(</span><br><span class="hljs-params">         <span class="hljs-meta">@PathVariable(&quot;klassId&quot;)</span> Long klassId,</span><br><span class="hljs-params">         <span class="hljs-meta">@RequestParam(value = &quot;type&quot;, required = false)</span> String type )</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们请求的 url 是：<code>/klasses/&#123;123456&#125;/teachers?type=web</code></p><p>那么我们服务获取到的数据就是：<code>klassId=123456,type=web</code>。</p><h3 id="4-2-RequestBody-用于传json字符串，切记！大坑！"><a href="#4-2-RequestBody-用于传json字符串，切记！大坑！" class="headerlink" title="4.2. @RequestBody(用于传json字符串，切记！大坑！)"></a><strong>4.2.</strong> <strong><code>@RequestBody</code></strong>(用于传json字符串，切记！大坑！)</h3><p>用于读取 Request 请求（可能是 POST,PUT,DELETE,GET 请求）的 body 部分并且<strong>Content-Type 为 application&#x2F;json</strong> 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上去。系统会使用<code>HttpMessageConverter</code>或者自定义的<code>HttpMessageConverter</code>将请求的 body 中的 <em><strong>json 字符串</strong></em>转换为 java 对象。</p><p>我用一个简单的例子来给演示一下基本使用！</p><p>我们有一个注册的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/sign-up&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title function_">signUp</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> UserRegisterRequest userRegisterRequest)</span> &#123;<br>  userService.save(userRegisterRequest);<br>  <span class="hljs-keyword">return</span> ResponseEntity.ok().build();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserRegisterRequest</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRegisterRequest</span> &#123;<br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@FullName</span><br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String fullName;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发送 post 请求到这个接口，并且 body 携带 JSON 数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;userName&quot;</span>:<span class="hljs-string">&quot;coder&quot;</span>,<span class="hljs-string">&quot;fullName&quot;</span>:<span class="hljs-string">&quot;shuangkou&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>这样我们的后端就可以直接把 json 格式的数据映射到我们的 <code>UserRegisterRequest</code> 类上。</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-15-50-f682c33b24ae723a31e1a8c3fdda3ee5-202210172031867-8e4888.jpeg" alt="img"></p><p>需要注意的是：**一个请求方法只可以有一个<code>@RequestBody</code>，但是可以有多个<code>@RequestParam</code>和<code>@PathVariable</code>**。 如果你的方法必须要用两个 <code>@RequestBody</code>来接受数据的话，大概率是你的数据库设计或者系统设计出问题了！</p><h3 id="4-3-ModelAttribute-（传统的传入对象的方法，不需要转换为json）"><a href="#4-3-ModelAttribute-（传统的传入对象的方法，不需要转换为json）" class="headerlink" title="4.3 **@ModelAttribute **（传统的传入对象的方法，不需要转换为json）"></a>4.3 **<code>@ModelAttribute</code> **（传统的传入对象的方法，不需要转换为json）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@RequestBody</span> 只能接受到json类型的数据（大概）要使用的话前端得处理成json</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@RequestHeader</span>(&quot;Content-Type&quot;) =‘application/x-www-form-urlencoded ’时</span><br><span class="hljs-comment"> * 老老实实用<span class="hljs-doctag">@ModelAttribute</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ModelAttribute</span> 和 <span class="hljs-doctag">@RequestBody</span> 都是用于接收一个类的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/submit&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSubmit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user,</span><br><span class="hljs-params">                       Model model,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestHeader(&quot;Content-Type&quot;)</span> String head)</span>&#123;<br>    System.out.println(user);<br>    System.out.println(<span class="hljs-string">&quot;head&quot;</span>+head);<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-RequestHeader-获取请求头"><a href="#4-5-RequestHeader-获取请求头" class="headerlink" title="4.5 ** @RequestHeader**获取请求头"></a>4.5 **<code> @RequestHeader</code>**获取请求头</h3><ul><li>用于获取各种信息，传入参数的类型、请求类型、浏览器信息等等</li><li>例如<code> Content-Type</code> 用于获取传入参数类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSubmit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user,</span><br><span class="hljs-params">                          Model model,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestHeader(&quot;Content-Type&quot;)</span> String head)</span>&#123;<br>..........<br></code></pre></td></tr></table></figure><h1 id="5-读取配置信息"><a href="#5-读取配置信息" class="headerlink" title="5. 读取配置信息"></a><strong>5. 读取配置信息</strong></h1><p><strong>很多时候我们需要将一些常用的配置信息比如阿里云 oss、发送短信、微信认证的相关配置信息等等放到配置文件中。</strong></p><p><strong>下面我们来看一下 Spring 为我们提供了哪些方式帮助我们从配置文件中读取这些配置信息。</strong></p><p>我们的数据源<code>application.yml</code>内容如下：：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">wuhan2020:</span> <span class="hljs-number">2020</span><span class="hljs-string">年初武汉爆发了新型冠状病毒，疫情严重，但是，我相信一切都会过去！武汉加油！中国加油！</span><br><br><span class="hljs-attr">my-profile:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Guide哥</span><br>  <span class="hljs-attr">email:</span> <span class="hljs-string">koushuangbwcx@163.com</span><br><br><span class="hljs-attr">library:</span><br>  <span class="hljs-attr">location:</span> <span class="hljs-string">湖北武汉加油中国加油</span><br>  <span class="hljs-attr">books:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">天才基本法</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">二十二岁的林朝夕在父亲确诊阿尔茨海默病这天，得知自己暗恋多年的校园男神裴之即将出国深造的消息——对方考取的学校，恰是父亲当年为她放弃的那所。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">时间的秩序</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">为什么我们记得过去，而非未来？时间“流逝”意味着什么？是我们存在于时间之内，还是时间存在于我们之中？卡洛·罗韦利用诗意的文字，邀请我们思考这一亘古难题——时间的本质。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">了不起的我</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">如何养成一个新习惯？如何让心智变得更成熟？如何拥有高质量的关系？</span> <span class="hljs-string">如何走出人生的艰难时刻？</span><br></code></pre></td></tr></table></figure><h3 id="5-1-value-常用"><a href="#5-1-value-常用" class="headerlink" title="5.1. @value(常用)"></a><strong>5.1.</strong> <strong><code>@value</code>(常用)</strong></h3><p>使用 <code>@Value(&quot;$&#123;property&#125;&quot;)</code> 读取比较简单的配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;wuhan2020&#125;&quot;)</span><br>String wuhan2020;<br></code></pre></td></tr></table></figure><h3 id="5-2-ConfigurationProperties-常用"><a href="#5-2-ConfigurationProperties-常用" class="headerlink" title="5.2. @ConfigurationProperties(常用)"></a><strong>5.2.</strong> <strong><code>@ConfigurationProperties</code>(常用)</strong></h3><p>通过<code>@ConfigurationProperties</code>读取配置信息并与 bean 绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;library&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LibraryProperties</span> &#123;<br>    <span class="hljs-meta">@NotEmpty</span><br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> List&lt;Book&gt; books;<br><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@ToString</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>        String name;<br>        String description;<br>    &#125;<br>  省略getter/setter<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p>你可以像使用普通的 Spring bean 一样，将其注入到类中使用。</p><h3 id="5-3-PropertySource（不常用）"><a href="#5-3-PropertySource（不常用）" class="headerlink" title="5.3. PropertySource（不常用）"></a><strong>5.3.</strong> <strong><code>PropertySource</code>（不常用）</strong></h3><p><code>@PropertySource</code>读取指定 properties 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:website.properties&quot;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSite</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>  省略getter/setter<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-参数校验"><a href="#6-参数校验" class="headerlink" title="6. 参数校验"></a><strong>6. 参数校验</strong></h1><p><strong>数据的校验的重要性就不用说了，即使在前端对数据进行校验的情况下，我们还是要对传入后端的数据再进行一遍校验，避免用户绕过浏览器直接通过一些 HTTP 工具直接向后端请求一些违法数据。</strong></p><p><strong>JSR(Java Specification Requests）</strong> 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，这样就可以在需要校验的时候进行校验了，非常方便！</p><p>校验的时候我们实际用的是 <strong>Hibernate Validator</strong> 框架。Hibernate Validator 是 Hibernate 团队最初的数据校验框架，Hibernate Validator 4.x 是 Bean Validation 1.0（JSR 303）的参考实现，Hibernate Validator 5.x 是 Bean Validation 1.1（JSR 349）的参考实现，目前最新版的 Hibernate Validator 6.x 是 Bean Validation 2.0（JSR 380）的参考实现。</p><p>SpringBoot 项目的 spring-boot-starter-web 依赖中已经有 hibernate-validator 包，不需要引用相关依赖。如下图所示（通过 idea 插件—Maven Helper 生成）：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-15-57-0c9b45cdcab46ae2f1e9e1e61b4cfa01-202210172031165-93e26f.jpeg" alt="img"></p><p>非 SpringBoot 项目需要自行引入相关依赖包，这里不多做讲解</p><p>需要注意的是： <strong>所有的注解，推荐使用 JSR 注解，即<code>javax.validation.constraints</code>，而不是<code>org.hibernate.validator.constraints</code></strong></p><h3 id="6-1-一些常用的字段验证的注解"><a href="#6-1-一些常用的字段验证的注解" class="headerlink" title="6.1. 一些常用的字段验证的注解"></a><strong>6.1. 一些常用的字段验证的注解</strong></h3><ul><li><code>@NotEmpty</code> 被注释的字符串的不能为 null 也不能为空</li><li><code>@NotBlank</code> 被注释的字符串非 null，并且必须包含一个非空白字符</li><li><code>@Null</code> 被注释的元素必须为 null</li><li><code>@NotNull</code> 被注释的元素必须不为 null</li><li><code>@AssertTrue</code> 被注释的元素必须为 true</li><li><code>@AssertFalse</code> 被注释的元素必须为 false</li><li><code>@Pattern(regex=,flag=)</code>被注释的元素必须符合指定的正则表达式</li><li><code>@Email</code> 被注释的元素必须是 Email 格式。</li><li><code>@Min(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li><code>@Max(value)</code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li><code>@DecimalMin(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li><code>@DecimalMax(value)</code> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li><code>@Size(max=, min=)</code>被注释的元素的大小必须在指定的范围内</li><li><code>@Digits (integer, fraction)</code>被注释的元素必须是一个数字，其值必须在可接受的范围内</li><li><code>@Past</code>被注释的元素必须是一个过去的日期</li><li><code>@Future</code> 被注释的元素必须是一个将来的日期</li><li>……</li></ul><h3 id="6-2-验证请求体-RequestBody"><a href="#6-2-验证请求体-RequestBody" class="headerlink" title="6.2. 验证请求体(RequestBody)"></a><strong>6.2. 验证请求体(RequestBody)</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-meta">@NotNull(message = &quot;classId 不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String classId;<br><br>    <span class="hljs-meta">@Size(max = 33)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;name 不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Pattern(regexp = &quot;((^Man$|^Woman$|^UGM$))&quot;, message = &quot;sex 值不在可选范围&quot;)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;sex 不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-meta">@Email(message = &quot;email 格式不正确&quot;)</span><br>    <span class="hljs-meta">@NotNull(message = &quot;email 不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们在需要验证的参数上加上了<code>@Valid</code>注解，如果验证失败，它将抛出<code>MethodArgumentNotValidException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/person&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Person&gt; <span class="hljs-title function_">getPerson</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> Person person)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok().body(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-验证请求参数-Path-Variables-和-Request-Parameters"><a href="#6-3-验证请求参数-Path-Variables-和-Request-Parameters" class="headerlink" title="6.3. 验证请求参数(Path Variables 和 Request Parameters)"></a><strong>6.3. 验证请求参数(Path Variables 和 Request Parameters)</strong></h3><p><strong>一定一定不要忘记在类上加上</strong> <strong><code>Validated</code></strong> <strong>注解了，这个参数可以告诉 Spring 去校验方法参数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api&quot;)</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/person/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Integer&gt; <span class="hljs-title function_">getPersonByID</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-meta">@Max(value = 5,message = &quot;超过 id 的范围了&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok().body(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-全局处理-Controller-层异常"><a href="#7-全局处理-Controller-层异常" class="headerlink" title="7. 全局处理 Controller 层异常"></a><strong>7. 全局处理 Controller 层异常</strong></h1><p>介绍一下我们 Spring 项目必备的全局处理 Controller 层异常。</p><p><strong>相关注解：</strong></p><ol><li><code>@ControllerAdvice</code> :注解定义全局异常处理类</li><li><code>@ExceptionHandler</code> :注解声明异常处理方法</li></ol><p>如何使用呢？拿我们在第 5 节参数校验这块来举例子。如果方法参数不对的话就会抛出<code>MethodArgumentNotValidException</code>，我们来处理这个异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求参数异常处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;?&gt; handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, HttpServletRequest request) &#123;<br>       ......<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8-JPA-相关"><a href="#8-JPA-相关" class="headerlink" title="8. JPA 相关"></a><strong>8. JPA 相关</strong></h1><h3 id="8-1-创建表"><a href="#8-1-创建表" class="headerlink" title="8.1. 创建表"></a><strong>8.1. 创建表</strong></h3><p><code>@Entity</code>声明一个类对应一个数据库实体。</p><p><code>@Table</code> 设置表明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;role&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String description;<br>    省略getter/setter......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-创建主键"><a href="#8-2-创建主键" class="headerlink" title="8.2. 创建主键"></a><strong>8.2. 创建主键</strong></h3><p><code>@Id</code> ：声明一个字段为主键。</p><p>使用<code>@Id</code>声明之后，我们还需要定义主键的生成策略。我们可以使用 <code>@GeneratedValue</code> 指定主键生成策略。</p><p><strong>1.通过</strong> <strong><code>@GeneratedValue</code>直接使用 JPA 内置提供的四种主键生成策略来指定主键生成策略。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Id</span><br><span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>JPA 使用枚举定义了 4 中常见的主键生成策略，如下：</p><p><em>枚举替代常量的一种用法</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">GenerationType</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用一个特定的数据库表格来保存主键</span><br><span class="hljs-comment">     * 持久化引擎通过关系数据库的一张特定的表格来生成主键,</span><br><span class="hljs-comment">     */</span><br>    TABLE,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *在某些数据库中,不支持主键自增长,比如Oracle、PostgreSQL其提供了一种叫做&quot;序列(sequence)&quot;的机制生成主键</span><br><span class="hljs-comment">     */</span><br>    SEQUENCE,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键自增长</span><br><span class="hljs-comment">     */</span><br>    IDENTITY,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *把主键生成策略交给持久化引擎(persistence engine),</span><br><span class="hljs-comment">     *持久化引擎会根据数据库在以上三种主键生成 策略中选择其中一种</span><br><span class="hljs-comment">     */</span><br>    AUTO<br>&#125;<br><span class="hljs-meta">@GeneratedValue</span>`注解默认使用的策略是`GenerationType.AUTO<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> GeneratedValue &#123;<br><br>    GenerationType <span class="hljs-title function_">strategy</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> AUTO;<br>    String <span class="hljs-title function_">generator</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般使用 MySQL 数据库的话，使用<code>GenerationType.IDENTITY</code>策略比较普遍一点（分布式系统的话需要另外考虑使用分布式 ID）。</p><p><strong>2.通过</strong> <strong><code>@GenericGenerator</code>声明一个主键策略，然后</strong> <strong><code>@GeneratedValue</code>使用这个策略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Id</span><br><span class="hljs-meta">@GeneratedValue(generator = &quot;IdentityIdGenerator&quot;)</span><br><span class="hljs-meta">@GenericGenerator(name = &quot;IdentityIdGenerator&quot;, strategy = &quot;identity&quot;)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Id</span><br><span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>jpa 提供的主键生成策略有如下几种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultIdentifierGeneratorFactory</span><br>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MutableIdentifierGeneratorFactory</span>, Serializable, ServiceRegistryAwareService &#123;<br><br> <span class="hljs-meta">@SuppressWarnings(&quot;deprecation&quot;)</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultIdentifierGeneratorFactory</span><span class="hljs-params">()</span> &#123;<br>  register( <span class="hljs-string">&quot;uuid2&quot;</span>, UUIDGenerator.class );<br>  register( <span class="hljs-string">&quot;guid&quot;</span>, GUIDGenerator.class );   <span class="hljs-comment">// can be done with UUIDGenerator + strategy</span><br>  register( <span class="hljs-string">&quot;uuid&quot;</span>, UUIDHexGenerator.class );   <span class="hljs-comment">// &quot;deprecated&quot; for new use</span><br>  register( <span class="hljs-string">&quot;uuid.hex&quot;</span>, UUIDHexGenerator.class );  <span class="hljs-comment">// uuid.hex is deprecated</span><br>  register( <span class="hljs-string">&quot;assigned&quot;</span>, Assigned.class );<br>  register( <span class="hljs-string">&quot;identity&quot;</span>, IdentityGenerator.class );<br>  register( <span class="hljs-string">&quot;select&quot;</span>, SelectGenerator.class );<br>  register( <span class="hljs-string">&quot;sequence&quot;</span>, SequenceStyleGenerator.class );<br>  register( <span class="hljs-string">&quot;seqhilo&quot;</span>, SequenceHiLoGenerator.class );<br>  register( <span class="hljs-string">&quot;increment&quot;</span>, IncrementGenerator.class );<br>  register( <span class="hljs-string">&quot;foreign&quot;</span>, ForeignGenerator.class );<br>  register( <span class="hljs-string">&quot;sequence-identity&quot;</span>, SequenceIdentityGenerator.class );<br>  register( <span class="hljs-string">&quot;enhanced-sequence&quot;</span>, SequenceStyleGenerator.class );<br>  register( <span class="hljs-string">&quot;enhanced-table&quot;</span>, TableGenerator.class );<br> &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String strategy, Class generatorClass)</span> &#123;<br>  LOG.debugf( <span class="hljs-string">&quot;Registering IdentifierGenerator strategy [%s] -&gt; [%s]&quot;</span>, strategy, generatorClass.getName() );<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">previous</span> <span class="hljs-operator">=</span> generatorStrategyToClassNameMap.put( strategy, generatorClass );<br>  <span class="hljs-keyword">if</span> ( previous != <span class="hljs-literal">null</span> ) &#123;<br>   LOG.debugf( <span class="hljs-string">&quot;    - overriding [%s]&quot;</span>, previous.getName() );<br>  &#125;<br> &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-设置字段类型"><a href="#8-3-设置字段类型" class="headerlink" title="8.3. 设置字段类型"></a><strong>8.3. 设置字段类型</strong></h3><p><code>@Column</code> 声明字段。</p><p><strong>示例：</strong></p><p>设置属性 userName 对应的数据库字段名为 user_name，长度为 32，非空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Column(name = &quot;user_name&quot;, nullable = false, length=32)</span><br><span class="hljs-keyword">private</span> String userName;<br></code></pre></td></tr></table></figure><p>设置字段类型并且加默认值，这个还是挺常用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Column(columnDefinition = <span class="hljs-string">&quot;tinyint(1) default 1&quot;</span>)<br><span class="hljs-keyword">private</span> Boolean enabled;<br></code></pre></td></tr></table></figure><h3 id="8-4-指定不持久化特定字段"><a href="#8-4-指定不持久化特定字段" class="headerlink" title="8.4. 指定不持久化特定字段"></a><strong>8.4. 指定不持久化特定字段</strong></h3><p><code>@Transient</code> ：声明不需要与数据库映射的字段，在保存的时候不需要保存进数据库 。</p><p>如果我们想让<code>secrect</code> 这个字段不被持久化，可以使用 <code>@Transient</code>关键字声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Entity(name=<span class="hljs-string">&quot;USER&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    ......<br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> String secrect; <span class="hljs-comment">// not persistent because of @Transient</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>除了 <code>@Transient</code>关键字声明， 还可以采用下面几种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> String secrect; <span class="hljs-comment">// not persistent because of static</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">secrect</span> <span class="hljs-operator">=</span> “Satish”; <span class="hljs-comment">// not persistent because of final</span><br><span class="hljs-keyword">transient</span> String secrect; <span class="hljs-comment">// not persistent because of transient</span><br></code></pre></td></tr></table></figure><p>一般使用注解的方式比较多。</p><h3 id="8-5-声明大字段"><a href="#8-5-声明大字段" class="headerlink" title="8.5. 声明大字段"></a><strong>8.5. 声明大字段</strong></h3><p><code>@Lob</code>:声明某个字段为大字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Lob</span><br><span class="hljs-keyword">private</span> String content;<br></code></pre></td></tr></table></figure><p>更详细的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Lob</span><br><span class="hljs-comment">//指定 Lob 类型数据的获取策略， FetchType.EAGER 表示非延迟 加载，而 FetchType. LAZY 表示延迟加载 ；</span><br><span class="hljs-meta">@Basic(fetch = FetchType.EAGER)</span><br><span class="hljs-comment">//columnDefinition 属性指定数据表对应的 Lob 字段类型</span><br><span class="hljs-meta">@Column(name = &quot;content&quot;, columnDefinition = &quot;LONGTEXT NOT NULL&quot;)</span><br><span class="hljs-keyword">private</span> String content;<br></code></pre></td></tr></table></figure><h3 id="8-6-创建枚举类型的字段"><a href="#8-6-创建枚举类型的字段" class="headerlink" title="8.6. 创建枚举类型的字段"></a><strong>8.6. 创建枚举类型的字段</strong></h3><p>可以使用枚举类型的字段，不过枚举字段要用<code>@Enumerated</code>注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span> &#123;<br>    MALE(<span class="hljs-string">&quot;男性&quot;</span>),<br>    FEMALE(<span class="hljs-string">&quot;女性&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String value;<br>    Gender(String str)&#123;<br>        value=str;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;role&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-meta">@Enumerated(EnumType.STRING)</span><br>    <span class="hljs-keyword">private</span> Gender gender;<br>    省略getter/setter......<br>&#125;<br></code></pre></td></tr></table></figure><p>数据库里面对应存储的是 MAIL&#x2F;FEMAIL。</p><h3 id="8-7-增加审计功能"><a href="#8-7-增加审计功能" class="headerlink" title="8.7. 增加审计功能"></a><strong>8.7. 增加审计功能</strong></h3><p>只要继承了 <code>AbstractAuditBase</code>的类都会默认加上下面四个字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@MappedSuperclass</span><br><span class="hljs-meta">@EntityListeners(value = AuditingEntityListener.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAuditBase</span> &#123;<br><br>    <span class="hljs-meta">@CreatedDate</span><br>    <span class="hljs-meta">@Column(updatable = false)</span><br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> Instant createdAt;<br><br>    <span class="hljs-meta">@LastModifiedDate</span><br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> Instant updatedAt;<br><br>    <span class="hljs-meta">@CreatedBy</span><br>    <span class="hljs-meta">@Column(updatable = false)</span><br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> String createdBy;<br><br>    <span class="hljs-meta">@LastModifiedBy</span><br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> String updatedBy;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们对应的审计功能对应地配置类可能是下面这样的（Spring Security 项目）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableJpaAuditing</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuditSecurityConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    AuditorAware&lt;String&gt; <span class="hljs-title function_">auditorAware</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> () -&gt; Optional.ofNullable(SecurityContextHolder.getContext())<br>                .map(SecurityContext::getAuthentication)<br>                .filter(Authentication::isAuthenticated)<br>                .map(Authentication::getName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单介绍一下上面设计到的一些注解：</p><ol><li><code>@CreatedDate</code>: 表示该字段为创建时间时间字段，在这个实体被 insert 的时候，会设置值</li><li><code>@CreatedBy</code> :表示该字段为创建人，在这个实体被 insert 的时候，会设置值<br><code>@LastModifiedDate</code>、<code>@LastModifiedBy</code>同理。</li></ol><p><code>@EnableJpaAuditing</code>：开启 JPA 审计功能。</p><h3 id="8-8-删除-修改数据"><a href="#8-8-删除-修改数据" class="headerlink" title="8.8. 删除&#x2F;修改数据"></a><strong>8.8. 删除&#x2F;修改数据</strong></h3><p><code>@Modifying</code> 注解提示 JPA 该操作是修改操作,注意还要配合<code>@Transactional</code>注解使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Integer&gt; &#123;<br><br>    <span class="hljs-meta">@Modifying</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByUserName</span><span class="hljs-params">(String userName)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-9-关联关系"><a href="#8-9-关联关系" class="headerlink" title="8.9. 关联关系"></a><strong>8.9. 关联关系</strong></h3><ul><li><code>@OneToOne</code> 声明一对一关系</li><li><code>@OneToMany</code> 声明一对多关系</li><li><code>@ManyToOne</code>声明多对一关系</li><li><code>MangToMang</code>声明多对多关系</li></ul><h1 id="9-事务-Transactional"><a href="#9-事务-Transactional" class="headerlink" title="9. 事务 @Transactional"></a><strong>9. 事务</strong> <strong><code>@Transactional</code></strong></h1><p>在要开启事务的方法上使用<code>@Transactional</code>注解即可!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p>我们知道 Exception 分为运行时异常 RuntimeException 和非运行时异常。在<code>@Transactional</code>注解中如果不配置<code>rollbackFor</code>属性,那么事物只会在遇到<code>RuntimeException</code>的时候才会回滚,加上<code>rollbackFor=Exception.class</code>,可以让事物在遇到非运行时异常时也回滚。</p><p><code>@Transactional</code> 注解一般用在可以作用在<code>类</code>或者<code>方法</code>上。</p><ul><li><strong>作用于类</strong>：当把<code>@Transactional 注解放在类上时，表示所有该类的</code>public 方法都配置相同的事务属性信息。</li><li><strong>作用于方法</strong>：当类配置了<code>@Transactional</code>，方法也配置了<code>@Transactional</code>，方法的事务会覆盖类的事务配置信息。</li></ul><h1 id="10-json-数据处理"><a href="#10-json-数据处理" class="headerlink" title="10. json 数据处理"></a><strong>10. json 数据处理</strong></h1><h3 id="10-1-过滤-json-数据"><a href="#10-1-过滤-json-数据" class="headerlink" title="10.1. 过滤 json 数据"></a><strong>10.1. 过滤 json 数据</strong></h3><p><strong><code>@JsonIgnoreProperties</code></strong> <strong>作用在类上用于过滤掉特定字段不返回或者不解析。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//生成json时将userRoles属性过滤</span><br><span class="hljs-meta">@JsonIgnoreProperties(&#123;&quot;userRoles&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String fullName;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> List&lt;UserRole&gt; userRoles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>@JsonIgnore</code>一般用于类的属性上，作用和上面的<code>@JsonIgnoreProperties</code></strong> <strong>一样。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String fullName;<br>    <span class="hljs-keyword">private</span> String password;<br>   <span class="hljs-comment">//生成json时将userRoles属性过滤</span><br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> List&lt;UserRole&gt; userRoles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-2-格式化-json-数据"><a href="#10-2-格式化-json-数据" class="headerlink" title="10.2. 格式化 json 数据"></a><strong>10.2. 格式化 json 数据</strong></h3><p><code>@JsonFormat</code>一般用来格式化 json 数据。：</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(shape=JsonFormat.Shape.STRING, pattern=&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS&#x27;Z&#x27;&quot;, timezone=&quot;GMT&quot;)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure><h3 id="10-3-扁平化对象"><a href="#10-3-扁平化对象" class="headerlink" title="10.3. 扁平化对象"></a><strong>10.3. 扁平化对象</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-meta">@JsonUnwrapped</span><br>    <span class="hljs-keyword">private</span> Location location;<br>    <span class="hljs-meta">@JsonUnwrapped</span><br>    <span class="hljs-keyword">private</span> PersonInfo personInfo;<br><br>  <span class="hljs-meta">@Getter</span><br>  <span class="hljs-meta">@Setter</span><br>  <span class="hljs-meta">@ToString</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Location</span> &#123;<br>     <span class="hljs-keyword">private</span> String provinceName;<br>     <span class="hljs-keyword">private</span> String countyName;<br>  &#125;<br>  <span class="hljs-meta">@Getter</span><br>  <span class="hljs-meta">@Setter</span><br>  <span class="hljs-meta">@ToString</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonInfo</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String fullName;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>未扁平化之前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;location&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;provinceName&quot;</span>:<span class="hljs-string">&quot;湖北&quot;</span>,<br>        <span class="hljs-string">&quot;countyName&quot;</span>:<span class="hljs-string">&quot;武汉&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;personInfo&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;userName&quot;</span>: <span class="hljs-string">&quot;coder1234&quot;</span>,<br>        <span class="hljs-string">&quot;fullName&quot;</span>: <span class="hljs-string">&quot;shaungkou&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>@JsonUnwrapped</code> 扁平对象之后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-meta">@JsonUnwrapped</span><br>    <span class="hljs-keyword">private</span> Location location;<br>    <span class="hljs-meta">@JsonUnwrapped</span><br>    <span class="hljs-keyword">private</span> PersonInfo personInfo;<br>    ......<br>&#125;<br><br>&#123;<br>  <span class="hljs-string">&quot;provinceName&quot;</span>:<span class="hljs-string">&quot;湖北&quot;</span>,<br>  <span class="hljs-string">&quot;countyName&quot;</span>:<span class="hljs-string">&quot;武汉&quot;</span>,<br>  <span class="hljs-string">&quot;userName&quot;</span>: <span class="hljs-string">&quot;coder1234&quot;</span>,<br>  <span class="hljs-string">&quot;fullName&quot;</span>: <span class="hljs-string">&quot;shaungkou&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11-测试相关"><a href="#11-测试相关" class="headerlink" title="11. 测试相关"></a><strong>11. 测试相关</strong></h1><p><strong><code>@ActiveProfiles</code>一般作用于测试类上， 用于声明生效的 Spring 配置文件。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(webEnvironment = RANDOM_PORT)</span><br><span class="hljs-meta">@ActiveProfiles(&quot;test&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBase</span> &#123;<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>@Test</code>声明一个方法为测试方法</strong></p><p><strong><code>@Transactional</code>被声明的测试方法的数据会回滚，避免污染测试数据。</strong></p><p><strong><code>@WithMockUser</code></strong> <strong>Spring Security 提供的，用来模拟一个真实用户，并且可以赋予权限。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Test</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@WithMockUser(username = &quot;user-id-18163138155&quot;, authorities = &quot;ROLE_TEACHER&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">should_import_student_success</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-Mybatis-Plus</title>
      <link href="/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Mybatis-Plus/"/>
      <url>/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Mybatis-Plus/</url>
      
        <content type="html"><![CDATA[<h1 id="一、快速开始"><a href="#一、快速开始" class="headerlink" title="一、快速开始"></a>一、快速开始</h1><p>中文官网：<a href="https://baomidou.com/">MyBatis-Plus (baomidou.com)</a></p><ol><li><p>搭建基础的springboot项目，不要勾选mybatis，会与mbp冲突。</p></li><li><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>application中配置mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;cn.zhn.mbpboot.mapper&quot;)</span><span class="hljs-comment">//mapper接口所在的包路径</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YourApplication</span>&#123;<br>    ....<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>开启日志功能，打印查询时所用的语句</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="hljs-comment">#添加日志功能，可查看mbp查询时所执行的语句和结果</span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>创建实体类</p><ul><li>创建的实体类必须包含id字段，且id字段的类型为Long</li><li>实体类加上<code>@TabelName()</code>注解，填入在数据库中对应的表名</li><li>实体类属性都要用包装类</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@TableName(&quot;tb_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在对应的mapper文件夹中创建mapper接口，接口需要继承BaseMapper<T>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以开始使用</p></li></ol><h1 id="二、Mapper实现基本的CRUD-不涉及条件构造器"><a href="#二、Mapper实现基本的CRUD-不涉及条件构造器" class="headerlink" title="二、Mapper实现基本的CRUD(不涉及条件构造器)"></a>二、Mapper实现基本的CRUD(不涉及条件构造器)</h1><h2 id="BaseMapper-查询"><a href="#BaseMapper-查询" class="headerlink" title="BaseMapper 查询"></a>BaseMapper 查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectList</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//查询全部</span><br>       <span class="hljs-comment">// SELECT id,user_name,password,name,age,email FROM tb_user</span><br>        List&lt;User&gt; list = userMapper.selectList(<span class="hljs-literal">null</span>);<br>       <span class="hljs-keyword">for</span> (User user:<br>            list) &#123;<br>           System.out.println(user);<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectById</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//根据ID查找用户</span><br>       <span class="hljs-comment">//SELECT id,user_name,password,name,age,email FROM tb_user WHERE id=?</span><br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectBatchIds</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//根据多个id查询用户</span><br>       <span class="hljs-comment">//SELECT id,user_name,password,name,age,email FROM tb_user WHERE id IN ( ? , ? )</span><br>       List&lt;Long&gt; list=Arrays.asList(<span class="hljs-number">1L</span>,<span class="hljs-number">2L</span>);<br>       List&lt;User&gt; userlist=userMapper.selectBatchIds(list);<br>       userlist.forEach(System.out::println);<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectByMap</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">//根据多个条件查询用户</span><br>       <span class="hljs-comment">//SELECT id,user_name,password,name,age,email FROM tb_user WHERE name = ? AND age = ?</span><br>       Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>       map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>       map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br>        List&lt;User&gt; userList = userMapper.selectByMap(map);<br>        userList.forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="BaseMapper插入"><a href="#BaseMapper插入" class="headerlink" title="BaseMapper插入"></a>BaseMapper插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>      user.setAge(<span class="hljs-number">12</span>);<br>      user.setEmail(<span class="hljs-string">&quot;123323412@gmail.com&quot;</span>);<br>      user.setName(<span class="hljs-string">&quot;haonan&quot;</span>);<br>      user.setPassword(<span class="hljs-string">&quot;jdfifskdjfisd&quot;</span>);<br>      user.setUserName(<span class="hljs-string">&quot;nange&quot;</span>);<br><br>      <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insert(user);<br>        System.out.println(<span class="hljs-string">&quot;id &quot;</span>+user.getId());<span class="hljs-comment">//因为自动调用了雪花算法，自动生成了唯一的id，所以表要有id且为long类型</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="BaseMapper-删除"><a href="#BaseMapper-删除" class="headerlink" title="BaseMapper 删除"></a>BaseMapper 删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">DeleteById</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//通过id删除,记得加L，因为是long类型</span><br>        <span class="hljs-comment">//DELETE FROM tb_user WHERE id=?</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.deleteById(<span class="hljs-number">1544994404580724738L</span>);<br>        System.out.println(result);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">DeleteByMapper</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//通过一组条件删除</span><br>      <span class="hljs-comment">//Preparing: DELETE FROM tb_user WHERE user_name = ? AND age = ?</span><br>      <span class="hljs-comment">//Parameters: 张三(String), 20(Integer)</span><br>      Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>      map.put(<span class="hljs-string">&quot;user_name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>      map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>);<br>      <span class="hljs-type">int</span> <span class="hljs-variable">resule</span> <span class="hljs-operator">=</span> userMapper.deleteByMap(map);<br>        System.out.println(resule);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteBatchIds</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-comment">//通过多个id批量删除</span><br>        <span class="hljs-comment">//DELETE FROM tb_user WHERE id IN ( ? , ? , ? )</span><br>        List&lt;Long&gt; idlist = Arrays.asList(<span class="hljs-number">1L</span>,<span class="hljs-number">2L</span>,<span class="hljs-number">3L</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.deleteBatchIds(idlist);<br>        System.out.println(result);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="BaseMapper-更新"><a href="#BaseMapper-更新" class="headerlink" title="BaseMapper 更新"></a>BaseMapper 更新</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateById</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-comment">//通过id更新信息</span><br>   <span class="hljs-comment">//UPDATE tb_user SET name=?, age=? WHERE id=?</span><br>   <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>  user.setId(<span class="hljs-number">4L</span>);<br>  user.setName(<span class="hljs-string">&quot;pan&quot;</span>);<br>  user.setAge(<span class="hljs-number">16</span>);<br> <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span>  userMapper.updateById(user);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义功能"><a href="#自定义功能" class="headerlink" title="自定义功能"></a>自定义功能</h2><p>当BaseMapper的基础功能不满足需求时（如多表联查），可自定义mapper的方法（与mabatis使用方法一样，mbp只做了加法，未修改）</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-13-16-5f93266f385961f79c45dc6658d995c3-202210172025967-363489.png" alt="image-20220707224731154"></p><p>报错则大概率为没配置mapper-location</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 日志</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">delFlag</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span> <span class="hljs-comment">#主键生成策略</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">sg_</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">cn.zhn.framework.pojo</span> <span class="hljs-comment">#别名实体类</span><br>  <span class="hljs-attr">type-enums-package:</span> <span class="hljs-string">cn.zhn.framework.enums</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:/mapper/**/*.xml</span> <span class="hljs-string">//就是这一条</span><br>  <br></code></pre></td></tr></table></figure><p>默认值为<code>mapper-locations: classpath*:/mapper/**/*.xml</code></p><ul><li>我这边遇到的问题是<code>mapper-locations not fond</code>，正确配置之后mbp可以使用返回值为Map的接口（不愧为mybatis的增强版）</li></ul><p>UserMapper.class：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>     Map&lt;String,Object&gt; <span class="hljs-title function_">selectGetMap</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectGetMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Long&quot;</span>&gt;</span><br>    SELECT user_name,password,name,age,email FROM tb_user<br>    WHERE id= #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-13-19-12ca6cf628e23fd7bc475b04522ae77b-202210172029316-e2383b.png" alt="image-20220707225230814"></p><h1 id="三、通用Service接口"><a href="#三、通用Service接口" class="headerlink" title="三、通用Service接口"></a>三、通用Service接口</h1><p>mbp的Service使用的方法<a href="https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3">CRUD 接口 | MyBatis-Plus (baomidou.com)</a></p><p>UserService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-Cloud组件</title>
      <link href="/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Cloud%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/09/17/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Cloud%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="时间紧凑，只做应用的笔记"><a href="#时间紧凑，只做应用的笔记" class="headerlink" title="时间紧凑，只做应用的笔记"></a>时间紧凑，只做应用的笔记</h1><h1 id="Boot发送HTTP请求"><a href="#Boot发送HTTP请求" class="headerlink" title="Boot发送HTTP请求"></a>Boot发送HTTP请求</h1><p>配置类或者启动类引入并注册RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br> &#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br>    <span class="hljs-comment">//2.1发送http请求</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8081/user/&quot;</span>+order.getUserId();<br>    <span class="hljs-comment">//2.2获取user对象</span><br>    <span class="hljs-comment">//本来得到的json对象，这种方式自动反序列化为user类</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, User.class);<br>    <span class="hljs-comment">//3 封装user对象</span><br>    order.setUser(user);<br>    <span class="hljs-comment">// 4.返回</span><br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h1><h2 id="一、serve端"><a href="#一、serve端" class="headerlink" title="一、serve端"></a>一、serve端</h2><h3 id="1、新建Eureka服务模块"><a href="#1、新建Eureka服务模块" class="headerlink" title="1、新建Eureka服务模块"></a>1、新建Eureka服务模块</h3><h3 id="2、引入依赖"><a href="#2、引入依赖" class="headerlink" title="2、引入依赖"></a>2、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、注册服务"><a href="#3、注册服务" class="headerlink" title="3、注册服务"></a>3、注册服务</h3><p>application.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-serve</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:10086/eureka</span><br></code></pre></td></tr></table></figure><h3 id="4、运行结果"><a href="#4、运行结果" class="headerlink" title="4、运行结果"></a>4、运行结果</h3><p>这里是已经完成服务注册了</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-13-f3e56291945c98aa4c4f7eb62fb5b0cf-202210172020671-87e46f.png" alt="image-20220727154723653"></p><h2 id="二、客户端"><a href="#二、客户端" class="headerlink" title="二、客户端"></a>二、客户端</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><h3 id="3、idea多个启动实例"><a href="#3、idea多个启动实例" class="headerlink" title="3、idea多个启动实例"></a>3、idea多个启动实例</h3><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-18-3bcf325af658b6c7adffc20fc81596ea-202210172020830-5b0f3b.png" alt="image-20220727155122128"></p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-21-0b05d98aa7e1e5e523dccd2302b5f2fe-202210172020035-b3095b.png" alt="image-20220727155143306"></p><h3 id="4、RsetTemplete启动负载均衡"><a href="#4、RsetTemplete启动负载均衡" class="headerlink" title="4、RsetTemplete启动负载均衡"></a>4、RsetTemplete启动负载均衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//启动负载均衡</span><br>    RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改RestTemplate的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.1发送http请求</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://userservice/user/&quot;</span>+order.getUserId();<br></code></pre></td></tr></table></figure><p>自动实现了负载均衡</p><h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><p>启动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//启动负载均衡</span><br>    RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p>默认使用轮询的负载均衡策略</p><h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span> <span class="hljs-comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">clients:</span> <span class="hljs-string">userservice</span><br></code></pre></td></tr></table></figure><h1 id="nacos注册中心"><a href="#nacos注册中心" class="headerlink" title="nacos注册中心"></a>nacos注册中心</h1><p>windows启动：</p><p>bin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">startup.cmd -m standalone<br></code></pre></td></tr></table></figure><p>默认网站：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><h2 id="微服务依赖"><a href="#微服务依赖" class="headerlink" title="微服务依赖"></a>微服务依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="服务注册到nacos"><a href="#服务注册到nacos" class="headerlink" title="服务注册到nacos"></a>服务注册到nacos</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br></code></pre></td></tr></table></figure><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure><h2 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-27-6786d07fcbbe27145db6c5af11b2a0ac-202210172021192-72393e.png" alt="image-20220728141210777"></p><p>权重越低被访问的概率就越低，可用于服务维护或升级</p><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p><h2 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-31-1d8fe0f32221891ef14f386a0255fa1d-202210172021551-c7573b.png" alt="image-20220728141406852"></p><p>可在nacos的网页修改</p><h3 id="给微服务配置namespace"><a href="#给微服务配置namespace" class="headerlink" title="给微服务配置namespace"></a>给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="hljs-comment"># 命名空间，填ID</span><br></code></pre></td></tr></table></figure><h2 id="配置永久实例"><a href="#配置永久实例" class="headerlink" title="配置永久实例"></a>配置永久实例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">ephemeral:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 设置为非临时实例</span><br></code></pre></td></tr></table></figure><h2 id="nacos-和-eureka的区别"><a href="#nacos-和-eureka的区别" class="headerlink" title="nacos 和 eureka的区别"></a>nacos 和 eureka的区别</h2><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h1 id="nacos配置中心"><a href="#nacos配置中心" class="headerlink" title="nacos配置中心"></a>nacos配置中心</h1><p>将一些需要频繁修改的配置让nacos管理</p><h2 id="1、nacos添加配置文件"><a href="#1、nacos添加配置文件" class="headerlink" title="1、nacos添加配置文件"></a>1、nacos添加配置文件</h2><p>添加配置文件：userservice-dev.yaml</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-37-dc898098fb9a69c90d6241c2ab9a907a-202210172021577-f2ec1d.png" alt="image-20220728145705576"></p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-41-8afbfed3604d9acee48093264ff4ba22-202210172021326-cc3c68.png" alt="image-20220728145724698"></p><h2 id="2、微服务添加依赖"><a href="#2、微服务添加依赖" class="headerlink" title="2、微服务添加依赖"></a>2、微服务添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos配置管理依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、添加bootstrap-yml文件"><a href="#3、添加bootstrap-yml文件" class="headerlink" title="3、添加bootstrap.yml文件"></a>3、添加bootstrap.yml文件</h2><p>该文件和application在同一目录，优先级大于application</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-45-00d6b8b2d434ebf86225e9d7ae82b96b-202210172021034-1da7c4.png" alt="img"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#开发环境，这里是dev </span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># Nacos地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-11-49-6ab7c152a38048bc62287ad69c6c9ff0-202210172021847-ea3009.png" alt="image-20220728145913510"></p><p>添加完后，将application中重复的配置删除</p><h2 id="4、读取nacos配置"><a href="#4、读取nacos配置" class="headerlink" title="4、读取nacos配置"></a>4、读取nacos配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    如果bootstrap配置成功，能够读取到nacos配置的值</span><br><span class="hljs-comment">    */</span><br><span class="hljs-meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String dateformat;<br></code></pre></td></tr></table></figure><h2 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 测试是否读取到了nacos中的配置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping(&quot;/now&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、配置的热更新"><a href="#6、配置的热更新" class="headerlink" title="6、配置的热更新"></a>6、配置的热更新</h2><h3 id="1-2-1-方式一"><a href="#1-2-1-方式一" class="headerlink" title="1.2.1.方式一"></a>1.2.1.方式一</h3><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-02-51e55cf79771dbe6ed6bdd4a2357bdbd-202210172021953-f5cb8d.png" alt="image-20210714171036335"></p><h3 id="1-2-2-方式二"><a href="#1-2-2-方式二" class="headerlink" title="1.2.2.方式二"></a>1.2.2.方式二</h3><p>使用@ConfigurationProperties注解代替@Value注解。</p><p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.user.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PatternProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String dateformat;<br>&#125;<br></code></pre></td></tr></table></figure><p>在UserController中使用这个类代替@Value：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-08-4c319fe58161567356bf064e478ec94b-202210172021856-a715f9.png" alt="image-20210714171316124"></p><p>推荐使用这种方式，用的是spring自带的注解，并且代码复用性高</p><h2 id="7、环境共享"><a href="#7、环境共享" class="headerlink" title="7、环境共享"></a>7、环境共享</h2><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><p>下面我们通过案例来测试配置共享</p><h3 id="1）添加一个环境共享配置"><a href="#1）添加一个环境共享配置" class="headerlink" title="1）添加一个环境共享配置"></a>1）添加一个环境共享配置</h3><p>我们在nacos中添加一个userservice.yaml文件：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-13-440358ef038f9f512f4614b3e2e6cf67-202210172021736-8af026.png" alt="image-20210714173233650"></p><h3 id="2）在user-service中读取共享配置"><a href="#2）在user-service中读取共享配置" class="headerlink" title="2）在user-service中读取共享配置"></a>2）在user-service中读取共享配置</h3><p>在user-service服务中，修改PatternProperties类，读取新添加的属性：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-17-8f4e7b6d3a56996ecddc477e4e943026-202210172022599-f81c68.png" alt="image-20210714173324231"></p><p>在user-service服务中，修改UserController，添加一个方法：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-20-1f27b2209f34e30ae67298dd4c849380-202210172022127-4ce5dc.png" alt="image-20210714173721309"></p><h3 id="3）运行两个UserApplication，使用不同的profile"><a href="#3）运行两个UserApplication，使用不同的profile" class="headerlink" title="3）运行两个UserApplication，使用不同的profile"></a>3）运行两个UserApplication，使用不同的profile</h3><h3 id="4）配置共享的优先级"><a href="#4）配置共享的优先级" class="headerlink" title="4）配置共享的优先级"></a>4）配置共享的优先级</h3><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-24-b18117068a776af0b3ac32a9d646ab01-202210172022065-e37b5c.png" alt="image-20210714174623557"></p><h1 id="feign替代RestTemplate"><a href="#feign替代RestTemplate" class="headerlink" title="feign替代RestTemplate"></a>feign替代RestTemplate</h1><h2 id="1、引入依赖-1"><a href="#1、引入依赖-1" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        feign--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、开启feign功能"><a href="#2、开启feign功能" class="headerlink" title="2、开启feign功能"></a>2、开启feign功能</h2><p>在启动类上添加注解</p><p>@EnableFeignClients</p><h2 id="3、编写feign的客户端"><a href="#3、编写feign的客户端" class="headerlink" title="3、编写feign的客户端"></a>3、编写feign的客户端</h2><p>使用了SpringMVC的注解，优雅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>   <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>   User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h2><p>不需要再定义url了，就像调用本地接口一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>        <span class="hljs-comment">// 1.查询订单</span><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br>        <span class="hljs-comment">//2发送http请求</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.findById(order.getUserId());<br>        <span class="hljs-comment">//3 封装user对象</span><br>        order.setUser(user);<br>        <span class="hljs-comment">// 4.返回</span><br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br><br><br><span class="hljs-comment">//    public Order queryOrderById(Long orderId) &#123;</span><br><span class="hljs-comment">//        // 1.查询订单</span><br><span class="hljs-comment">//        Order order = orderMapper.findById(orderId);</span><br><span class="hljs-comment">//        //2.1发送http请求</span><br><span class="hljs-comment">//        String url = &quot;http://userservice/user/&quot;+order.getUserId();</span><br><span class="hljs-comment">//        //2.2获取user对象</span><br><span class="hljs-comment">//        User user = restTemplate.getForObject(url, User.class);</span><br><span class="hljs-comment">//        //3 封装user对象</span><br><span class="hljs-comment">//        order.setUser(user);</span><br><span class="hljs-comment">//        // 4.返回</span><br><span class="hljs-comment">//        return order;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为feign集成了ribbon，所以自带负载均衡</p><p>并且feign默认开启了失败重试功能</p><h2 id="5、feign配置"><a href="#5、feign配置" class="headerlink" title="5、feign配置"></a>5、feign配置</h2><p>日志默认为none</p><p>Feign可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p><p>下面以日志为例来演示如何自定义配置。</p><h3 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h3><p>基于配置文件修改feign的日志级别可以针对单个服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span>  <br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span> <br>      <span class="hljs-attr">userservice:</span> <span class="hljs-comment"># 针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别 </span><br></code></pre></td></tr></table></figure><p>也可以针对所有服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span>  <br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span> <br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别 </span><br></code></pre></td></tr></table></figure><p>而日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h3 id="Java代码方式"><a href="#Java代码方式" class="headerlink" title="Java代码方式"></a>Java代码方式</h3><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfiguration</span>  &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.BASIC; <span class="hljs-comment">// 日志级别为BASIC</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> <br></code></pre></td></tr></table></figure><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> <br></code></pre></td></tr></table></figure><h2 id="6、feign调优"><a href="#6、feign调优" class="headerlink" title="6、feign调优"></a>6、feign调优</h2><p>feign虽然已经很好用，但是不够完美</p><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p><p>•URLConnection：默认实现，不支持连接池</p><p>•Apache HttpClient ：支持连接池</p><p>•OKHttp：支持连接池</p><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p><p>这里我们用Apache的HttpClient来演示。</p><p>1）引入依赖</p><p>在order-service的pom文件中引入Apache的HttpClient依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--httpClient的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）配置连接池</p><p>在order-service的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># default全局的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span> <span class="hljs-comment"># 日志级别，BASIC就是基本的请求和响应信息</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对HttpClient的支持</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大的连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 每个路径的最大连接数  #这两个数据需要经过压力测试得到，这里瞎几把写</span><br></code></pre></td></tr></table></figure><h2 id="7、feign最佳实践"><a href="#7、feign最佳实践" class="headerlink" title="7、feign最佳实践"></a>7、feign最佳实践</h2><h3 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h3><p>将要用到的client全部放到一个模块，其他模块再依赖这个模块就行</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-30-9168b2977c60ba12ed539da94562358e-202210172022071-5ee7ec.png" alt="image-20220728173611921"></p><p>一样的，feign-api模块添加依赖，并修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- feign依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--httpClient的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># default全局的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">NONE</span> <span class="hljs-comment"># 日志级别，BASIC就是基本的请求和响应信息</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对HttpClient的支持</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大的连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 每个路径的最大连接数</span><br></code></pre></td></tr></table></figure><p>需要的实体类和发http请求的client接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>   <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>   User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他模块使用这个通用模块"><a href="#其他模块使用这个通用模块" class="headerlink" title="其他模块使用这个通用模块"></a>其他模块使用这个通用模块</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.itcast.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动会有bug，因为扫不到client，需要在启动类中配置</p><p>方式一：</p><p>指定Feign应该扫描的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span><br></code></pre></td></tr></table></figure><p>方式二：</p><p>指定需要加载的Client接口：（一般用这个方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span><br></code></pre></td></tr></table></figure><h1 id="gateWay网关"><a href="#gateWay网关" class="headerlink" title="gateWay网关"></a>gateWay网关</h1><h2 id="为什么需要网关"><a href="#为什么需要网关" class="headerlink" title="为什么需要网关"></a>为什么需要网关</h2><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-35-caf5ea851dbfcfa184144328ededa105-202210172022908-39b648.png" alt="image-20210714210131152"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h2 id="1、创建gateway模块"><a href="#1、创建gateway模块" class="headerlink" title="1、创建gateway模块"></a>1、创建gateway模块</h2><p>引入依赖并配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--网关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--nacos服务发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <span class="hljs-comment"># 网关端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment"># 网关路由配置</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <span class="hljs-comment"># 路由id，自定义，只要唯一即可</span><br>          <span class="hljs-comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <span class="hljs-comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span><br></code></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.gateway;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(GatewayApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、网关路由的流程图"><a href="#2、网关路由的流程图" class="headerlink" title="2、网关路由的流程图"></a>2、网关路由的流程图</h2><p>整个访问的流程如下：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-40-e9daff6e9b9d8cdaa128403616b4bb7a-202210172022191-01d0d3.png" alt="image-20210714211742956"></p><h2 id="3、断言工厂"><a href="#3、断言工厂" class="headerlink" title="3、断言工厂"></a>3、断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method&#x3D;GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握Path这种路由工程就可以了。</p><h2 id="4、过滤器工厂"><a href="#4、过滤器工厂" class="headerlink" title="4、过滤器工厂"></a>4、过滤器工厂</h2><h3 id="路由过滤器的种类"><a href="#路由过滤器的种类" class="headerlink" title="路由过滤器的种类"></a>路由过滤器的种类</h3><p>Spring提供了31种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><h3 id="请求头过滤器"><a href="#请求头过滤器" class="headerlink" title="请求头过滤器"></a>请求头过滤器</h3><p>下面我们以AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth&#x3D;itcast is freaking awesome!</p></blockquote><p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <br>        <span class="hljs-attr">predicates:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <br>        <span class="hljs-attr">filters:</span> <span class="hljs-comment"># 过滤器</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span> <span class="hljs-comment"># 添加请求头</span><br></code></pre></td></tr></table></figure><p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p><h3 id="默认过滤器"><a href="#默认过滤器" class="headerlink" title="默认过滤器"></a>默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <br>        <span class="hljs-attr">predicates:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>      <span class="hljs-attr">default-filters:</span> <span class="hljs-comment"># 默认过滤项</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span> <br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><h2 id="5、全局过滤器"><a href="#5、全局过滤器" class="headerlink" title="5、全局过滤器"></a>5、全局过滤器</h2><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><h3 id="全局过滤器作用"><a href="#全局过滤器作用" class="headerlink" title="全局过滤器作用"></a>全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  处理当前请求，有必要的话通过&#123;<span class="hljs-doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span><br><span class="hljs-comment">     */</span><br>    Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有authorization，</p></li><li><p>authorization参数值是否为admin</p></li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在gateway中定义一个过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.gateway.filters;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-meta">@Order(-1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">// 1.获取请求参数</span><br>        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();<br>        <span class="hljs-comment">// 2.获取authorization参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> params.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">// 3.校验</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(auth)) &#123;<br>            <span class="hljs-comment">// 放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">// 4.拦截</span><br>        <span class="hljs-comment">// 4.1.禁止访问，设置状态码</span><br>        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);<br>        <span class="hljs-comment">// 4.2.结束处理</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-12-46-b4c77eafe738297780531f81713c91ed-202210172022869-39c15e.png" alt="image-20210714214228409"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><h2 id="6、gateway解决跨域"><a href="#6、gateway解决跨域" class="headerlink" title="6、gateway解决跨域"></a>6、gateway解决跨域</h2><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li><p>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</p></li><li><p>域名相同，端口不同：localhost:8080和localhost8081</p></li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>application.yml中添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-comment"># 。。。</span><br>      <span class="hljs-attr">globalcors:</span> <span class="hljs-comment"># 全局的跨域处理</span><br>        <span class="hljs-attr">add-to-simple-url-handler-mapping:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 解决options请求被拦截问题</span><br>        <span class="hljs-attr">corsConfigurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-comment"># 允许哪些网站的跨域请求 </span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://localhost:8090&quot;</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-comment"># 允许的跨域ajax的请求方式</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;GET&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;POST&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;DELETE&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;PUT&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;OPTIONS&quot;</span><br>            <span class="hljs-attr">allowedHeaders:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment"># 允许在请求中携带的头信息</span><br>            <span class="hljs-attr">allowCredentials:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否允许携带cookie</span><br>            <span class="hljs-attr">maxAge:</span> <span class="hljs-number">360000</span> <span class="hljs-comment"># 这次跨域检测的有效期</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 后端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-Vue</title>
      <link href="/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Vue/"/>
      <url>/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Vue/</url>
      
        <content type="html"><![CDATA[<p>Vue是响应式的js框架，可以让对dom元素的操作变得简单</p><h1 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h1><p>1、Vscode安装vue相应的插件</p><p>2、浏览器安装vue devtools插件</p><p><strong>Vscode使用Vue</strong></p><ul><li><p>新终端输入命令<code> npm init -y</code> 设置启动状态</p></li><li><p>输入 <code>npm install vue</code> 安装vue需要的依赖</p></li></ul><h1 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h1><ul><li><code>&#123;&#123;&#125;&#125;</code>双花括号调用属性只能用于尖括号内，并且网络不好是会有暂显，用户体验不好，最好用v-text</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;,当前时间为&#123;&#123;nowDate()&#125;&#125;,您当前排第&#123;&#123;num&#125;&#125;位<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;num++&quot;</span>&gt;</span>加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;dis()&quot;</span>&gt;</span>减<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1、new vue实例 每个vue实例都是通过vue函数创建一个新的vue实例开始的</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<span class="hljs-comment">//挂载的模板</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123; <span class="hljs-comment">//绑定的数据，当数据属性的值发生改变时，视图会重新渲染，响应式的</span></span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;老王&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">num</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">nowDate</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toDateString</span>();</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-title function_">dis</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>--;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"><span class="hljs-comment">//双向绑定： 数据发生变换 视图也要变化</span></span><br><span class="language-javascript"><span class="hljs-comment">//vue指令：来简化对dom频繁的操作</span></span><br><span class="language-javascript"><span class="hljs-comment">//用方法可以实现更复杂的指令</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="v-text-v-html"><a href="#v-text-v-html" class="headerlink" title="v-text&amp;v-html"></a>v-text&amp;v-html</h2><ul><li>v-text 用于绑定数据， 语法v-text&#x3D;”属性”，会直接将值作为文本显示</li><li>v-html 会将值进行编译再显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//以文本的模式解析<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//以html代码解析<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">text</span>:<span class="hljs-string">&quot;&lt;a&gt;hello&lt;/a&gt;&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>用于绑定元素属性</p><ul><li><em>语法：v-bind:元素属性&#x3D;”vue的属性”</em></li><li><em>简写 :  :元素属性 例如：v-bind:title 简写成 :title</em></li></ul><p><strong>针对样式的特殊用法</strong></p><p>动态控制class 是否添加 v-bind:class&#x3D;”{red:isRed}”，</p><p>语法： {red:isRed} {需要动态控制的class样式:vue属性（需要boolean类型）}</p><p>动态控制标签内的style属性  :style&#x3D;”{fontSize:bigFontSize}，</p><p>语法：{css样式的小驼峰命名方式:vue的属性}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        //根据isRed的值，动态控制class是否添加<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;red:isRed&#125;&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;fontSize:bigFontSize&#125;&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;website&quot;</span>&gt;</span>baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;website&quot;</span>&gt;</span>baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isRed</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">website</span>:<span class="hljs-string">&quot;www.baidu.com&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">bigFontSize</span>:<span class="hljs-string">&quot;50px&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>用于实现双向绑定 一般用于表单元素</p><p>html语句中绑定Vue的data属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       年龄<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您的年龄为&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;addAge&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;setZero&quot;</span>&gt;</span>Zero<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>课程：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;course&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>c#<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;course&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;python&quot;</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;course&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;python&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;python&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;c#&quot;</span>&gt;</span>c#<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;course&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c#&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">c#</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您选择的课程为：&#123;&#123;course&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Vue 定义属性值和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">course</span>:<span class="hljs-string">&#x27;java&#x27;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">addAge</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>++;<br>        &#125;,<br>        <span class="hljs-title function_">setZero</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p><strong>常用的（vue官方文档</strong></p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li><li>v-on:onclick的简写—&gt; @click</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>例子：</strong></p><p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">&quot;say(&#x27;vue&#x27;)&quot;</span>&gt;</span>vue<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">say</span>(<span class="hljs-params">message</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(message);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>用于遍历展示对象或数组的内容</p><p>item：当前下标的对象</p><p><code>&lt;li v-for=&quot;(item, index) in fruit&quot;&gt;&#123;&#123;index&#125;&#125;---&#123;&#123;item&#125;&#125;&lt;/li&gt;</code></p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数组的遍历--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in fruit&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;---&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--对象的遍历--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in obj&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">l</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-attr">obj</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;ykk&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;male&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-attr">fruit</span>:[</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;apple&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;orange&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;banana&#x27;</span></span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果:</p><ul><li><p>0—apple</p></li><li><p>1—orange</p></li><li><p>2—banana</p></li><li><p>ykk</p></li><li><p>18</p></li><li><p>male</p></li></ul><h2 id="v-if-、-v-else-、v-else-if-和v-show"><a href="#v-if-、-v-else-、v-else-if-和v-show" class="headerlink" title="v-if 、 v-else 、v-else-if 和v-show"></a>v-if 、 v-else 、v-else-if 和v-show</h2><p><strong>用于控制元素的显示和隐藏</strong></p><p><strong>语法:</strong> </p><p>v-if &#x3D;”指定的boolean值”  v-show 一样</p><p>v-else、v-else-if和v-if一起使用，用于条件判断，一样用于控制元素的显示和隐藏</p><p><strong>区别：</strong></p><ul><li><p>v-if 、v-else、v-else-if 控制元素是否生成； 通过html代码控制</p></li><li><p>v-show 控制元素是否显示隐藏；通过style的 display:”none” 和”block”来控制</p></li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.if</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.show</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;vif=!vif&quot;</span>&gt;</span>显示隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;vif&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;if&quot;</span>&gt;</span>v-if<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;vshow=!vshow&quot;</span>&gt;</span>显示隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;vshow&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>v-show<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot; num==1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: yellow;&quot;</span>&gt;</span>num=1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot; num==2 &quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: aqua;&quot;</span>&gt;</span>num=2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">&quot; num==3 &quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: chartreuse;&quot;</span>&gt;</span>num=3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">vif</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">vshow</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">num</span>:<span class="hljs-number">1</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>&lt;<span class="hljs-number">4</span>)&#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="方法-计算属性-侦听器-过滤器"><a href="#方法-计算属性-侦听器-过滤器" class="headerlink" title="方法 计算属性 侦听器 过滤器"></a>方法 计算属性 侦听器 过滤器</h1><h2 id="方法-methods"><a href="#方法-methods" class="headerlink" title="方法 methods"></a>方法 methods</h2><p>方法可以实现 计算属性 侦听器 过滤器的功能，但是计算属性 侦听器 过滤器对相应的使用场景有优化，方法主要用于与后端交互，使用计算属性 侦听器 过滤器让代码解构更加清晰，性能更好</p><p>当方法中的数据发生改变时会自动调用</p><p><strong>调用：</strong></p><p><code>&#123;&#123;   &#125;&#125; </code> or  在标签中使用时，例如：&lt;  v-text&#x3D;”sumPricejk”  &gt;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">sumPrice</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">car</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>            sum += element.<span class="hljs-property">price</span> * element.<span class="hljs-property">num</span>;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;,<br>        <span class="hljs-title function_">warn</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">let</span> message=<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">car</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span>(item.<span class="hljs-property">num</span>&gt;item.<span class="hljs-property">stock</span>)&#123;<br>                    <span class="hljs-comment">//调用属性用模板(ES6特性)</span><br>                    message+=<span class="hljs-string">`<span class="hljs-subst">$&#123;item.pname&#125;</span>数量超出库存数量 &lt;/br&gt;`</span>;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="计算属性-compute"><a href="#计算属性-compute" class="headerlink" title="计算属性 compute"></a>计算属性 compute</h2><p>计算属性对计算有优化</p><p>当方法中使用的数据发生变化时会自动调用</p><p><strong>调用：</strong>与methods一样，不过不需要加<code>()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">sumPrice2</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">car</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>            sum += element.<span class="hljs-property">price</span> * element.<span class="hljs-property">num</span>;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器 watch"></a>侦听器 watch</h2><p>侦听器专门用于处理数据的变化</p><p><strong>调用：</strong>自动调用</p><p>案例：ipt属性发生变化时，触发方法，修改message和mes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>:&#123;<br>               <span class="hljs-attr">ipt</span>:<span class="hljs-string">&quot;&quot;</span>,<br>               <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;输入内容&quot;</span>,<br>               <span class="hljs-attr">showMsg</span>:<span class="hljs-literal">false</span>,<br>               <span class="hljs-attr">str</span>:<span class="hljs-string">&quot;改变了&quot;</span>,<br>               <span class="hljs-attr">mes</span>:<span class="hljs-string">&quot;&quot;</span>,<br>           &#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-attr">ipt</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">oldValue,newValue</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">showMsg</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>+=<span class="hljs-string">&quot;又&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mes</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">str</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">showMsg</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="过滤器-filters"><a href="#过滤器-filters" class="headerlink" title="过滤器 filters"></a>过滤器 filters</h2><p>过滤器用于对数据的处理</p><p>调用：只能在双花括号和v-bind中使用，使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 在双花括号中 --&gt;<br>&#123;&#123; message | capitalize &#125;&#125;<br><br>&lt;!-- 在 <span class="hljs-string">`v-bind`</span> 中 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>案例：</p><p><code>&#123;&#123;message | upper&#125;&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">filters</span>:&#123;<br>                <span class="hljs-title function_">upper</span>(<span class="hljs-params">message</span>)&#123;<br>                    message=message.<span class="hljs-title function_">toUpperCase</span>();<br>                    <span class="hljs-keyword">return</span> message;<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p><strong>这里的使用方式只是入门案例，真正使用vue组件进行开发是使用vue的脚手架</strong></p><p>组件是vue最强大的功能之一，可以提高代码的复用率并且更利于维护</p><p>组件有全局组件和局部组件，全局组件可以在全部的vue实例中使用，局部组件只能在定义的vue实例中使用</p><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>全局组件可以在全部的vue实例中使用</p><p>局部组件单独声明在外面</p><p><strong>创建全局组件：</strong> <code>Vue.compoment(名字,对象)</code></p><pre><code class="hljs"> 1.  命名: 不要使用驼峰命名，可以使用中划线的方式命名 2.  **模板(template)**：**必须的** 3.  数据：一定要用**函数**的方式声明 4.  用父组件的数据：使用props数组，名字要和父组件的属性一样</code></pre><p>** 案例：**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;comp1&quot;</span>,&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;p v-text=&quot;num&quot; v-on:click=&quot;num++&quot;&gt;&lt;/p&gt;`</span>,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">num</span>:<span class="hljs-number">10</span>,<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">//获取父组件的数据</span><br>    <span class="hljs-comment">//props:[&quot;numxx&quot;]</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>调用：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--没有使用父组件的数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">comp1</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">comp1</span>&gt;</span><br><span class="hljs-comment">&lt;!--使用了父组件的数据（记得使用props数组）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">comp1</span> <span class="hljs-attr">:num</span>=<span class="hljs-string">&quot;numxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">comp1</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><p>定义在vue实例里面，只能在该vue实例中使用</p><p>案例（为了易读性，将对象定义在外面）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对象</span><br><span class="hljs-keyword">const</span> comp3=&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;p v-text=&quot;num&quot; v-on:click=&quot;num++&quot;&gt;&lt;/p&gt;`</span>,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">num</span>:<span class="hljs-number">10</span>,<br>        &#125;<br>    &#125;,<br>&#125;;<br><span class="hljs-comment">//vue实例</span><br><span class="hljs-keyword">const</span> app1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app1&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">numxx</span>:<span class="hljs-number">1</span>,<br>    &#125;,<br>    <span class="hljs-attr">components</span>:&#123;<br>        <span class="hljs-attr">comp3</span>:comp3   &#125; <br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="生命周期和钩子函数"><a href="#生命周期和钩子函数" class="headerlink" title="生命周期和钩子函数"></a>生命周期和钩子函数</h1><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-16-15-c957fe42dd1b280df53f731c62496fa3-202210172035082-7e9de3.png" alt="img"></p><p>created:页面渲染之前</p><p>mounted：页面渲染之后</p><h1 id="router"><a href="#router" class="headerlink" title="router"></a>router</h1><p>vue实例为一般只有一个html页面，通过控制页面内的组件来实现不同页面的效果</p><p><strong>使用router</strong></p><ol><li>安装vue-router使用 <code>npm install vue-router</code></li><li>引入vue-router文件</li><li>要根据不同的url链接到不同的页面，使用模板实现，将模板绑定对应的路由地址</li><li>使用路由管理模板，将url跟模板绑定</li></ol><p><strong>例子：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/index&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-comment">&lt;!--指定url--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product&quot;</span>&gt;</span>商品<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-comment">&lt;!--引入路由--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入vue-router文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//创建全局组件，绑定url</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> index = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;index&quot;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;hello,vue-router&lt;/div&gt;`</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> product = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;product&quot;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;ul&gt;&lt;li&gt;1.apple&lt;/li&gt;&lt;li&gt;2.xiaomi&lt;/li&gt;&lt;/ul&gt;`</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-comment">//创建路由，绑定全局组件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">routes</span>: [&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/index&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">component</span>: index</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/product&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">component</span>: product</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-comment">//创建vue实例，引入路由属性</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">router</span>: router,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br>&lt;/html<br></code></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>用于发送ajax请求的第三方库，简单好用</p><p>安装：</p><pre><code class="hljs">1. `npm init -y`2. `npm install axios`</code></pre><p>使用案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/axios/dist/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-title function_">getMessage</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-comment">/*.then(function (response)&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                            console.log(response);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                            //不使用箭头函数的话，axios调用属性比较麻烦</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                            app.message=response.data;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                        &#125;)</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">                        */</span></span></span><br><span class="language-javascript"><span class="language-xml">                        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-comment">//使用见箭头函数可以用this调用属性</span></span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = response.<span class="hljs-property">data</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">                        .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMessage</span>();</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>推荐使用箭头函数，axios调用vue组件中的属性可用this.</p><h1 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h1><p>vue ui 新建的项目没有vue-router nmd</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-16-22-fe2f9555e6d32841fc8b6438363f750d-202210172036770-4497e6.png" alt="image"></p><p>自定义，记得选router，关闭linter（规范太鸡儿恶心了）</p><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><p>一般写的前端代码用的是es6，但是es6的兼容性不好，所以安装babel把es6代码转换为es5</p><h1 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h1><p>打包工具，减少资源调用的损耗</p><h1 id="vue-amin-templete"><a href="#vue-amin-templete" class="headerlink" title="vue-amin-templete"></a>vue-amin-templete</h1><h1 id="watch用法案例"><a href="#watch用法案例" class="headerlink" title="watch用法案例"></a>watch用法案例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-comment">//监听courseInfo的一级类别id，改变时更新二级类别数组</span><br>    <span class="hljs-comment">//深度监听对象的属性</span><br>   <span class="hljs-string">&#x27;courseInfo.subjectParentId&#x27;</span>:&#123;<br>     <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-keyword">var</span> subjectId = <span class="hljs-variable language_">this</span>.<span class="hljs-property">courseInfo</span>.<span class="hljs-property">subjectId</span><br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">courseInfo</span>.<span class="hljs-property">subjectId</span>=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment">//判断路由是否有值</span><br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">id</span> &amp;&amp;<span class="hljs-variable language_">this</span>.<span class="hljs-property">initCallBack</span>)&#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">courseInfo</span>.<span class="hljs-property">subjectId</span>=subjectId<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">initCallBack</span>=<span class="hljs-literal">false</span><br>         <span class="hljs-keyword">return</span><br>       &#125;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSubjectTwoInfo</span>()<br>     &#125;,<br>     <span class="hljs-comment">//开启深度监听</span><br>     <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span><br>   &#125;,<br>  <span class="hljs-comment">//路由切换时清空表单</span><br>  $route(to,<span class="hljs-keyword">from</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-JavaScript</title>
      <link href="/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-JavaScript/"/>
      <url>/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="基本使用（语法、规范…"><a href="#基本使用（语法、规范…" class="headerlink" title="基本使用（语法、规范…)"></a>基本使用（语法、规范…)</h1><h2 id="三种书写的位置"><a href="#三种书写的位置" class="headerlink" title="三种书写的位置"></a>三种书写的位置</h2><ul><li>内嵌：head里面<script></script>标签里面</li><li>行内： 写在标签元素里面</li><li>外部： 导入.js文件 <script src=''> </script></li></ul><p>写在内嵌里的语句会顺序执行，除了函数</p><h2 id="输入输出数据"><a href="#输入输出数据" class="headerlink" title="输入输出数据"></a>输入输出数据</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>console.dir()</td><td>输出详细</td></tr><tr><td>alert()</td><td>弹出窗口</td></tr><tr><td>console.log()</td><td>浏览器控制台打印</td></tr><tr><td>prompt()</td><td>浏览器弹出输入框</td></tr></tbody></table><h2 id="变量类型是动态的"><a href="#变量类型是动态的" class="headerlink" title="变量类型是动态的"></a>变量类型是动态的</h2><ul><li>不需要指定类型，根据赋值自动确定类型</li><li><code>typeof var</code> 获取变量类型</li><li>未赋值的变量为undefiend类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a= <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> b=<span class="hljs-string">&#x27;hh&#x27;</span>;<br><span class="hljs-keyword">var</span> c=<span class="hljs-string">&quot;kkk&quot;</span>;<br><span class="hljs-keyword">var</span> d=undefiend;<span class="hljs-comment">//未赋值的变量为undefiend类型</span><br></code></pre></td></tr></table></figure><h2 id="判断是否为数字类型"><a href="#判断是否为数字类型" class="headerlink" title="判断是否为数字类型"></a>判断是否为数字类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//返回值为boolean</span><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>字符串拼接：一样用加号，<del>效率去他妈</del></li><li>字符串单引号和双引号都可以用，推荐单引号</li><li><code>str.length</code>：字符串长度属性</li></ul><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符</td></tr><tr><td>\\</td><td>斜杠 \</td></tr><tr><td>\‘</td><td>‘ 单引号</td></tr><tr><td>\“</td><td>“双引号</td></tr><tr><td>\t</td><td>tab 缩进</td></tr><tr><td>\b</td><td>空格</td></tr></tbody></table><h3 id="其他类型变量转换成字符串"><a href="#其他类型变量转换成字符串" class="headerlink" title="其他类型变量转换成字符串"></a>其他类型变量转换成字符串</h3><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>toString()</td><td>转换为字符串</td></tr><tr><td>String()</td><td>转换成字符串</td></tr><tr><td>加号于字符串拼接</td><td>和字符串拼接</td></tr></tbody></table><h3 id="转换为数值型变量"><a href="#转换为数值型变量" class="headerlink" title="转换为数值型变量"></a>转换为数值型变量</h3><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>parseFloat()</td><td>将String转换为浮点</td></tr><tr><td>parseInt()</td><td>将String转换为整型</td></tr><tr><td>Number()</td><td>强制转换为数值型</td></tr><tr><td>-  隐式转换 例：‘123’ - 23&#x3D;100</td><td>利用算数隐式转换为数值型</td></tr></tbody></table><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><ul><li>可和数字相加，true&#x3D;1，false&#x3D;0</li></ul><p>​转换为布尔型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">boolean</span>()<span class="hljs-comment">//一切表否定的值为false</span><br></code></pre></td></tr></table></figure><h2 id="流程控制、循环和java一毛一样"><a href="#流程控制、循环和java一毛一样" class="headerlink" title="流程控制、循环和java一毛一样"></a>流程控制、循环和java一毛一样</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>创建方法</p></li><li><p>注意的点：</p><ul><li>不用指定创建的数组里面的类型</li><li>里面的变量可以是任何类型</li><li>下标不存在的值为<code>undefined</code></li></ul></li><li><p>可以使用 <code>pop()出栈</code>、<code>push()</code>入栈、<code>unshift()在前面添加元素</code>、<code>sort()排列</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arry =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Arrays</span>();<br><span class="hljs-keyword">var</span> arry1=[];<br><span class="hljs-keyword">var</span> arry2=[<span class="hljs-string">&#x27;wo&#x27;</span>,<span class="hljs-number">234</span>,<span class="hljs-literal">false</span>]<br><span class="hljs-keyword">var</span> arry2[<span class="hljs-number">3</span>]=undefiend <br><span class="hljs-keyword">var</span> a=arry2.<span class="hljs-property">length</span> <span class="hljs-comment">//数组长度</span><br>arry1.<span class="hljs-property">length</span>=<span class="hljs-number">9</span> <span class="hljs-comment">//修改数组长度</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><ul><li>函数传值可以不指定传入值，直接传就是了，例如下列代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fname</span>(<span class="hljs-params"></span>)&#123;<br>    consolo.<span class="hljs-title function_">log</span>()<br>&#125;<br><br><span class="hljs-title function_">fname</span>(<span class="hljs-string">&#x27;hhh&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="arguments属性"><a href="#arguments属性" class="headerlink" title="arguments属性"></a>arguments属性</h3><ul><li>函数内的伪数组对象（不是在真正意义上的数组），每个函数都内置了</li><li>具有数组的length属性</li><li>按照索引的方式进行存储的</li><li>没有真正数组的一些方法，如pop(),push()</li><li></li></ul><p><strong>其余用法与其他语言大差不差的</strong></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="利用对象字面变量创建对象"><a href="#利用对象字面变量创建对象" class="headerlink" title="利用对象字面变量创建对象"></a>利用对象字面变量创建对象</h3><ul><li>属性之间用 <code>,</code> 隔开</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> dog &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;gg&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>    ww : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;wang&#x27;</span>);<br>    &#125;<br>&#125;;<br>dog.<span class="hljs-property">name</span>;<br>dog[<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-comment">//两种调用对象属性的方法</span><br>dog.<span class="hljs-title function_">ww</span>();<span class="hljs-comment">//调用dog 的函数</span><br></code></pre></td></tr></table></figure><h3 id="利用new-Object-创建对象"><a href="#利用new-Object-创建对象" class="headerlink" title="利用new Object()创建对象"></a>利用new Object()创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> cat =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">//创建了一个对象</span><br>cat.<span class="hljs-property">name</span>=<span class="hljs-string">&#x27;mimi&#x27;</span>;<br>cat.<span class="hljs-property">age</span>=<span class="hljs-number">3</span>;<br>cat.<span class="hljs-property">sex</span>=<span class="hljs-string">&#x27;female&#x27;</span>;<br>cat.<span class="hljs-property">miao</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h3><p>类似java的类，不同的是，只有构造函数</p><ul><li>构造函数名字要大写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age,sex</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span>=sex;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> boy=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;xiaomin&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;man&#x27;</span>);<br>boy.<span class="hljs-title function_">say</span>(<span class="hljs-string">&#x27;woc&#x27;</span>);<br><br><span class="hljs-comment">//js 的遍历对象</span><br><span class="hljs-keyword">for</span> ( k <span class="hljs-keyword">in</span> boy)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ul><li>Math</li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><ul><li>主要用法为时间戳</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取Date总的毫秒数（时间戳）不是当前时间的毫秒数 而是距离1970年1月1日过了多少毫秒数 </span><br><span class="hljs-comment">//1、通过 valueof() getTime()</span><br><span class="hljs-keyword">var</span> date =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">valueof</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getTime</span>());<br><span class="hljs-comment">//2、简单的写法（最常用的写法）</span><br><span class="hljs-keyword">var</span> date1 = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">loge</span>(date1);<br><span class="hljs-comment">//3、H5新增的 获取总的毫秒数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br></code></pre></td></tr></table></figure><ul><li><p>其他的例如获取当前日期、小时、分钟等查看 api 文档</p></li><li><p>热知识：1s&#x3D;1000ms</p></li></ul><h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><p>Web API是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)。</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li><p>DOM是一个接口，它可以改变网页的内容、结构和样式。</p></li><li><p>因为html的加载顺序，元素在加载后标签才能够控制，所以控制元素的脚本应该写在<body>标签里面，并且是在要控制的元素后面，说人话就是脚本写在body的最后面就是了。引入脚本也一样。（有解决方法，后面再细说）</p></li></ul><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul><li>页面也是一个元素对象（document）<ul><li>所以获取页面内的对象要先用document对象</li></ul></li></ul><p>​</p><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>getElementById(‘id’)</td><td>通过id获取元素对象</td></tr><tr><td>getElementsByTagName(‘标签名’)</td><td>通过标签名返回一个元素对象集合</td></tr><tr><td>getElementByName(‘name’)</td><td>通过name获取元素对象</td></tr><tr><td>getElementByClass()</td><td>根据类名返回元素对象集合</td></tr><tr><td>querySelector()</td><td>返回标签或类的第一个元素</td></tr><tr><td>querySelectorAll()</td><td>返回所以的标签或类元素</td></tr><tr><td>document.body</td><td>返回body元素对象</td></tr><tr><td>document.documentElement</td><td>返回html元素对象</td></tr></tbody></table><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>js学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>呱呱呱1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>呱呱呱2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>呱呱呱3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>呱呱呱4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;ol&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>咩咩咩1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>咩咩咩2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>咩咩咩3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>咩咩咩4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//getElementsByTagName(&#x27;标签名&#x27;) 返回一个伪数组 </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> li=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<span class="hljs-comment">//返回了全部的li标签</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//获取不同代码块里的同一标签类型</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> ol=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ol&#x27;</span>).<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<span class="hljs-comment">//只返回了ol标签里面的li标签</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> li2=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);<span class="hljs-comment">//返回了box类的第一个元素</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> li3=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);<span class="hljs-comment">//返回了所以的box类元素</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li2);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li3);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h3><ul><li>事件由三部分组成 事件源、事件类型、事件处理程序。称为事件三要素。</li><li>事件源：事件被触发的对象</li><li>事件类型：如何触发、什么事件</li><li>事件处理程序：通过一个函数赋值的方式完成</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>js事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;bt1&#x27;</span>&gt;</span> 按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;bt2&#x27;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;onclic(this)&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//1、获取事件源</span></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-keyword">var</span> bt1=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;bt1&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//2、绑定事件</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//3、添加函数</span></span></span><br><span class="language-javascript"><span class="language-xml"> bt1.<span class="hljs-property">onclick</span>= <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;最基础的方式&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"> &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-comment">//函数方法 </span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">onclic</span>(<span class="hljs-params">e</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;封装为一个函数&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125; </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmoudrout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获取鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标下按触发</td></tr></tbody></table><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><ul><li><strong>element.innerText</strong><ul><li>修改内容时：修改标签从起始位置到终止位置的内容，写的html标签不会被识别</li><li>获取内容时：去除html标签，同时空格和换行也会去掉</li></ul></li><li><strong>element.innerHTML</strong>：<ul><li>修改内容时：修改标签从起始位置到终止位置的内容，写的html标签可以被识别</li><li>获取内容时：保留html标签，同时保留空格和换行</li></ul></li><li>都只能修改基本元素的内容，表单元素的内容不能修改。</li></ul><h3 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h3><ul><li>element.xxx</li></ul><h3 id="修改元素样式"><a href="#修改元素样式" class="headerlink" title="修改元素样式"></a>修改元素样式</h3><ul><li><p>element.style.xxx</p></li><li><p>style的属性为小驼峰命名</p></li><li><p>style.display&#x3D;’none’ 隐藏属性、style.display&#x3D;’block’ 显示属性</p></li></ul><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="let-const"><a href="#let-const" class="headerlink" title="let&amp;const"></a>let&amp;const</h2><p><strong>和var一样，用于定义变量</strong></p><ul><li><p><strong>var：</strong>可以变量提升，没有严格的局部作用域，可以多次定义。</p></li><li><p><strong>let：</strong>比var更严谨，不能变量提升，不能多次定义。</p></li><li><p><strong>const：</strong>定义常量</p></li></ul><p><em><strong>变量提升：使用变量的语句在定义变量的语句前面。</strong></em></p><h2 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a>解构表达式</h2><p><strong>解构：从数组中提取数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">//数组的解构</span><br><span class="hljs-keyword">let</span>[a,b,c]=arr;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);<br><br><span class="hljs-keyword">let</span> person=&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;老王&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">58</span>,<br>    <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&#x27;dance&#x27;</span>,<span class="hljs-string">&#x27;eat&#x27;</span>]<br>&#125;;<br><span class="hljs-comment">//对象的解构</span><br><span class="hljs-keyword">let</span>&#123;name,age,hobbies&#125;=person;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,age,hobbies);<br></code></pre></td></tr></table></figure><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><p>简化字符串拼接，保留格式</p><p>在&#96;&#96;里面写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a=<span class="hljs-string">&#x27;&lt;div&gt;&#x27;</span>+<br>    <span class="hljs-string">&#x27;&lt;p&gt; kkk &lt;/p&gt;&#x27;</span><br>+<span class="hljs-string">&#x27;&lt;div&gt;&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><br><span class="hljs-comment">//字符串模板</span><br><span class="hljs-keyword">let</span> b=<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">&lt;p&gt; kks&lt;/p&gt;</span><br><span class="hljs-string">&lt;div&gt;`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br></code></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str=<span class="hljs-string">&#x27;hello.vue&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-comment">//以某个字符串开始</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;.vue&#x27;</span>));<span class="hljs-comment">//以某个字符串结束</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;e&#x27;</span>));<span class="hljs-comment">//包含某个字符</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-comment">//包含某个字符串</span><br>.....<br></code></pre></td></tr></table></figure><h3 id="插入变量"><a href="#插入变量" class="headerlink" title="插入变量${}"></a>插入变量${}</h3><ul><li>在&#96;&#96;字符串模板里直接使用</li><li>可调用函数，直接获取函数的返回值</li><li>不能脱离字符串模板直接使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person=&#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;老王&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">58</span>,<br>          <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&#x27;dance&#x27;</span>,<span class="hljs-string">&#x27;eat&#x27;</span>]<br>      &#125;;<br>      <span class="hljs-comment">//对象的解构</span><br>      <span class="hljs-keyword">let</span>&#123;name,age,hobbies&#125;=person;<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是伞兵&#x27;</span>;<br>      &#125;<br><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`name: <span class="hljs-subst">$&#123;name&#125;</span> ,age: <span class="hljs-subst">$&#123;age&#125;</span> ,hobbies: <span class="hljs-subst">$&#123;hobbies&#125;</span> say:<span class="hljs-subst">$&#123;f1()&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><h2 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h2><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//ES6之前，设定函数默认值</span><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">a</span>)&#123;<br>         <span class="hljs-keyword">if</span>(!a)&#123;<br>             a=<span class="hljs-number">1</span>;<br>         &#125;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>     &#125;<br>     <span class="hljs-comment">//ES6设置函数默认值</span><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">a=<span class="hljs-number">1</span></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>     &#125;<br>     <span class="hljs-title function_">f1</span>();<span class="hljs-comment">//1</span><br>     <span class="hljs-title function_">f2</span>();<span class="hljs-comment">//1</span><br>     <span class="hljs-title function_">f2</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h3 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h3><p>用三个点<code>...</code>定义一个长度可变的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">f1</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><br><span class="hljs-comment">//ES6可变长度参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">...a</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">f2</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h3 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person=&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;老王&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">58</span>,<br>            <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&#x27;dance&#x27;</span>,<span class="hljs-string">&#x27;eat&#x27;</span>]<br>        &#125;;<br><span class="hljs-comment">//传入的参数自动解构，数组同理</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f3</span>(<span class="hljs-params">&#123;name,age,hobbies&#125;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`name: <span class="hljs-subst">$&#123;name&#125;</span> age: <span class="hljs-subst">$&#123;age&#125;</span> hobbies: <span class="hljs-subst">$&#123;hobbies&#125;</span>`</span>)<br>&#125;<br><span class="hljs-title function_">f3</span>(person);<br></code></pre></td></tr></table></figure><h3 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h3><ul><li>不同于java8的lambda表达式<ul><li>java的lambada表达式是实例化接口</li><li>js的lambda表达式是定义一个方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span>(a+b);<br>&#125;<br><span class="hljs-comment">//lambda表达式</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">add2</span> = (<span class="hljs-params">b,c</span>) =&gt;(b+c);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add1</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add2</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h2 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h2><h3 id="对象内置函数"><a href="#对象内置函数" class="headerlink" title="对象内置函数"></a>对象内置函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 对象的内置函数</span><br><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">language</span>: [<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>]<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(person));<span class="hljs-comment">//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(person));<span class="hljs-comment">//[&quot;jack&quot;, 21, Array(3)]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(person));<span class="hljs-comment">//[Array(2), Array(2), Array(2)] Array[0]=key,Array[1]=value</span><br><br><span class="hljs-comment">// 对象合并</span><br><span class="hljs-comment">//如果有重复的属性，以后面的为准</span><br><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">const</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> source2 = &#123; <span class="hljs-attr">a</span>:<span class="hljs-number">4</span> ,<span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-comment">//&#123;a:1,b:2,c:3&#125;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source1, source2);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<span class="hljs-comment">//&#123;a:4,b:2,c:3&#125;</span><br></code></pre></td></tr></table></figure><h3 id="声明对象的简写"><a href="#声明对象的简写" class="headerlink" title="声明对象的简写"></a>声明对象的简写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对象声明的简写</span><br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;老王&quot;</span>;<br><span class="hljs-keyword">const</span> age=<span class="hljs-number">59</span>;<br><br><span class="hljs-comment">//ES6之前   </span><br><span class="hljs-keyword">let</span> person=&#123;<br>    <span class="hljs-attr">name</span>:name,<br>    <span class="hljs-attr">age</span>:age<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(person);<br><span class="hljs-comment">//ES6之后</span><br><span class="hljs-comment">//自动匹配对应的属性名，属性名存在就自动匹配</span><br><span class="hljs-keyword">let</span> person2=&#123;<br>    name,<br>    age<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(person2);<br></code></pre></td></tr></table></figure><h3 id="对象中函数的简写"><a href="#对象中函数的简写" class="headerlink" title="对象中函数的简写"></a>对象中函数的简写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;老王&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">58</span>,<br>    <span class="hljs-comment">//ES6之前</span><br>    <span class="hljs-attr">eat</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">food</span>)&#123;<br>        <span class="hljs-comment">//调用内部属性用this</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;吃了&quot;</span>+food);<br>    &#125;,<br>    <span class="hljs-comment">//ES6 lambda表达式调用内部属性用类名</span><br>    <span class="hljs-attr">eat2</span>:<span class="hljs-function">(<span class="hljs-params">food</span>) =&gt;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(person.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;吃了&quot;</span>+food),<br>    <span class="hljs-comment">//ES6 新的函数定义方式</span><br>    <span class="hljs-title function_">eat3</span>(<span class="hljs-params">food</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;吃了&quot;</span>+food);<br>    &#125;<br>&#125;<br><br>person.<span class="hljs-title function_">eat</span>(<span class="hljs-string">&#x27;饭&#x27;</span>);<br>person.<span class="hljs-title function_">eat2</span>(<span class="hljs-string">&#x27;面&#x27;</span>);<br>person.<span class="hljs-title function_">eat3</span>(<span class="hljs-string">&#x27;汤&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="类的复制、合并"><a href="#类的复制、合并" class="headerlink" title="类的复制、合并"></a>类的复制、合并</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> person=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;老王&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">56</span>,<span class="hljs-attr">car</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bike&#x27;</span>&#125;&#125;<br> <span class="hljs-comment">//复制对象,是深复制，对象内部的对象也会复制</span><br> <span class="hljs-keyword">let</span> newperson=&#123;...person&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(newperson);<br><br><span class="hljs-keyword">const</span> obj1=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">const</span> obj2=&#123;<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;;<br><span class="hljs-keyword">const</span> obj3=&#123;<span class="hljs-attr">c</span>:<span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">//合并类,一样的，有重复的属性，以后面的为准</span><br><span class="hljs-keyword">let</span> newobj=&#123;...obj1,...obj2,...obj3&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(newobj);<br></code></pre></td></tr></table></figure><h3 id="promise-异步编排（需要前置知识-ajax"><a href="#promise-异步编排（需要前置知识-ajax" class="headerlink" title="promise 异步编排（需要前置知识-ajax"></a>promise 异步编排（需要前置知识-ajax</h3><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">13</span><br>&#125;<br><br><span class="hljs-keyword">let</span> girl=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">12</span><br>&#125;<br><br><span class="hljs-keyword">let</span> man=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;老王&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">59</span><br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;girl,man&#125;;<br><br><span class="hljs-comment">//三种导出方法</span><br><span class="hljs-comment">//1、 写在组件前（类、函数、对象......）导出 export let girl=&#123;...&#125;</span><br><span class="hljs-comment">//2、 底部导出 export &#123;boy,girl&#125;</span><br><span class="hljs-comment">//3、 默认导出组件 export default &#123;....&#125; </span><br></code></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">//导入方法</span></span><br><span class="language-javascript">       <span class="hljs-comment">//导入默认，xxx（随便定义一个名字），不需要加花括号</span></span><br><span class="language-javascript">       <span class="hljs-comment">//导入单个或多个属性，&#123;attribute1，attribute2...&#125; </span></span><br><span class="language-javascript">       <span class="hljs-comment">//导入全部      import *  as s from &quot;/persons.js&quot;; 需要取别名： * as xxx</span></span><br><span class="language-javascript">       <span class="hljs-keyword">import</span> xxx,&#123;girl,man&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;/persons.js&quot;</span>;</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(girl);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(xxx);</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(man);</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="JS同步异步问题"><a href="#JS同步异步问题" class="headerlink" title="JS同步异步问题"></a>JS同步异步问题</h1><p>js因为只能单线程执行的原因，所以默认只能异步操作</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>同步了，但没完全同步，getSubjectOneInfo()方法照样是异步的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>( <span class="hljs-function">()=&gt;</span>&#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSubjectOneInfo</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;this.getSubjectTwoInfo()&quot;</span>,<span class="hljs-number">500</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>构想：具体方法里面Promise给他干上去</p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p>async：必须声明在函数前面</p><p>await：等待谁做完工作</p><ol><li>这里是等待getSubjectOneInfo()结束再继续执行，但是getSubjectOneInfo()并不是同步执行的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getCourseInfo</span>(<span class="hljs-params"></span>)&#123;<br>     courseApi.<span class="hljs-title function_">getCourseInfoById</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">courseInfo</span>.<span class="hljs-property">courseId</span>)<br>       .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">courseInfo</span> =res.<span class="hljs-property">data</span><br>       &#125;)<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSimpleInfo</span>()<br>       <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSubjectOneInfo</span>()<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSubjectTwoInfo</span>()<br><br> &#125;,<br></code></pre></td></tr></table></figure><ol start="2"><li><p>解决方法：在函数里面干上个await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">getSubjectOneInfo</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行方法1&quot;</span>)<br>  <span class="hljs-keyword">await</span> subjectApi.<span class="hljs-title function_">getAllSubject</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行赋值&quot;</span>)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">subjectOneList</span>=res.<span class="hljs-property">data</span><br>    &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;方法1执行完毕,length:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">subjectOneList</span>.<span class="hljs-property">length</span>)<br>&#125;,<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-HTML+CSS</title>
      <link href="/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-HTML-CSS/"/>
      <url>/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-HTML-CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><ul><li><code>&lt;div&gt;</code>:用来布局，但是一行只能放一个<div> ——大盒子</li><li><code>&lt;span&gt;</code> : 用来布局，一行可以放多个<span>——  小盒子</li><li><code>&lt;img&gt;</code>:图片标签<ul><li>src属性：必填，写入图片路径</li><li>title属性：鼠标放在图片上显示的名字</li><li>alt：图片加载失败时显示</li><li>border：边框</li><li>width：宽度</li><li>height：高度</li></ul></li><li><code>&lt;a&gt;文本&lt;/a&gt;：</code> 链接<ul><li>href属性：href&#x3D;’ url’ 页面跳转<ul><li>href&#x3D;’#id’ 锚点，跳转到页面内对应id的标签位置</li></ul></li></ul></li></ul><h2 id="table-表格标签"><a href="#table-表格标签" class="headerlink" title="table 表格标签"></a>table 表格标签</h2><ul><li><p>一个<code>&lt;tr&gt;</code> 代表一行</p></li><li><p><code>&lt;th&gt;</code>表格头  一格内容</p></li><li><p>一个<code>&lt;td&gt;</code>代表 一格内容</p><ul><li><p>跨行合并：rowspan&#x3D;”合并单元格的个数”；最上侧单元格为目标单元格，写合并代码</p></li><li><p>跨列合并：colspan&#x3D;”合并单元格的个数”；最左侧单元格为目标单元格，写合并代码</p><p>合并完后删除多余单元格</p></li></ul></li><li><p><code>&lt;thead&gt;</code>将表格划分为头部区域，内部必须包含<code>&lt;tr&gt;</code>标签，一般位于第一行</p></li><li><p><code>&lt;tbody&gt;</code>将表格划分为主体区域</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     ......<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>     .......<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表（常用"><a href="#无序列表（常用" class="headerlink" title="无序列表（常用"></a>无序列表（常用</h3><p><code>&lt;ul&gt;</code>标签表示HTML页面中项目的无序列表, 一般会以项目符号呈现列表项,而列表项使用<code>&lt;li&gt;</code> 标签定义。</p><ul><li>无序列表的各个列表项之间没有顺序级别之分,是并列的。</li><li><code>ul&gt; &lt;/ul&gt;</code>能嵌套<code>li&gt;&lt;/li&gt;</code>,直接在<code>ul&gt; &lt;/ul&gt;</code>签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;与&lt;/i&gt;</code>之间相当于-个容器,可以容纳所有元素。</li><li>无序列表会带有自己的样式属性,但在实际使用时,我们会使用CSS来设置。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>西瓜<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>菠萝<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><ul>    <li>西瓜</li>    <li>香蕉</li>    <li>菠萝</li></ul><h3 id="有序列表（不常用"><a href="#有序列表（不常用" class="headerlink" title="有序列表（不常用"></a>有序列表（不常用</h3><p><code>&lt;ul&gt;</code>标签表示有序列表即为有排列顺序的列表, 其个列表项会按照一定的顺序排列定义。</p><ul><li>注意事项和<code>&lt;ul&gt;</code>标签一样</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>葡萄<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>石榴<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><ol>    <li>桃子</li>    <li>葡萄</li>    <li>石榴</li></ol><h3 id="自定义列表（常用"><a href="#自定义列表（常用" class="headerlink" title="自定义列表（常用"></a>自定义列表（常用</h3><ul><li>在HTML标签中, <code>&lt;dl&gt;</code>标签用于定义描述列表(或定义列表) ,该标签会与<code>&lt;dt&gt; </code>(定义项目&#x2F;名字)和<code>&lt;dd&gt;</code> (描述每一个项目&#x2F;名字) 一·起使用。</li><li><code>&lt;dl&gt; &lt;/dl&gt;</code>里面只能包含<code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code></li><li><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>个数没有限制,经常是一个<code>&lt;dt&gt;</code> 对应多个<code>&lt;dd&gt;</code>,</li></ul> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>水果<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>葡萄<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>菠萝<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><dl>    <dt>水果</dt>    <dd>葡萄</dd>    <dd>香蕉</dd>    <dd>菠萝</dd></dl><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li><code>&lt;form&gt;</code> 标签，用于传数据给后台</li></ul><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="&lt;input&gt;表单元素"></a><code>&lt;input&gt;</code>表单元素</h3><p><strong>type属性的属性值及其描述：</strong></p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮(多数情况下，用于通过JavaScript启动脚本)。</td></tr><tr><td>checkbok</td><td>定义复选框。</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传。</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段。</td></tr><tr><td>image</td><td>定义图像形式的提交按钮。</td></tr><tr><td>password</td><td>定义密码字段。该字段中的字符被掩码。</td></tr><tr><td>radio</td><td>定义单选按钮。</td></tr><tr><td>reset</td><td>定义重置按钮。重置按钮会清除表单中的所有数据。</td></tr><tr><td>submit</td><td>定义提交按钮。提交按钮会把表单数据发送到服务器。</td></tr><tr><td>text</td><td>定义单行的输入字段，用户可在其中输入文本。默认宽度为20个字符。</td></tr></tbody></table><p><strong>除type属性外，<code>&lt;input&gt;</code>标签还有其他很多属性,其常用属性如下:</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>由用户自定义</td><td>定义input元素的名称。</td></tr><tr><td>value</td><td>由用户自定义</td><td>规定input元素的值。</td></tr><tr><td>checked</td><td>checked</td><td>规定此input元素首次加载时应当被选中。</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度。</td></tr></tbody></table><ul><li><p>name 和 value是每个表单元素都有的属性值,主要给后台人员使用</p></li><li><p>name 表单元素的名字，<em><strong>要求单选按钮和复选框要有相同的name值</strong></em></p></li><li><p>checked 属性主要针对于<strong>单选按钮和复选框</strong>主要作用一打开页面,就要可以默认选中某个表单元素</p></li><li><p>maxlength 用户可以在表单元素输入的最大字符数,一般较少使用 (我在页面上直接代码给你扬了，根本没安全性 :laughing:</p></li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="&lt;lable&gt;标签"></a><code>&lt;lable&gt;</code>标签</h3><ul><li><code>&lt;label&gt;</code>标签为input元索定义标注(标签)。</li><li><code>&lt;label&gt;</code>标签用于绑定一个表单元素 当点击<code>&lt;label&gt;</code>标签内的文本时,浏览器就会自动将焦点(光标)转到或者<br>选择对应的表单元素上用来增加用户体验.</li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>邪道写法（直接把input放到lable里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>高 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>矮 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="标签（下拉表单"><a href="#标签（下拉表单" class="headerlink" title="&lt;select&gt;标签（下拉表单"></a><code>&lt;select&gt;</code>标签（下拉表单</h3><ul><li>在页面中,如果有多个选项让用户选择,并且想要节约页面空间时,我们可以使用<code>&lt;select&gt;</code>标签控件定义下拉列表.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">籍贯：<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>山东<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>福建<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>江西<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></p></li><li><p>在<code>&lt;option&gt;</code>中定义selected &#x3D;”selected“时，当前项即为默认选中项</p></li></ul><h3 id="文本域"><a href="#文本域" class="headerlink" title="&lt;textarea&gt;文本域"></a><code>&lt;textarea&gt;</code>文本域</h3><ul><li>较长的输入需要使用</li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p><img src="http://img.zenithzone.top/pic/202210172023922.png" alt="image"></p><h2 id="三种使用-CSS-的方法"><a href="#三种使用-CSS-的方法" class="headerlink" title="三种使用 CSS 的方法"></a>三种使用 CSS 的方法</h2><p>有三种插入样式表的方法：</p><ul><li><p>外部 CSS，写在<code>&lt;head&gt;</code>标签内</p><ul><li><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-bullet">-</span> <span class="hljs-string">内部 CSS，写在`&lt;head&gt;`标签内</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">在`&lt;style&gt;`标签内写样式</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">行内 CSS</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">直接写在标签内部，style=&quot;xx&quot;;</span><br><br><span class="hljs-comment">### 层叠顺序</span><br><br><span class="hljs-attribute">当为某个 HTML 元素指定了多个样式时，会使用哪种样式呢？</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">页面中的所有样式将按照以下规则“层叠”为新的“虚拟”样式表，其中第一优先级最高：</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">1. 行内样式（在 HTML 元素中）</span><br><span class="hljs-attribute">2. 外部和内部样式表（在 head 部分）</span><br><span class="hljs-attribute">3. 浏览器默认样式</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">## CSS选择器</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">格式 </span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">```css</span><br><span class="hljs-attribute">h1 &#123;</span><br><span class="hljs-attribute">  text-align</span><span class="hljs-punctuation">:</span> <span class="hljs-string">center;</span><br>  <span class="hljs-attribute">color</span><span class="hljs-punctuation">:</span> <span class="hljs-string">red;</span><br><span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">.intro &#123;</span><br><span class="hljs-attribute">  text-align</span><span class="hljs-punctuation">:</span> <span class="hljs-string">center;</span><br>  <span class="hljs-attribute">color</span><span class="hljs-punctuation">:</span> <span class="hljs-string">red;</span><br><span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">p,div &#123;</span><br><span class="hljs-attribute">  text-align</span><span class="hljs-punctuation">:</span> <span class="hljs-string">center;</span><br>  <span class="hljs-attribute">color</span><span class="hljs-punctuation">:</span> <span class="hljs-string">red;</span><br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p><strong>所有简单的css选择器</strong></p><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选取所有class&#x3D;”intro”</td></tr><tr><td>#id</td><td>#firstname</td><td>选取id&#x3D;”firstname”的元素</td></tr><tr><td>*</td><td>*</td><td>选取所有元素</td></tr><tr><td>element</td><td>p</td><td>选取所有<code>&lt;p&gt;</code>元素</td></tr><tr><td>element,element…</td><td>div,p</td><td>选取所有<code>&lt;div&gt;</code>元素和所有<code>&lt;p&gt;</code>元素</td></tr></tbody></table><h2 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*和java的doc注释一样*/</span><br></code></pre></td></tr></table></figure><h2 id="CSS颜色"><a href="#CSS颜色" class="headerlink" title="CSS颜色"></a>CSS颜色</h2><h3 id="RGB-值"><a href="#RGB-值" class="headerlink" title="RGB 值"></a>RGB 值</h3><p>在 CSS 中，可以使用下面的公式将颜色指定为 RGB 值：</p><p><strong>rgb(<em>red</em>, <em>green</em>, <em>blue</em>)</strong></p><h3 id="RGBA值"><a href="#RGBA值" class="headerlink" title="RGBA值"></a>RGBA值</h3><p><strong>rgba(<em>red</em>, <em>green</em>, <em>blue</em>, <em>alpha</em>)</strong></p><p><em>alpha</em> 参数是介于 0.0（完全透明）和 1.0（完全不透明）之间的数字</p><h3 id="HEX-值"><a href="#HEX-值" class="headerlink" title="HEX 值"></a>HEX 值</h3><p>在 CSS 中，可以使用以下格式的十六进制值指定颜色：</p><p><strong>#<em>rrggbb</em></strong></p><h3 id="HSL-值"><a href="#HSL-值" class="headerlink" title="HSL 值"></a>HSL 值</h3><p>在 CSS 中，可以使用色相、饱和度和明度（HSL）来指定颜色，格式如下：</p><p><strong>hsla(<em>hue</em>, <em>saturation</em>, <em>lightness</em>)</strong></p><h2 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h2><ul><li><p><strong>background-color</strong> ：设置背景颜色</p></li><li><p><strong>background-image</strong>：设置背景图片</p></li><li><p><strong>background-repeat：</strong>设置背景该如何重复，当图片无法填满背景时，会自动重复</p><ul><li>no-repeat ：不重复</li><li>repeat-x ：在x轴重复</li><li>repeat-y : 在y轴重复</li></ul></li><li><p><strong>opacity</strong>：为元素的背景添加透明度，其所有子元素都继承相同的透明度。这可能会使完全透明的元素内的文本难以阅读。</p><p>（所以推荐用rgba设置背景有透明度的背景）</p></li><li><p><strong>background-attachment</strong>：指定背景图像是应该滚动还是固定的（不会随页面的其余部分一起滚动）</p></li><li><p><strong>background-position：</strong>设置背景的开始位置</p></li><li><p><strong>background:</strong> <strong>简写属性</strong></p><ul><li>在使用简写属性时，属性值的顺序为：<ul><li>background-color</li><li>background-image</li><li>background-repeat</li><li>background-attachment</li><li>background-position</li></ul></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffffff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;tree.png&quot;</span>) no-repeat right top;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h2><ul><li><strong>border-style：</strong>设置边框样式</li><li><strong>border-color：</strong>设置边框颜色<ul><li>可以设置一到四个值</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-color</span>: red green blue yellow; <span class="hljs-comment">/* 上红、右绿、下蓝、左黄 */</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>border-width：</strong>设置边框宽度<ul><li>单值：作用于4个边框</li><li>双值：作用于上下、左右</li><li>四个值：分别作用于上、右、下、左</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span> <span class="hljs-number">20px</span>; <span class="hljs-comment">/* 上边框和下边框为 5px，其他边为 20px */</span><br>&#125;<br><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.two</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">20px</span> <span class="hljs-number">5px</span>; <span class="hljs-comment">/* 上边框和下边框为 20px，其他边为 5px */</span><br>&#125;<br><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.three</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">25px</span> <span class="hljs-number">10px</span> <span class="hljs-number">4px</span> <span class="hljs-number">35px</span>; <span class="hljs-comment">/* 上边框 25px，右边框 10px，下边框 4px，左边框 35px */</span><br>&#125;<br><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.four</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">10px</span>;<span class="hljs-comment">/*四个边框都是 10px*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>可以分别设置四个边框的属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">border-top-style</span>: dotted;<br>  <span class="hljs-attribute">border-right-style</span>: solid;<br>  <span class="hljs-attribute">border-bottom-style</span>: dotted;<br>  <span class="hljs-attribute">border-left-style</span>: solid;<br>&#125;<br><span class="hljs-comment">/*结果相同*/</span><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">border-style</span>: dotted solid;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>border</code> 属性是以下各个边框属性的<strong>简写属性</strong>：</p><ul><li><code>border-width</code></li><li><code>border-style</code>（必需）</li><li><code>border-color</code></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid red;<br>&#125;<br><span class="hljs-comment">/*下边框*/</span><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">6px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别自定义了四个边框的宽度、样式、颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#p3</span>&#123;<br>    <span class="hljs-attribute">border-style</span>: dotted solid  inset groove; <br>    <span class="hljs-attribute">border-color</span>: seagreen <span class="hljs-number">#00FFFF</span> burlywood yellow;  <br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">4px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.zenithzone.top/pic/202210172024783.png" alt="image"></p><ul><li><strong>border-radius：</strong>设置边框圆角</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-Ajax</title>
      <link href="/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Ajax/"/>
      <url>/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Ajax/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="1b98e7ce7d8becf6d32d08d6e55e1c0dc945e54a0ffca6a753ee2937e76ccc26"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git安装和使用</title>
      <link href="/2022/09/16/git%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/09/16/git%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息”  文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><ul><li><p><strong>在git bash里面可以使用linux命令</strong></p></li><li><p><em><strong>在使用git前，要先设置用户名和邮箱，否则不能实现提交功能（仅作为签名，与github、gitee账号无关联）</strong></em></p></li></ul><h2 id="git-init-初始化本地库"><a href="#git-init-初始化本地库" class="headerlink" title="git init 初始化本地库"></a>git init 初始化本地库</h2><p>进入本地库目录，<strong>右键使用 git bash</strong>打开命令窗口</p><p>使用 git init 命令创建本地库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo<br>$ git init<br>Initialized empty Git repository <span class="hljs-keyword">in</span> D:/Git-Space/git-demo/.git/<br></code></pre></td></tr></table></figure><h2 id="git-status-查看本地库状态"><a href="#git-status-查看本地库状态" class="headerlink" title="git status 查看本地库状态"></a>git status 查看本地库状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ba">y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br>$ git status<br>On branch master<br><br>No commits yet//还没有提交过文件（commit）<br></code></pre></td></tr></table></figure><h2 id="git-add-将文件添加到暂存区"><a href="#git-add-将文件添加到暂存区" class="headerlink" title="git add 将文件添加到暂存区"></a>git add 将文件添加到暂存区</h2><p>暂存区的文件可以被删除，删除暂存区的文件不会影响本地库的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br>$ git <span class="hljs-built_in">rm</span> --cached hello.txt<br><span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;hello.txt&#x27;</span><br><br>y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br>$ ll<br>total 1<br>-rw-r--r-- 1 y7k 197609 122 Jul 28 15:32 hello.txt<br></code></pre></td></tr></table></figure><h2 id="git-commit-m-“XXXX”-XXX-XX-将暂存区文件提交到本地库"><a href="#git-commit-m-“XXXX”-XXX-XX-将暂存区文件提交到本地库" class="headerlink" title="git commit -m “XXXX” XXX.XX 将暂存区文件提交到本地库"></a>git commit -m “XXXX” XXX.XX 将暂存区文件提交到本地库</h2><ul><li>提交后使用 <strong>git reflog 查看版本</strong>  ，<strong>使用 git log查看版本详细信息</strong></li></ul><h2 id="版本迭代（提交更新）"><a href="#版本迭代（提交更新）" class="headerlink" title="版本迭代（提交更新）"></a>版本迭代（提交更新）</h2><ul><li><p>修改本地文件后，提交到暂存区，再提交到本地库 可以通过查看日志文件查看提交记录</p></li><li><p>本地文件不会保留多个版本</p></li><li><p>修改本地文件后，查看本地库状态，会显示已经修改的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br>$ git status<br>On branch master<br>Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)<br>  (use <span class="hljs-string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="hljs-keyword">in</span> working directory)<br>        modified:   hello.txt//红色<br></code></pre></td></tr></table></figure></li><li><p>提交到暂存区后，再次查看本地库状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br> $ git add hello.txt<br> warning: LF will be replaced by CRLF <span class="hljs-keyword">in</span> hello.txt.<br> The file will have its original line endings <span class="hljs-keyword">in</span> your working directory<br>  <br> y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br> $ git status<br> On branch master<br> Changes to be committed:<br>   (use <span class="hljs-string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)<br>         modified:   hello.txt//绿色<br></code></pre></td></tr></table></figure></li><li><p>提交到本地库，查看提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br>$ git reflog<br>958e31f (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: second commint<br>27f7c62 HEAD@&#123;1&#125;: commit (initial): first commit<br></code></pre></td></tr></table></figure></li></ul><h2 id="版本穿梭-git-reset-–hard-版本号"><a href="#版本穿梭-git-reset-–hard-版本号" class="headerlink" title="版本穿梭 git reset –hard 版本号"></a>版本穿梭 git reset –hard 版本号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br>$ git reset --hard 27f7c62<br>HEAD is now at 27f7c62 first commit<br><br>y7k@LAPTOP-PF260J5U MINGW64 /d/Git-Space/git-demo (master)<br>$ git reflog<br>27f7c62 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 27f7c62<br>958e31f HEAD@&#123;1&#125;: commit: second commint<br>27f7c62 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): first commit<br></code></pre></td></tr></table></figure><ul><li>Git 切换版本，底层其实是移动的HEAD指针</li></ul><h1 id="git-分支"><a href="#git-分支" class="headerlink" title="git 分支"></a>git 分支</h1><h2 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h2><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。(分支底层其实也是指针的引用)</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-06-52-1bdecaa5a16a8b97872d7e2c6dc4e8b0-202210172036767-eb41e4.png" alt="image"></p><h2 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h2><ul><li>同时并行推进多个功能开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul><h2 id="分支操作常用命令"><a href="#分支操作常用命令" class="headerlink" title="分支操作常用命令"></a>分支操作常用命令</h2><table><thead><tr><th align="left">命令名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">git branch 分支名</td><td align="left">创建分支</td></tr><tr><td align="left">git branch -v</td><td align="left">查看分支</td></tr><tr><td align="left">git checkout 分支名</td><td align="left">切换分支</td></tr><tr><td align="left">git merge 分支名</td><td align="left">把指定的分支合并到当前分支上</td></tr></tbody></table><h2 id="合并冲突分支"><a href="#合并冲突分支" class="headerlink" title="合并冲突分支"></a>合并冲突分支</h2><p><strong>冲突产生的原因:</strong></p><ul><li>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。</li></ul><p><strong>解决方法：</strong></p><ul><li>手动修改文件</li><li>手动修改后的提交命令为：<strong>git commit –m “xxxx”</strong> 后面不需要跟文件名，否则会报错</li></ul><h1 id="远程库使用"><a href="#远程库使用" class="headerlink" title="远程库使用"></a>远程库使用</h1><p><strong>注意:</strong> push是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push的操作是会被拒绝的。也就是说，要想push成功，一定要保证本地库的版本要比远程库的版本高!因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别!如果本地的代码版本已经落后，切记要先pull拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送! </p><h2 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h2><ul><li>远程库的名字最好和本地库的名字一致</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-07-08-3088bc06433892b3783942c919e9de1f-202210172036620-aad5c7.png" alt="image"></p><h2 id="git-bash-远程仓库操作命令"><a href="#git-bash-远程仓库操作命令" class="headerlink" title="git bash 远程仓库操作命令"></a>git bash 远程仓库操作命令</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库别名|远程地址 远程分支名</td><td>将远程仓库对分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h2 id="clon会做的操作"><a href="#clon会做的操作" class="headerlink" title="clon会做的操作"></a>clon会做的操作</h2><ul><li>拉取代码</li><li>初始化本地仓库</li><li>创建别名</li></ul><h2 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h2><ul><li>任何人都可以<strong>pull</strong>远程仓库的代码</li><li>除了库的拥有者之外，想要提交代码到远程仓库都需要凭证</li><li>凭证为库的拥有者发出邀请，受邀者加入后即可提交代码到远程仓库</li></ul><h3 id="远程仓库的拥有者发出邀请-github"><a href="#远程仓库的拥有者发出邀请-github" class="headerlink" title="远程仓库的拥有者发出邀请(github)"></a>远程仓库的拥有者发出邀请(github)</h3><ul><li><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-07-13-99a47f3e4b3af5cf5621618ef10d6529-202210172036192-1f9e70.png" alt="image"></li></ul><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><h3 id="非团队成员修改远程仓库"><a href="#非团队成员修改远程仓库" class="headerlink" title="非团队成员修改远程仓库"></a>非团队成员修改远程仓库</h3><ul><li><strong>fork</strong>远程仓库后再<strong>clon</strong></li><li>修改完成后要发送<strong>pull requests</strong>请求</li><li>待远程仓库管理员审核后决定代码是否能被push</li><li>comment功能是个大型聊天室……:leaves:（怪不得叫全球最大同性交友平台23333）</li></ul><h2 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h2><ul><li><p>进入用户目录(<strong>比如 C:\Users\y7k</strong>)，打开git bash</p></li><li><p>使用— <strong>ssh-keygen -t rsa -C 描述</strong>  — 命令创建ssh秘钥</p></li><li><p>按三次回车</p></li><li><p>复制秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">y7k@LAPTOP-PF260J5U MINGW64 ~/.ssh<br>$ ll<br>total 5<br>-rw-r--r-- 1 y7k 197609 2590  7月 28 21:35 id_rsa<br>-rw-r--r-- 1 y7k 197609  560  7月 28 21:35 id_rsa.pub<br><br>y7k@LAPTOP-PF260J5U MINGW64 ~/.ssh<br>$ <span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>进入github–&gt; settings–&gt;SSH and GPG keys–&gt;添加ssh秘钥</p><ul><li>bash在全屏状态复制，否则格式有问题</li></ul></li><li><p>push 和 pull 的用法和普通链接一样，只是不需要登录了</p></li></ul><h1 id="idea集成Git"><a href="#idea集成Git" class="headerlink" title="idea集成Git"></a>idea集成Git</h1><h2 id="配置Git忽略文件"><a href="#配置Git忽略文件" class="headerlink" title="配置Git忽略文件"></a>配置Git忽略文件</h2><p>有些文件与项目的实际功能无关，不参与服务器上的部署运行。把它们忽略掉能够屏蔽IDEA工具之间的差异。</p><p>创建忽略规则文件<strong>xxxx.ignore（建议是git.ignore）</strong>，建议此文件放在用户目录下</p><ul><li><p>git.ignore 模板 （在用户目录下）</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Compiled class file</span><br>*<span class="hljs-string">.class</span><br><br><span class="hljs-comment"># Log file</span><br>*<span class="hljs-string">.log</span><br><br><span class="hljs-comment"># BlueJ files</span><br>*<span class="hljs-string">.ctxt</span><br><br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br><span class="hljs-string">.mtj.tmp/</span><span class="hljs-comment"># Package Files #</span><br>*<span class="hljs-string">.jar</span><br>*<span class="hljs-string">.war</span><br>*<span class="hljs-string">.nar</span><br>*<span class="hljs-string">.ear</span><br>*<span class="hljs-string">.zip</span><br>*<span class="hljs-string">.tar.gz</span><br>*<span class="hljs-string">.rar</span><br><br>hs_err_pid*<br><br><span class="hljs-string">.classpath</span><br><span class="hljs-string">.project</span><br><span class="hljs-string">.settings</span><br>target<br><span class="hljs-string">.idea</span><br>*<span class="hljs-string">.iml</span><br></code></pre></td></tr></table></figure></li><li><p>在.gitconfig文件中引用忽略配置文件（在用户的目录下）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[core]<br>excludesfile = C:<span class="hljs-regexp">/Users/y</span>7kgit.ignore<br>注意：这里用正斜线 <span class="hljs-string">&quot;/&quot;</span> 不要使用反斜线<span class="hljs-string">&quot;\&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="设置Git路径"><a href="#设置Git路径" class="headerlink" title="设置Git路径"></a>设置Git路径</h2><ul><li>idea–&gt; 设置 –&gt; 版本控制 –&gt;Git –&gt;设置Git路径（Git&#x2F;cmd&#x2F;Git.exe）</li><li>测试后显示版本表示配置成功</li></ul><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-07-48-309434c161cb1f56de0abfad5fc871d6-202210172037431-506a6d.png" alt="image"></p><ul><li><p>提交多次后，可以使用版本穿梭功能 下方 Git–&gt; 日志–&gt; 选择版本–&gt; 签出修订‘xxxxx’</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-07-52-d19bf0c1d07042244c5dd0c797ae327a-202210172037279-defa96.png" alt="image"></p><ul><li>可以看到代码已经变回了之前的版本</li></ul></li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li><p><strong>添加分支：</strong>右下角 分支–&gt; 添加并签出（checkout）分支</p></li><li><p><strong>合并分支：</strong> 提交后，合并即可</p></li><li><p><strong>合并冲突分支：</strong>idae会自动显示冲突代码，手动选择后即可合并，会自动提交</p></li></ul><h1 id="idea集成GitHub"><a href="#idea集成GitHub" class="headerlink" title="idea集成GitHub"></a>idea集成GitHub</h1><h2 id="登录GitHub"><a href="#登录GitHub" class="headerlink" title="登录GitHub"></a>登录GitHub</h2><ul><li>科学上网</li><li>使用token口令，创建token时全部权限均打钩√</li></ul><h2 id="使用idae创建远程仓库"><a href="#使用idae创建远程仓库" class="headerlink" title="使用idae创建远程仓库"></a>使用idae创建远程仓库</h2><ul><li>Git–&gt; 在GitHub上共享项目</li></ul><h2 id="将本地推送到远程仓库"><a href="#将本地推送到远程仓库" class="headerlink" title="将本地推送到远程仓库"></a>将本地推送到远程仓库</h2><ul><li><p>推荐使用ssh登录（配置方法看上文）</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-07-56-71d3fc1faaaaaaa0b656f834923dc8de-202210172037626-a9533b.png" alt="image"></p></li></ul><h2 id="拉取远程库代码"><a href="#拉取远程库代码" class="headerlink" title="拉取远程库代码"></a>拉取远程库代码</h2><ul><li><p>远程库代码已经更新了</p></li><li><p>点击更新项目（pull）即可，同样推荐使用ssh链接</p></li></ul><h2 id="clon远程库的项目"><a href="#clon远程库的项目" class="headerlink" title="clon远程库的项目"></a>clon远程库的项目</h2><ul><li>新建项目时选择来着版本控制的项目即可</li></ul><ul><li>同样能使用ssh链接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win平台搭建本地阿里云dav</title>
      <link href="/2022/09/16/win%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E9%98%BF%E9%87%8C%E4%BA%91dav/"/>
      <url>/2022/09/16/win%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E9%98%BF%E9%87%8C%E4%BA%91dav/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>本人一直使用这套阿里云盘挂载到本地的方案，使用了少说有一年了，看视频非常的快，很舒服。但七月初突然没法用了，原先使用的是jar包形式的运行的软件现在更新成了可执行文件的形式，所以小小的重新配置了一遍。个人觉得这套方案十分不错，故分享给大家（当然大概没几个人会看到哈哈哈）</p><p>值得说明的是：<em><strong>所谓的将阿里云盘挂载到本地其实是使用时将相应的文件缓存到本地</strong></em>（所以使用时需要配置，这个下面会提到），不过得益于阿里云的速度，看视频几乎不会卡顿（看4k版本的冰与火之歌秒打开，秒播放）。再结合资源的丰富度，个人认为是一种不错的使用方式。</p><p>此方案仅适用于win，测试平台仅包括win10</p><p>首先给出要用的软件的下载地址：</p><p><a href="https://github.com/winsw/winsw/releases/tag/v2.11.0">winsm下载</a></p><p><a href="https://github.com/messense/aliyundrive-webdav/releases/tag/v1.7.1">aliyundrive-webdav下载</a></p><p><a href="https://www.raidrive.com.cn/">RaiDrive下载</a></p><p><a href="https://www.aliyundrive.com/s/TTmzh2GfJHk">xml文件参考下载</a></p><h1 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h1><h2 id="1、创建一个目录，将aliyundrive-webdav-exe和winsm-exe放到该目录下，并创建一个xml文件用于配置。xml文件的名字可自定义，winsm-exe（这三个文件都可改名）"><a href="#1、创建一个目录，将aliyundrive-webdav-exe和winsm-exe放到该目录下，并创建一个xml文件用于配置。xml文件的名字可自定义，winsm-exe（这三个文件都可改名）" class="headerlink" title="1、创建一个目录，将aliyundrive-webdav.exe和winsm.exe放到该目录下，并创建一个xml文件用于配置。xml文件的名字可自定义，winsm.exe（这三个文件都可改名）"></a>1、创建一个目录，将<code>aliyundrive-webdav.exe</code>和<code>winsm.exe</code>放到该目录下，并创建一个<code>xml文件</code>用于配置。<code>xml文件</code>的名字可自定义，<code>winsm.exe</code>（这三个文件都可改名）</h2><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-02-0fceb17df7a05fb6659560bd11332e31-202210172038114-9275b1.png" alt="image"></p><p>请忽略log文件。这里我将<code>winsm.exe</code>改名为了<code>webdav.exe</code>，用于配置的<code>xml文件</code>为<code>webdav.xml</code></p><h2 id="2、登陆阿里云盘，获取refresh-token"><a href="#2、登陆阿里云盘，获取refresh-token" class="headerlink" title="2、登陆阿里云盘，获取refresh token"></a>2、登陆阿里云盘，获取refresh token</h2><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-06-6eaa0fd8f845ccb60a98a911bb915ae9-202210172038051-ddb565.png" alt="image-20220407095808714"></p><p>得到的token先保留着，下一步使用</p><h2 id="3、修改配置文件webdav-xml"><a href="#3、修改配置文件webdav-xml" class="headerlink" title="3、修改配置文件webdav.xml"></a>3、修改配置文件webdav.xml</h2><p>配置文件可参考winsw的github地址<a href="https://github.com/winsw/winsw">winsw&#x2F;winsw: A wrapper executable that can run any executable as a Windows service, in a permissive license. (github.com)</a></p><p>也可以用我上传的</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-10-94ac1d9ddf0a79f2c5f2b4d3e099381a-202210172038477-e28a15.png" alt="image-20220707111214693"></p><ul><li>填入你的refresh token</li><li>第十四行代码（我给的xml配置文件）可以指定<code>aliyundrive-webdav.exe的路径</code>和本地登陆的用户名和密码，可自行修改</li></ul><h2 id="4、cmd进入到webjar文件夹路径"><a href="#4、cmd进入到webjar文件夹路径" class="headerlink" title="4、cmd进入到webjar文件夹路径"></a>4、cmd进入到webjar文件夹路径</h2><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-14-ba5b617848f9ea0f5091e86d8b60c0ee-202210172038281-8a0991.png" alt="image-20220407100138632"></p><p>执行 webdav.exe install 和 webdav.exe start</p><h2 id="5、查看services是否存在该服务（注：服务名和id可在配置文件webdav-xml里修改"><a href="#5、查看services是否存在该服务（注：服务名和id可在配置文件webdav-xml里修改" class="headerlink" title="5、查看services是否存在该服务（注：服务名和id可在配置文件webdav.xml里修改"></a>5、查看services是否存在该服务（注：服务名和id可在配置文件webdav.xml里修改</h2><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-18-9a53b858fd3b80b143df53d23c8e83a7-202210172038598-62e986.png" alt="image-20220407100347200"></p><p>设置为自动并确认启动成功</p><h2 id="6、浏览器访问localhost-8999-输入设置的账号和密码（端口号一样在配置文件里改"><a href="#6、浏览器访问localhost-8999-输入设置的账号和密码（端口号一样在配置文件里改" class="headerlink" title="6、浏览器访问localhost:8999 输入设置的账号和密码（端口号一样在配置文件里改"></a>6、浏览器访问localhost:8999 输入设置的账号和密码（端口号一样在配置文件里改<img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-21-006e60f004347f08d5b1fb3f68637c0b-202210172039203-ae70d8.png" alt="image-20220407100435182"></h2><p>出现该页面即配置成功，进不去那就是你账号密码搞忘了，看配置文件去</p><h2 id="7、安装raidrive"><a href="#7、安装raidrive" class="headerlink" title="7、安装raidrive"></a>7、安装raidrive</h2><p>右上角添加，选择NAS-&gt;WebDav</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-25-2f9549afcfbdd7a150e9013bc55e14bc-202210172039790-b80e50.png" alt="image-20220407100757669"></p><p>示例：</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-29-a9d225d036b9171dae557d13abc52728-202210172039190-f93a67.png" alt="image-20220407100817550"></p><p>注意：不要勾选地址选项，不然访问的是https,这里原先配置的是http。</p><p>设置临时目录（缓存目录，不设置默认在C盘）</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-32-3162df246968bf67fe3b2df1b6d67732-202210172039555-fcb58e.png" alt="image-20220707114225844"></p><h2 id="8、效果"><a href="#8、效果" class="headerlink" title="8、效果"></a>8、效果</h2><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-39-bdaecc173641b3440e7533388b93da81-202210172039290-d4178f.png" alt="image-20220407100936460"></p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-10-35-313829c1f965fdb71040c12d78b6e6e6-202210172039542-2c6df0.png" alt="image-20220407100945508"></p><p>视频文件秒打开，文件系统结构和阿里云web页面看到的一致，可添加、删除、修改文件</p><h2 id="9、使用到的项目"><a href="#9、使用到的项目" class="headerlink" title="9、使用到的项目"></a>9、使用到的项目</h2><p><a href="https://github.com/winsw/winsw">winsw&#x2F;winsw: A wrapper executable that can run any executable as a Windows service, in a permissive license. (github.com)</a></p><p><a href="https://github.com/messense/aliyundrive-webdav">messense&#x2F;aliyundrive-webdav: 阿里云盘 WebDAV 服务 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> win </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记迁移-Mysql</title>
      <link href="/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Mysql/"/>
      <url>/2022/09/16/%E7%AC%94%E8%AE%B0%E8%BF%81%E7%A7%BB-Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="一些基本操作及注意点-基础篇"><a href="#一些基本操作及注意点-基础篇" class="headerlink" title="一些基本操作及注意点(基础篇)"></a>一些基本操作及注意点(基础篇)</h1><p>基于尚硅谷的视频与资料<a href="https://www.bilibili.com/video/BV1iq4y1u7vj?p=19">【宋红康】MySQL数据库（mysql安装&#x2F;基础&#x2F;高级&#x2F;优化）_哔哩哔哩_bilibili</a> </p><p>练习使用的数据库基于尚硅谷</p><h2 id="一、SELECT相关"><a href="#一、SELECT相关" class="headerlink" title="一、SELECT相关"></a>一、SELECT相关</h2><h3 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h3><ul><li>使用关键字<code>AS</code>，如果别名需要存在空格，用<code>&quot;&quot;</code> </li><li><code>AS</code>关键字可以省略；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">AS</span> name, commission_pct comm<br><span class="hljs-keyword">FROM</span>   employees;<br></code></pre></td></tr></table></figure><h3 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h3><ul><li><code>DISTANCT</code>关键字去除重复行</li><li><code>DISTANCT</code>跟在<code>SELECT</code>后面，不可以跟在单独的列名后面，它是对所有的数据去重</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id <br><span class="hljs-keyword">FROM</span>   employees;<br></code></pre></td></tr></table></figure><h3 id="着重号"><a href="#着重号" class="headerlink" title="着重号"></a>着重号</h3><p>为了避免数据库名或者用表明与SQL语句的保留字段相同而产生冲突，与保留字段相同的数据库名或表名用  &#96;&#96;（着重号）引用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">ORDER</span>`;<br></code></pre></td></tr></table></figure><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><ul><li>所有运算符或列值遇到null值，运算的结果都为null</li><li>空值不等于空字符串。一个空字符串的长度是 0，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。</li></ul><h3 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h3><p>SELECT后面跟一个不存在的列名，那么查询的结果会有一列与列名相同的值，在特殊场景有用；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT &#x27; 尚硅谷&#x27;, email<br>    -&gt; FROM employees;<br>+---------+----------+<br>| 尚硅谷  | email    |<br>+---------+----------+<br>|  尚硅谷 | ABANDA   |<br>|  尚硅谷 | ABULL    |<br>|  尚硅谷 | ACABRIO  |<br>|  尚硅谷 | AERRAZUR |<br>|  尚硅谷 | AFRIPP   |<br>|  尚硅谷 | AHUNOLD  |<br>|  尚硅谷 | AHUTTON  |<br>|  尚硅谷 | AKHOO    |<br></code></pre></td></tr></table></figure><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>加减乘除取余<code>+ -  * (/或DIV）（%或MOD)  </code></p><ul><li>需要注意的是 <code>+</code>不适用与字符串的拼接，字符串拼接用CONCAT()实现</li><li><code>+</code>遇到非数值类型时，会尝试转型，转型失败则设值为0</li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><h4 id="符号运算符类型"><a href="#符号运算符类型" class="headerlink" title="符号运算符类型"></a>符号运算符类型</h4><p>大多数与编程语言一致，需要注意的几个点：</p><ul><li>相等用<code>=</code>而不是<code>==</code></li><li>不相等除了用<code>!=</code> 还可以用<code>&lt;&gt;</code></li><li>安全等于<code>&lt;=&gt;</code>安全地判断两个值是否相等，与<code>=</code>的<strong>唯一区别是可以用于判断值是否为NULL</strong></li></ul><h4 id="非符号运算符类型"><a href="#非符号运算符类型" class="headerlink" title="非符号运算符类型"></a>非符号运算符类型</h4><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>IS NULL</td><td>为空运算符</td><td>判断值、字符串或表达式是否为空</td><td>SELECT B FROM TABLE WHERE A IS NULL</td></tr><tr><td>IS NOT NULL</td><td>不为空运算符</td><td>判断值、字符串或表达式是否不为空</td><td>SELECT B FROM TABLE WHERE A IS NOT NULL</td></tr><tr><td>LEAST</td><td>最小值运算符</td><td>在多个值中返回最小值</td><td>SELECT D FROM TABLE WHERE C LEAST(A,B)</td></tr><tr><td>GREATEST</td><td>最大值运算符</td><td>在多个值中返回最大值</td><td>SELECT D FROM TABLE WHERE C GREATEST(A,B)</td></tr><tr><td>BETWEEN （上界）AND（下界）</td><td>两值之间的运算符</td><td>判断一个值是否在两个值之间</td><td>SELECT D FROM TABLE WHERE C BETWEEN A AND B</td></tr><tr><td>ISNULL</td><td>为空运算符</td><td>判断一个值、字符串或表达式是否为空</td><td>SELECT B FROM TABLE WHERE A ISNULL</td></tr><tr><td>IN</td><td>属于运算符</td><td>判断一个值是否为列表中的任意一个值</td><td>SELECT D FROM TABLE WHERE C IN(A, B)</td></tr><tr><td>NOT IN</td><td>不属于运算符</td><td>判断一个值是否不是一个列表中的任意一个值</td><td>SELECTD FROM TABLE WHEREC NOT IN(A,B)</td></tr><tr><td>LIKE</td><td>模糊匹配运算符</td><td>判断一个值是否符合模糊匹配规则</td><td>SELECT C FROM TABLE WHERE A LIKE B</td></tr><tr><td>REGEXP</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式的规则</td><td>SELECT C FROM TABLE WHERE A REGEXP B</td></tr><tr><td>RLIKE</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式的规则</td><td>SELECT C FROM TABLE WHERE A RLIKE B</td></tr></tbody></table><p>一些小示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"> #使用安全等于查询全部commission_pct不为<span class="hljs-keyword">null</span>的数据<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-operator">&lt;=&gt;</span> <span class="hljs-keyword">NULL</span> ;<br><br>#使用安<span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>查询全部commission_pct为<span class="hljs-keyword">null</span>的数据<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> ;<br><br># 输出字母排序比较小的值<br><span class="hljs-keyword">SELECT</span> LEAST(first_name,last_name)<br><span class="hljs-keyword">FROM</span> employees<br><br>#查询工资在<span class="hljs-number">4000</span>到<span class="hljs-number">6000</span>的数据 ，若查询不在这个范围的值，可以使用<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> .. <span class="hljs-keyword">AND</span> ..<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <br>employees<br><span class="hljs-keyword">WHERE</span>  salary  <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">4000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">6000</span>;<br><br># 离散查询工资为<span class="hljs-number">10000</span>，<span class="hljs-number">20000</span>,<span class="hljs-number">3000</span> 的数据<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <br>employees<br><span class="hljs-keyword">WHERE</span> salary  <span class="hljs-keyword">IN</span> (<span class="hljs-number">1000</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">3000</span>);<br><br># 进行模糊查询<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <br>employees<br><span class="hljs-keyword">WHERE</span>  first_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>正则表达式与其他编程语言通用</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>NOT 或 !</td><td>逻辑非</td></tr><tr><td>AND 或 &amp;&amp;</td><td>逻辑与</td></tr><tr><td>OR 或 ||</td><td>逻辑或</td></tr><tr><td>XOR</td><td>逻辑异或</td></tr></tbody></table><ul><li>XOR逻辑异或：返回两个条件只满足一个的结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#返回first_name包含a，last_name不包含a；和 first_name不包含a，last_name包含a的结果<br><span class="hljs-keyword">SELECT</span> first_name,last_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span> XOR last_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="三、排序和分页"><a href="#三、排序和分页" class="headerlink" title="三、排序和分页"></a>三、排序和分页</h2><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>使用 ORDER BY 子句排序</li><li><strong>ASC</strong>（ascend）: 升序</li><li><strong>DESC</strong>（descend）:降序</li><li>ORDER BY 子句在SELECT语句的结尾</li><li>可以使用不在SELECT列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第<br>一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> first_name,last_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span> XOR last_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> first_name <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>为了减少负载，或是只需要几条数据，使用分页操作</p><ul><li>格式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">LIMIT [位置偏移量,] 行数<br><span class="hljs-comment">--前10条记录：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">10</span>;<br>或者<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 LIMIT <span class="hljs-number">10</span>;<br><span class="hljs-comment">--第11至20条记录：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 LIMIT <span class="hljs-number">10</span>,<span class="hljs-number">10</span>;<br><span class="hljs-comment">--第21至30条记录： </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 LIMIT <span class="hljs-number">20</span>,<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移<br>量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是<br>1，以此类推）；第二个参数“行数”指示返回的记录条数。</p><h2 id="四、多表查询"><a href="#四、多表查询" class="headerlink" title="四、多表查询"></a>四、多表查询</h2><p>笛卡尔积：不要忘记使用连接语句就不会出现</p><p>别名</p><ul><li>查询时为各个表加上别名，可以增加查询语句的可读性；</li><li>加了别名后，记得为不是独立某个表独有的字段加上<code>表名.</code> </li><li>据说某厂规范为t1.t2…tn;</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.employee_id, e.last_name, e.department_id,<br>       d.department_id, d.location_id<br><span class="hljs-keyword">FROM</span>   employees e , departments d<br><span class="hljs-keyword">WHERE</span>  e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></td></tr></table></figure><h4 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h4><h5 id="1、等值查询和非等值查询"><a href="#1、等值查询和非等值查询" class="headerlink" title="1、等值查询和非等值查询"></a>1、等值查询和非等值查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">#等值查询 连接条件为 “<span class="hljs-operator">=</span>”<br><span class="hljs-keyword">SELECT</span> employees.employee_id, employees.last_name, <br>       employees.department_id, departments.department_id,<br>       departments.location_id<br><span class="hljs-keyword">FROM</span>   employees, departments<br><span class="hljs-keyword">WHERE</span>  employees.department_id <span class="hljs-operator">=</span> departments.department_id;#连接条件为 “<span class="hljs-operator">=</span>”<br>#非等值查询 <br><span class="hljs-keyword">SELECT</span> e.last_name, e.salary, j.grade_level<br><span class="hljs-keyword">FROM</span>   employees e, job_grades j<br><span class="hljs-keyword">WHERE</span>  e.salary <span class="hljs-keyword">BETWEEN</span> j.lowest_sal <span class="hljs-keyword">AND</span> j.highest_sal;#不是“<span class="hljs-operator">=</span>”号连接的都是非等值，这里是通过界限连接两表<br></code></pre></td></tr></table></figure><h5 id="2、自连接和非自连接"><a href="#2、自连接和非自连接" class="headerlink" title="2、自连接和非自连接"></a>2、自连接和非自连接</h5><p>字面意思，连接自己和自己的多表查询叫自连接，上文的多个不同的表的查询叫非自连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-number">6.</span>选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式<br>#employees   Emp#    manager Mgr#<br>#kochhar     <span class="hljs-number">101</span>     king    <span class="hljs-number">100</span><br><span class="hljs-keyword">SELECT</span> t1.first_name employees ,t1.employee_id Emp ,t2.first_name manager ,t2.employee_id<br><span class="hljs-keyword">FROM</span> employees t1 <span class="hljs-keyword">JOIN</span> employees t2 <br><span class="hljs-keyword">WHERE</span> t1.manager_id <span class="hljs-operator">=</span> t2.department_id;<br></code></pre></td></tr></table></figure><h5 id="3、内连接和外连接"><a href="#3、内连接和外连接" class="headerlink" title="3、内连接和外连接"></a>3、内连接和外连接</h5><p>除了查询满足条件的记录以外，外连接还可以查询某一方不满足条件的记录</p><ul><li><p>内连接: 合并具有同一列的两个以上的表的行, 结果集中不包含一个表与另一个表不匹配的行</p></li><li><p>外连接: 两个表在连接过程中除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的</p></li><li><p>行 ，这种连接称为左（或右） 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。</p></li><li><p>如果是左外连接，则连接条件中左边的表也称为 <code>主表</code> ，右边的表称为<code> 从表</code> 。</p></li><li><p>如果是右外连接，则连接条件中右边的表也称为 <code>主表 </code>，左边的表称为 <code>从表</code>。</p></li></ul><h6 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h6><p>在 <strong>SQL92</strong> 中采用（+）代表从表所在的位置。即左或右外连接中，(+) 表示哪个是从表。<br>Oracle 对 SQL92 支持较好，而 <strong>MySQL 则不支持 SQL92 的外连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">#左外连接<br><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees ,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id(<span class="hljs-operator">+</span>);<br>#右外连接<br><span class="hljs-keyword">SELECT</span> last_name,department_name<br><span class="hljs-keyword">FROM</span> employees ,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id(<span class="hljs-operator">+</span>) <span class="hljs-operator">=</span> departments.department_id;<br></code></pre></td></tr></table></figure><p>SQL99 :<code>JOIN ... ON</code></p><p><strong>mysql中最规范的查询方法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> table1.column, table2.column,table3.column<br><span class="hljs-keyword">FROM</span> table1<br>    <span class="hljs-keyword">JOIN</span> table2 <span class="hljs-keyword">ON</span> table1 和 table2 的连接条件<br>        <span class="hljs-keyword">JOIN</span> table3 <span class="hljs-keyword">ON</span> table2 和 table3 的连接条件<br>#内连接&quot;INNER JOIN&quot; 省略为 &quot;JOIN&quot;<br>#外连接 &quot;LEFT OUTER JOIN &quot; 省略为 &quot;LEFT JOIN&quot; <br></code></pre></td></tr></table></figure><h6 id="全外连接（FULL-OUTER-JOIN）"><a href="#全外连接（FULL-OUTER-JOIN）" class="headerlink" title="全外连接（FULL OUTER JOIN）"></a>全外连接（FULL OUTER JOIN）</h6><p>除满足查询条件的结果外，还包括两表不匹配的行</p><p>使用<code>FULL OUTER JOIN</code>关键字（一样为SQL99规范），然而MYSQL不支持……</p><h4 id="UNION关键字"><a href="#UNION关键字" class="headerlink" title="UNION关键字"></a>UNION关键字</h4><ul><li><p>为了解决mysql不支持<code>FULL OUTER JOIN</code>，使用UNION方法来获得满连接</p></li><li><p>合并查询结果 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并<br>时，<strong>两个表对应的列数和数据类型必须相同，并且相互对应</strong>。各个SELECT语句之间使用UNION或UNION<br>ALL关键字分隔</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">column</span>,... <span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span>]<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">column</span>,... <span class="hljs-keyword">FROM</span> table2<br></code></pre></td></tr></table></figure><p>UNION 和UNION ALL 的区别：</p><p><code>UNION</code>会去重，但效率低；<code>UNION ALL</code>不会去重，效率高；所以在开发中尽量实现<code>UNION ALL</code></p><h4 id="七种SQL-JOIN实现"><a href="#七种SQL-JOIN实现" class="headerlink" title="七种SQL JOIN实现"></a>七种SQL JOIN实现</h4><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-13-32-2edcb470ebdae0ab51afc51629b53231-202210172029611-d4deda.png" alt="image.png"></p><ul><li><p>中图：内连接</p></li><li><p>左上图：左外连接</p></li><li><p>右上图：右外连接</p></li><li><p>左中图：根据左外连接获得左表中不满足条件的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#实现A <span class="hljs-operator">-</span>  A∩B<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子句;<br></code></pre></td></tr></table></figure></li><li><p>右中图：根据右外连接获得右表中不满足条件的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#实现B <span class="hljs-operator">-</span>  A∩B<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子<br></code></pre></td></tr></table></figure></li><li><p>左下图：满连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#实现查询结果是A∪B<br>#用左外的A，<span class="hljs-keyword">union</span> 右外的B<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 等其他子句<br><span class="hljs-keyword">union</span> <br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 等其他子句<br></code></pre></td></tr></table></figure></li><li><p>右下图：主表和从表不满足条件的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#实现A∪B <span class="hljs-operator">-</span>  A∩B  或   (A <span class="hljs-operator">-</span>  A∩B) ∪ （B <span class="hljs-operator">-</span> A∩B）<br>#使用左外的 (A <span class="hljs-operator">-</span>  A∩B)  <span class="hljs-keyword">union</span> 右外的（B <span class="hljs-operator">-</span> A∩B）<br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子句<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> 字段列表<br><span class="hljs-keyword">from</span> A表 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> B表<br><span class="hljs-keyword">on</span> 关联条件<br><span class="hljs-keyword">where</span> 从表关联字段 <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> 等其他子句<br></code></pre></td></tr></table></figure></li></ul><h4 id="SQL99新特性"><a href="#SQL99新特性" class="headerlink" title="SQL99新特性"></a>SQL99新特性</h4><h5 id="NATURAL-JOIN"><a href="#NATURAL-JOIN" class="headerlink" title="NATURAL JOIN"></a>NATURAL JOIN</h5><p>根据两表共同的所有字段连接，但不够灵活</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">NATURAL</span> <span class="hljs-keyword">JOIN</span> departments<br></code></pre></td></tr></table></figure><h5 id="JOIN…-USING…"><a href="#JOIN…-USING…" class="headerlink" title="JOIN… USING…"></a>JOIN… USING…</h5><p>只能指定字段将两表连接，不能实现非等值查询，不够灵活</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,last_name,department_name<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">USING</span> (department_id);<br></code></pre></td></tr></table></figure><h2 id="五、单行函数"><a href="#五、单行函数" class="headerlink" title="五、单行函数"></a>五、单行函数</h2><p>要用看文档就完事了，跳过，数据加密解密过程也都是在客户端完成的，一样跳过</p><p>只整理流程控制的部分</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,vlaue1,value2)</td><td>用法value的值为TRUE，返回value1，否则返回value2</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value1不为NULL，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 条件2 THEN 结果2……[ELSE resultn] END</td><td>相当于java的if…else if…else…</td></tr><tr><td>CASE 表达式 WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2……[ELSE 值n] END</td><td>相当于java的switch…case…</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> IF(<span class="hljs-number">1</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>,<span class="hljs-string">&#x27;正确&#x27;</span>,<span class="hljs-string">&#x27;错误&#x27;</span>)<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>正确<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> IFNULL(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;Hello Word&#x27;</span>)<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>Hello Word<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;1 &gt; 0&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;2 &gt; 0&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;3 &gt; 0&#x27;</span><br><span class="hljs-keyword">END</span><br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-number">1</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;我是1&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;我是2&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;你是谁</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,salary, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> salary<span class="hljs-operator">&gt;=</span><span class="hljs-number">15000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;高薪&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary<span class="hljs-operator">&gt;=</span><span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;潜力股&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary<span class="hljs-operator">&gt;=</span><span class="hljs-number">8000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;屌丝&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;草根&#x27;</span> <span class="hljs-keyword">END</span> &quot;描述&quot;<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> oid,`status`, <span class="hljs-keyword">CASE</span> `status` <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;未付款&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;已付款&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;已发货&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">4</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;确认收货&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;无效订单&#x27;</span> <span class="hljs-keyword">END</span><br><span class="hljs-keyword">FROM</span> t_order;<br></code></pre></td></tr></table></figure><h2 id="六、聚合函数"><a href="#六、聚合函数" class="headerlink" title="六、聚合函数"></a>六、聚合函数</h2><h3 id="基本的5种聚合函数："><a href="#基本的5种聚合函数：" class="headerlink" title="基本的5种聚合函数："></a>基本的5种聚合函数：</h3><p>MAX( ),</p><p>MIN( ),</p><p>AVG( ),</p><p>SUM( )</p><p>COUNT(*)、COUNT(1)、COUNT(列名)</p><p>COUNT(*)、COUNT(1)性能比COUNT(列名)好，因为COUNT(列名)会判断每一行是否为空</p><p>一般只有需要判断空值才用COUNT(列名)</p><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>结论：</p><ol><li>SELECT 中出现的非组函数的字段必须要声明在GROUP BY中。反之，GROUP BY中声明的字段可以不出现在SELECT中</li><li>GROUP BY 声明在FROM后面、WHERE后面,ORDER BY 前面，LIMIT前面</li><li>MYSQL中GROUP BY使用 WITH ROLLUP 关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所 有记录的总和，即统计记录数量。</li></ol><p>​注意： 当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥 的。</p><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><p>要求：</p><ol><li>如果过滤条件中使用了聚合函数，则必须用HAVING来替换WHERE。否则会报错</li><li>HAVING必须声明在GROUP BY的后面。</li><li>开发者，我们使用HAVING的前提是SQL中使用了GROUP BY。</li></ol><p>一般过滤条件也能写在HAVING中，但是根据SQL的执行过程，这样效率很低下（工资-2k警告），所以推荐HAVING只写聚合函数的过滤条件</p><h3 id="SQL语句的执行过程"><a href="#SQL语句的执行过程" class="headerlink" title="SQL语句的执行过程"></a>SQL语句的执行过程</h3><p>FROM….,…. -&gt; ON -&gt; (LEFT&#x2F;RIGHT JOIN) -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT -&gt; DISTINCT -&gt; ORDER BY -&gt;LIMIT </p><h2 id="七、子查询"><a href="#七、子查询" class="headerlink" title="七、子查询"></a>七、子查询</h2><ol><li><p>子查询（内查询）在主查询之前一次执行完成。</p></li><li><p>子查询的结果被主查询（外查询）使用 。</p></li></ol><p>注意事项 </p><ul><li>子查询要包含在括号内 </li><li>将子查询放在比较条件的右侧 </li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,salary<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> (<br>                <span class="hljs-keyword">SELECT</span> salary<br>                <span class="hljs-keyword">FROM</span> employees<br>                <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span><br>            );<br></code></pre></td></tr></table></figure><h3 id="子查询的分类"><a href="#子查询的分类" class="headerlink" title="子查询的分类"></a>子查询的分类</h3><p>分类方式1：</p><p>我们按内查询的结果返回一条还是多条记录，将子查询分为 <code>单行子查询 </code>、 <code>多行子查询</code> 。</p><p><img src="https://raw.githubusercontent.com/nange076/images/master/picgo/2024/04/21/15-13-38-459034ec48f193e6fd350c1d573bcdf9-202210172029076-f242e8.png" alt="image-20220801154956481"></p><p>分类方式2：</p><p> 我们按内查询是否被执行多次，将子查询划分为 <code>相关(或关联)子查询</code> 和 <code>不相关(或非关联)子查询 </code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">4.</span>查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名<br># 非相关子查询<br><span class="hljs-keyword">SELECT</span> employee_id,last_name<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">IN</span> (<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id<br>    <span class="hljs-keyword">FROM</span> employees emi<br>    <span class="hljs-keyword">WHERE</span> emi.last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%u%&#x27;</span> <br>)<br><br># 相关子查询：<br><span class="hljs-keyword">SELECT</span> employee_id,last_name<br><span class="hljs-keyword">FROM</span> employees emo<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span>(<br>    <span class="hljs-keyword">SELECT</span> &quot;X&quot;<br>    <span class="hljs-keyword">FROM</span> employees emi<br>    <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%u%&#x27;</span> <span class="hljs-keyword">AND</span> emo.department_id <span class="hljs-operator">=</span> emi.department_id<br>);<br></code></pre></td></tr></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p> <strong>单行比较操作符：</strong></p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>&#x3D;</td><td>equal to</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&lt;&#x3D;</td><td>less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>not equal to</td></tr></tbody></table><p><strong>多行比较操作符</strong></p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的任意一个</td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的某一个值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的所有值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><p><strong>EXISTS 与 NOT EXISTS关键字 :</strong></p><p>一般用于相关子查询 </p><ul><li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。 </li><li>如果在子查询中不存在满足条件的行： <ul><li>条件返回 FALSE </li><li>继续在子查询中查找</li></ul></li><li>如果在子查询中存在满足条件的行： <ul><li>不在子查询中继续查找 </li><li>条件返回 TRUE</li></ul></li><li>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li></ul><h2 id="八、创建和管理表和数据库"><a href="#八、创建和管理表和数据库" class="headerlink" title="八、创建和管理表和数据库"></a>八、创建和管理表和数据库</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="1、创建和使用数据库"><a href="#1、创建和使用数据库" class="headerlink" title="1、创建和使用数据库"></a>1、创建和使用数据库</h4><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> 数据库名 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> 字符集(例：<span class="hljs-string">&#x27;utf8&#x27;</span>);<br></code></pre></td></tr></table></figure><p>查看所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES; #有一个S，代表多个数据库<br></code></pre></td></tr></table></figure><p>查看当前正在使用的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE(); #使用的一个 mysql 中的全局函数<br></code></pre></td></tr></table></figure><p>查看指定库下所有的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES <span class="hljs-keyword">FROM</span> 数据库名;<br></code></pre></td></tr></table></figure><p>查看数据库的创建信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE 数据库名;<br>或者：<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE 数据库名\G<br></code></pre></td></tr></table></figure><p>使用\切换数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE 数据库名;<br></code></pre></td></tr></table></figure><h4 id="2、修改数据库"><a href="#2、修改数据库" class="headerlink" title="2、修改数据库"></a>2、修改数据库</h4><p>更改数据库字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE 数据库名 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> 字符集; #比如：gbk、utf8等<br></code></pre></td></tr></table></figure><h4 id="3、删除数据库"><a href="#3、删除数据库" class="headerlink" title="3、删除数据库"></a>3、删除数据库</h4><ul><li><p>方式1：删除指定的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE 数据库名; <br></code></pre></td></tr></table></figure></li><li><p>方式2：删除指定的数据库（ 推荐 ） </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE 数据库名; <br></code></pre></td></tr></table></figure></li></ul><p>​</p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="创建方式1"><a href="#创建方式1" class="headerlink" title="创建方式1"></a>创建方式1</h4><ul><li><p>必须具备： </p><ul><li><p>CREATE TABLE权限 </p></li><li><p>存储空间</p></li></ul></li><li><p>语法格式：</p></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] 表名( 字段<span class="hljs-number">1</span>, 数据类型 [约束条件] [默认值], <br>                                字段<span class="hljs-number">2</span>, 数据类型 [约束条件] [默认值], 字段<span class="hljs-number">3</span>, 数据类型 [约束条件] [默认值],<br>                                …… <br>                                [表约束条件]<br>                                 );<br></code></pre></td></tr></table></figure><h4 id="创建方式2"><a href="#创建方式2" class="headerlink" title="创建方式2"></a>创建方式2</h4><ul><li><p>使用 AS subquery 选项，将创建表和插入数据结合起来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">table</span><br>[(cloumn,column..)]<br><span class="hljs-keyword">AS</span> subquery;<br></code></pre></td></tr></table></figure></li><li><p>指定的列和子查询中的列要一一对应 </p></li><li><p>通过列名和默认值定义列</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dept80 <br><span class="hljs-keyword">AS</span> <br><span class="hljs-keyword">SELECT</span> employee_id, last_name, salary<span class="hljs-operator">*</span><span class="hljs-number">12</span> ANNSAL, hire_date <br><span class="hljs-keyword">FROM</span><br>employees <br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure><h4 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名\G<br></code></pre></td></tr></table></figure><h4 id="追加一个列"><a href="#追加一个列" class="headerlink" title="追加一个列"></a>追加一个列</h4><p>语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 【<span class="hljs-keyword">COLUMN</span>】 字段名 字段类型 【<span class="hljs-keyword">FIRST</span><span class="hljs-operator">|</span>AFTER 字段名】; <br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dept80 <span class="hljs-keyword">ADD</span> job_id <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>);<br></code></pre></td></tr></table></figure><h4 id="修改一个列"><a href="#修改一个列" class="headerlink" title="修改一个列"></a>修改一个列</h4><ul><li>可以修改列的数据类型，长度、默认值和位置</li><li>修改字段数据类型、长度、默认值、位置的语法格式如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 【<span class="hljs-keyword">COLUMN</span>】 字段名<span class="hljs-number">1</span> 字段类型 【<span class="hljs-keyword">DEFAULT</span> 默认值】【<span class="hljs-keyword">FIRST</span><span class="hljs-operator">|</span>AFTER 字段名 <span class="hljs-number">2</span>】;<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dept80 MODIFY last_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dept80 MODIFY salary <span class="hljs-keyword">double</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">default</span> <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><ul><li>对默认值的修改只影响今后对表的修改</li></ul><h4 id="重命名一个列"><a href="#重命名一个列" class="headerlink" title="重命名一个列"></a>重命名一个列</h4><p>使用 CHANGE old_column new_column dataType子句重命名列。语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 【<span class="hljs-keyword">column</span>】 列名 新列名 新数据类型;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dept80 CHANGE department_name dept_name <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>);<br></code></pre></td></tr></table></figure><h4 id="删除一个列"><a href="#删除一个列" class="headerlink" title="删除一个列"></a>删除一个列</h4><p>删除表中某个字段的语法格式如下：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 【<span class="hljs-keyword">COLUMN</span>】字段名<br></code></pre></td></tr></table></figure><p> 举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> dept80 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> job_id;<br></code></pre></td></tr></table></figure><h4 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h4><p>方式一：使用RENAME</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> emp <span class="hljs-keyword">TO</span> myemp;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">table</span> dept RENAME [<span class="hljs-keyword">TO</span>] detail_dept; <span class="hljs-comment">-- [TO]可以省略</span><br></code></pre></td></tr></table></figure><ul><li>必须是对象的拥有者</li></ul><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><ul><li><p>在MySQL中，当一张数据表 <code>没有与其他任何数据表形成关联关系</code> 时，可以将当前数据表直接删除。</p></li><li><p>数据和结构都被删除</p></li><li><p>所有正在运行的相关事务被提交 所有相关索引被删除 </p></li><li><p>语法格式：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 数据表<span class="hljs-number">1</span> [, 数据表<span class="hljs-number">2</span>, …, 数据表n];<br></code></pre></td></tr></table></figure><ul><li><p><code>IF EXISTS </code>的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存 在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p></li><li><p>举例：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> dept80; <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 语句不能回滚<br></code></pre></td></tr></table></figure><h4 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h4><ul><li>TRUNCATE TABLE语句<ul><li>： 删除表中所有的数据 </li><li>释放表的存储空间</li></ul></li><li>举例：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> detail_dept;<br></code></pre></td></tr></table></figure><ul><li>TRUNCATE语句不能回滚，而使用 DELETE 语句删除数据，可以回滚</li></ul><h4 id="一些规范"><a href="#一些规范" class="headerlink" title="一些规范"></a>一些规范</h4><ul><li><p>字段的范围选择与大小相符合的</p></li><li><p>清空表、删除表等操作需谨慎</p></li><li><p>MySql8的DDL原子化：</p><ul><li>事务要么执行，要么回滚（要么都做，要么都不做）</li></ul></li></ul><h2 id="九、表的增删改查"><a href="#九、表的增删改查" class="headerlink" title="九、表的增删改查"></a>九、表的增删改查</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>情况1：为表的所有字段按默认顺序插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名<br><span class="hljs-keyword">VALUES</span> (value1,value2,....);<br></code></pre></td></tr></table></figure><p>情况2：为表的指定字段插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名(column1 [, column2, …, columnn]) <br><span class="hljs-keyword">VALUES</span> (value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>情况3：同时插入多条记录 </p><p>INSERT语句可以同时向数据表中插入多条记录，插入时指定多个值列表，每个值列表之间用逗号分隔 开，基本语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name <br><span class="hljs-keyword">VALUES</span> (value1 [,value2, …, valuen]), <br>        (value1 [,value2, …, valuen]),<br>        …… <br>        (value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>将查询结果插入到表中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 目标表名 <br>(tar_column1 [, tar_column2, …, tar_columnn]) <br><span class="hljs-keyword">SELECT</span> (src_column1 [, src_column2, …, src_columnn]) <br><span class="hljs-keyword">FROM</span> 源表名 <br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br></code></pre></td></tr></table></figure><ul><li>在 INSERT 语句中加入子查询。 </li><li>不必书写 VALUES 子句。 </li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> table_name <br><span class="hljs-keyword">SET</span> column1<span class="hljs-operator">=</span>value1, column2<span class="hljs-operator">=</span>value2, … , <span class="hljs-keyword">column</span><span class="hljs-operator">=</span>valuen <br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br></code></pre></td></tr></table></figure><ul><li>可以一次更新<code>多条</code>数据。</li><li>如果需要回滚数据，需要保证在DML前，进行设置：<code>SET AUTOCOMMIT = FALSE</code>;</li></ul><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name <br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">condition</span><span class="hljs-operator">&gt;</span>];<br></code></pre></td></tr></table></figure><h3 id="SQL8新特性：计算列"><a href="#SQL8新特性：计算列" class="headerlink" title="SQL8新特性：计算列"></a>SQL8新特性：计算列</h3><ul><li>什么叫计算列呢？简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列 不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。</li><li>在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。下面以CREATE TABLE为例进行讲 解。</li><li>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的 值。 首先创建测试表tb1，语句如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb1(<br>                id <span class="hljs-type">INT</span>, <br>                a <span class="hljs-type">INT</span>, <br>                b <span class="hljs-type">INT</span>, <br>                c <span class="hljs-type">INT</span> GENERATED ALWAYS <span class="hljs-keyword">AS</span> (a <span class="hljs-operator">+</span> b) VIRTUAL );<br></code></pre></td></tr></table></figure><p>插入演示数据，语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tb1(a,b) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">100</span>,<span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure><p>查询数据表tb1中的数据，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">SELECT * FROM tb1;</span> <br>+------+------+------+------+ <br>| id   |  a  |  b  |  c  |<br>+------+------+------+------+<br>| NULL | 100 | 200 | 300 | <br>+------+------+------+------+ <br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>更新数据中的数据，语句如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">UPDATE tb1 SET a = 500;</span> <br>Query OK, 0 rows affected (0.00 sec) <br>Rows matched: 1 Changed: 0 Warnings: 0<br></code></pre></td></tr></table></figure><h2 id="十、数据类型和约束"><a href="#十、数据类型和约束" class="headerlink" title="十、数据类型和约束"></a>十、数据类型和约束</h2><h2 id="十一、实际开发中不用的技术"><a href="#十一、实际开发中不用的技术" class="headerlink" title="十一、实际开发中不用的技术"></a>十一、实际开发中不用的技术</h2><ol><li><p>外键：会产生更新风暴、迁移困难，阿里官方不推荐使用</p></li><li><p>视图：不推荐用</p></li><li><p>存储过程：迁移困难，mysql作为轻量级数据库系统对存储过程支持度也不好，阿里官方不推荐使用</p></li><li><p>流程控制：与存储过程一起使用，所以跳过</p></li><li><p>触发器：可读性差，影响性能，不推荐使用</p></li></ol><h2 id="十二、MYSQL8的新特性"><a href="#十二、MYSQL8的新特性" class="headerlink" title="十二、MYSQL8的新特性"></a>十二、MYSQL8的新特性</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 笔记迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>